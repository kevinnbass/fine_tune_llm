{
  "class_name": "TrainingDashboard",
  "functionality_map": {
    "file_info": {
      "path": "C:\\Users\\Kevin\\fine_tune_llm\\backups\\god_classes\\dashboard_backup_20250814_123055.py",
      "size": 35114,
      "lines": 891,
      "non_empty_lines": 717,
      "comment_lines": 71
    },
    "imports": {
      "stdlib": [
        "json",
        "time",
        "threading",
        "logging",
        "sys"
      ],
      "third_party": [
        "numpy",
        "streamlit",
        "plotly.graph_objects",
        "plotly.express",
        "pandas"
      ],
      "local": [],
      "from_imports": {
        "pathlib": {
          "category": "stdlib",
          "items": [
            "Path"
          ]
        },
        "typing": {
          "category": "stdlib",
          "items": [
            "Dict",
            "List",
            "Optional",
            "Any"
          ]
        },
        "datetime": {
          "category": "stdlib",
          "items": [
            "datetime",
            "timedelta"
          ]
        },
        "dataclasses": {
          "category": "local",
          "items": [
            "dataclass",
            "asdict"
          ]
        },
        "plotly.subplots": {
          "category": "third_party",
          "items": [
            "make_subplots"
          ]
        },
        "metrics": {
          "category": "local",
          "items": [
            "MetricsAggregator"
          ]
        },
        "conformal": {
          "category": "local",
          "items": [
            "ConformalPredictor",
            "RiskControlledPredictor"
          ]
        }
      },
      "import_aliases": {
        "np": "numpy",
        "st": "streamlit",
        "go": "plotly.graph_objects",
        "px": "plotly.express",
        "pd": "pandas"
      }
    },
    "classes": {
      "TrainingMetrics": {
        "name": "TrainingMetrics",
        "line_start": 42,
        "line_end": 83,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "methods": {},
        "properties": [],
        "class_variables": [
          "epoch",
          "step",
          "timestamp",
          "train_loss",
          "eval_loss",
          "learning_rate",
          "accuracy",
          "f1_score",
          "precision",
          "recall",
          "ece",
          "mce",
          "brier_score",
          "mean_confidence",
          "confidence_accuracy_correlation",
          "abstention_rate",
          "effective_accuracy",
          "abstention_cost",
          "conformal_coverage",
          "conformal_avg_set_size",
          "average_risk",
          "risk_reduction",
          "gpu_memory_used",
          "training_speed"
        ],
        "instance_variables": "set()",
        "docstring": "Structure for training metrics.",
        "complexity_metrics": {
          "method_count": 0,
          "line_count": 42,
          "cyclomatic_complexity": 0,
          "public_methods": 0,
          "private_methods": 0,
          "property_count": 0,
          "inheritance_depth": 0
        }
      },
      "TrainingDashboard": {
        "name": "TrainingDashboard",
        "line_start": 86,
        "line_end": 856,
        "bases": [],
        "decorators": [],
        "methods": {
          "__init__": {
            "name": "__init__",
            "line_start": 89,
            "line_end": 124,
            "line_count": 36,
            "parameters": [
              "self",
              "metrics_path",
              "update_interval",
              "max_history"
            ],
            "decorators": [],
            "docstring": "Initialize training dashboard.\n\nArgs:\n    metrics_path: Path to metrics file for monitoring\n    update_interval: Update interval in seconds\n    max_history: Maximum number of metrics to keep in history",
            "has_args": false,
            "has_kwargs": false,
            "is_async": false,
            "calls_made": [
              "logger.info",
              "Path",
              "MetricsAggregator",
              "ConformalPredictor",
              "RiskControlledPredictor"
            ],
            "complexity": 1,
            "return_count": 0,
            "returns_none": false
          },
          "start_monitoring": {
            "name": "start_monitoring",
            "line_start": 126,
            "line_end": 137,
            "line_count": 12,
            "parameters": [
              "self"
            ],
            "decorators": [],
            "docstring": "Start monitoring training metrics.",
            "has_args": false,
            "has_kwargs": false,
            "is_async": false,
            "calls_made": [
              "threading.Thread",
              "self.monitor_thread.start",
              "logger.info",
              "logger.warning"
            ],
            "complexity": 1,
            "return_count": 2,
            "returns_none": false
          },
          "stop_monitoring": {
            "name": "stop_monitoring",
            "line_start": 139,
            "line_end": 144,
            "line_count": 6,
            "parameters": [
              "self"
            ],
            "decorators": [],
            "docstring": "Stop monitoring training metrics.",
            "has_args": false,
            "has_kwargs": false,
            "is_async": false,
            "calls_made": [
              "logger.info",
              "self.monitor_thread.join"
            ],
            "complexity": 1,
            "return_count": 0,
            "returns_none": false
          },
          "_monitor_loop": {
            "name": "_monitor_loop",
            "line_start": 146,
            "line_end": 154,
            "line_count": 9,
            "parameters": [
              "self"
            ],
            "decorators": [],
            "docstring": "Main monitoring loop.",
            "has_args": false,
            "has_kwargs": false,
            "is_async": false,
            "calls_made": [
              "self._update_metrics",
              "time.sleep",
              "logger.error",
              "time.sleep"
            ],
            "complexity": 2,
            "return_count": 0,
            "returns_none": false
          },
          "_update_metrics": {
            "name": "_update_metrics",
            "line_start": 156,
            "line_end": 224,
            "line_count": 69,
            "parameters": [
              "self"
            ],
            "decorators": [],
            "docstring": "Update metrics from file.",
            "has_args": false,
            "has_kwargs": false,
            "is_async": false,
            "calls_made": [
              "self.metrics_path.exists",
              "self.metrics_path.stat",
              "open",
              "json.load",
              "isinstance",
              "TrainingMetrics",
              "self.metrics_history.append",
              "logger.warning",
              "len",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "time.time",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get"
            ],
            "complexity": 5,
            "return_count": 2,
            "returns_none": true
          },
          "add_metrics": {
            "name": "add_metrics",
            "line_start": 226,
            "line_end": 245,
            "line_count": 20,
            "parameters": [
              "self",
              "metrics_dict"
            ],
            "decorators": [],
            "docstring": "Add metrics manually (for testing or direct integration).",
            "has_args": false,
            "has_kwargs": false,
            "is_async": false,
            "calls_made": [
              "TrainingMetrics",
              "self.metrics_history.append",
              "len",
              "logger.warning",
              "metrics_dict.get",
              "metrics_dict.get",
              "time.time",
              "len",
              "metrics_dict.items",
              "hasattr"
            ],
            "complexity": 2,
            "return_count": 0,
            "returns_none": false
          },
          "get_metrics_dataframe": {
            "name": "get_metrics_dataframe",
            "line_start": 247,
            "line_end": 258,
            "line_count": 12,
            "parameters": [
              "self"
            ],
            "decorators": [],
            "docstring": "Convert metrics history to pandas DataFrame.",
            "has_args": false,
            "has_kwargs": false,
            "is_async": false,
            "calls_made": [
              "pd.DataFrame",
              "pd.to_datetime",
              "pd.DataFrame",
              "asdict"
            ],
            "complexity": 1,
            "return_count": 2,
            "returns_none": false
          },
          "create_dashboard": {
            "name": "create_dashboard",
            "line_start": 260,
            "line_end": 331,
            "line_count": 72,
            "parameters": [
              "self"
            ],
            "decorators": [],
            "docstring": "Create Streamlit dashboard.",
            "has_args": false,
            "has_kwargs": false,
            "is_async": false,
            "calls_made": [
              "st.set_page_config",
              "st.title",
              "st.markdown",
              "st.sidebar.header",
              "st.sidebar.checkbox",
              "st.sidebar.slider",
              "st.sidebar.markdown",
              "st.sidebar.subheader",
              "st.sidebar.markdown",
              "st.sidebar.button",
              "st.sidebar.markdown",
              "self._render_current_status",
              "self._render_training_plots",
              "self._render_metrics_table",
              "st.sidebar.button",
              "self._update_metrics",
              "st.sidebar.info",
              "st.warning",
              "self._render_advanced_plots",
              "self._render_risk_prediction_interface",
              "time.sleep",
              "st.experimental_rerun"
            ],
            "complexity": 7,
            "return_count": 2,
            "returns_none": true
          },
          "_render_current_status": {
            "name": "_render_current_status",
            "line_start": 333,
            "line_end": 398,
            "line_count": 66,
            "parameters": [
              "self"
            ],
            "decorators": [],
            "docstring": "Render current training status.",
            "has_args": false,
            "has_kwargs": false,
            "is_async": false,
            "calls_made": [
              "st.header",
              "st.columns",
              "st.metric",
              "st.metric",
              "st.metric",
              "st.metric",
              "st.metric",
              "st.metric",
              "st.metric",
              "st.metric",
              "self._get_metric_delta",
              "self._get_metric_delta",
              "self._get_metric_delta",
              "self._get_metric_delta",
              "self._get_metric_delta",
              "self._get_metric_delta"
            ],
            "complexity": 8,
            "return_count": 1,
            "returns_none": true
          },
          "_get_metric_delta": {
            "name": "_get_metric_delta",
            "line_start": 400,
            "line_end": 410,
            "line_count": 11,
            "parameters": [
              "self",
              "metric_name"
            ],
            "decorators": [],
            "docstring": "Get delta for a metric compared to previous value.",
            "has_args": false,
            "has_kwargs": false,
            "is_async": false,
            "calls_made": [
              "getattr",
              "getattr",
              "len"
            ],
            "complexity": 2,
            "return_count": 3,
            "returns_none": false
          },
          "_render_training_plots": {
            "name": "_render_training_plots",
            "line_start": 412,
            "line_end": 465,
            "line_count": 54,
            "parameters": [
              "self"
            ],
            "decorators": [],
            "docstring": "Render core training plots.",
            "has_args": false,
            "has_kwargs": false,
            "is_async": false,
            "calls_made": [
              "st.header",
              "self.get_metrics_dataframe",
              "st.columns",
              "st.subheader",
              "st.warning",
              "st.subheader",
              "st.subheader",
              "go.Figure",
              "fig_metrics.update_layout",
              "st.plotly_chart",
              "any",
              "px.line",
              "fig_loss.update_layout",
              "st.plotly_chart",
              "any",
              "px.line",
              "fig_lr.update_layout",
              "st.plotly_chart",
              "fig_metrics.add_trace",
              "any",
              "go.Scatter",
              "dict",
              "notna",
              "notna",
              "notna",
              "title",
              "dict",
              "metric.replace"
            ],
            "complexity": 5,
            "return_count": 1,
            "returns_none": true
          },
          "_render_advanced_plots": {
            "name": "_render_advanced_plots",
            "line_start": 467,
            "line_end": 588,
            "line_count": 122,
            "parameters": [
              "self"
            ],
            "decorators": [],
            "docstring": "Render advanced metrics plots.",
            "has_args": false,
            "has_kwargs": false,
            "is_async": false,
            "calls_made": [
              "st.header",
              "self.get_metrics_dataframe",
              "st.columns",
              "st.columns",
              "st.subheader",
              "st.subheader",
              "st.subheader",
              "st.subheader",
              "go.Figure",
              "fig_cal.update_layout",
              "st.plotly_chart",
              "make_subplots",
              "fig_conf.update_xaxes",
              "fig_conf.update_yaxes",
              "fig_conf.update_yaxes",
              "fig_conf.update_layout",
              "st.plotly_chart",
              "go.Figure",
              "fig_abs.update_layout",
              "st.plotly_chart",
              "go.Figure",
              "fig_risk.update_layout",
              "st.plotly_chart",
              "fig_cal.add_trace",
              "fig_conf.add_trace",
              "fig_conf.add_trace",
              "fig_abs.add_trace",
              "fig_risk.add_trace",
              "any",
              "go.Scatter",
              "any",
              "go.Scatter",
              "go.Scatter",
              "any",
              "go.Scatter",
              "dict",
              "any",
              "go.Scatter",
              "notna",
              "replace",
              "dict",
              "notna",
              "dict",
              "dict",
              "notna",
              "title",
              "dict",
              "notna",
              "title",
              "dict",
              "metric.upper",
              "metric.replace",
              "metric.replace"
            ],
            "complexity": 10,
            "return_count": 1,
            "returns_none": true
          },
          "_render_risk_prediction_interface": {
            "name": "_render_risk_prediction_interface",
            "line_start": 590,
            "line_end": 698,
            "line_count": 109,
            "parameters": [
              "self"
            ],
            "decorators": [],
            "docstring": "Render risk-controlled prediction interface.",
            "has_args": false,
            "has_kwargs": false,
            "is_async": false,
            "calls_made": [
              "st.header",
              "st.markdown",
              "st.columns",
              "st.button",
              "st.subheader",
              "st.subheader",
              "st.text_area",
              "st.subheader",
              "st.slider",
              "st.slider",
              "st.subheader",
              "st.number_input",
              "st.number_input",
              "st.columns",
              "user_text.strip",
              "st.warning",
              "self._make_risk_controlled_prediction",
              "st.metric",
              "st.metric",
              "st.metric"
            ],
            "complexity": 5,
            "return_count": 0,
            "returns_none": false
          },
          "_make_risk_controlled_prediction": {
            "name": "_make_risk_controlled_prediction",
            "line_start": 700,
            "line_end": 814,
            "line_count": 115,
            "parameters": [
              "self",
              "text",
              "confidence_level",
              "risk_tolerance",
              "fp_cost",
              "fn_cost"
            ],
            "decorators": [],
            "docstring": "Make a risk-controlled prediction with the given parameters.",
            "has_args": false,
            "has_kwargs": false,
            "is_async": false,
            "calls_made": [
              "st.subheader",
              "np.array",
              "st.info",
              "st.columns",
              "st.subheader",
              "st.write",
              "enumerate",
              "st.write",
              "st.subheader",
              "st.subheader",
              "st.columns",
              "st.subheader",
              "np.argmax",
              "st.write",
              "st.write",
              "pd.DataFrame",
              "st.bar_chart",
              "st.subheader",
              "np.array",
              "np.argmin",
              "st.write",
              "st.write",
              "st.write",
              "np.argsort",
              "prediction_set.append",
              "st.write",
              "st.error",
              "st.write",
              "st.write",
              "st.metric",
              "st.metric",
              "st.metric",
              "st.error",
              "prob_df.set_index",
              "labels.index",
              "st.success",
              "st.warning",
              "np.sum",
              "np.sum",
              "len",
              "np.partition",
              "np.log",
              "str"
            ],
            "complexity": 6,
            "return_count": 0,
            "returns_none": false
          },
          "_render_metrics_table": {
            "name": "_render_metrics_table",
            "line_start": 816,
            "line_end": 856,
            "line_count": 41,
            "parameters": [
              "self"
            ],
            "decorators": [],
            "docstring": "Render detailed metrics table.",
            "has_args": false,
            "has_kwargs": false,
            "is_async": false,
            "calls_made": [
              "st.header",
              "self.get_metrics_dataframe",
              "copy",
              "dt.strftime",
              "st.button",
              "st.warning",
              "st.dataframe",
              "df.to_csv",
              "st.download_button",
              "df.tail",
              "display_df.select_dtypes",
              "sort_values",
              "round",
              "strftime",
              "datetime.now"
            ],
            "complexity": 5,
            "return_count": 1,
            "returns_none": true
          }
        },
        "properties": [],
        "class_variables": [],
        "instance_variables": "{'metrics_aggregator', 'max_history', 'is_running', 'last_update', 'monitor_thread', 'risk_controlled_predictor', 'conformal_predictor', 'metrics_path', 'update_interval'}",
        "docstring": "Real-time training dashboard with advanced metrics.",
        "complexity_metrics": {
          "method_count": 15,
          "line_count": 771,
          "cyclomatic_complexity": 61,
          "public_methods": 5,
          "private_methods": 10,
          "property_count": 0,
          "inheritance_depth": 0
        }
      }
    },
    "functions": {
      "run_dashboard": {
        "name": "run_dashboard",
        "line_start": 859,
        "line_end": 882,
        "line_count": 24,
        "parameters": [
          "metrics_path",
          "port"
        ],
        "decorators": [],
        "docstring": "Run the training dashboard.\n\nArgs:\n    metrics_path: Path to metrics file\n    port: Port to run Streamlit on",
        "has_args": false,
        "has_kwargs": false,
        "is_async": false,
        "calls_made": [
          "TrainingDashboard",
          "dashboard.start_monitoring",
          "logger.error",
          "dashboard.create_dashboard",
          "dashboard.stop_monitoring",
          "logger.info"
        ],
        "complexity": 2,
        "return_count": 2,
        "returns_none": false
      }
    },
    "dependencies": {
      "internal_calls": {
        "global": [
          "logging.getLogger",
          "run_dashboard",
          "int",
          "len",
          "len"
        ],
        "run_dashboard": [
          "TrainingDashboard",
          "dashboard.start_monitoring",
          "logger.error",
          "dashboard.create_dashboard",
          "dashboard.stop_monitoring",
          "logger.info"
        ],
        "TrainingDashboard.__init__": [
          "logger.info",
          "Path",
          "MetricsAggregator",
          "ConformalPredictor",
          "RiskControlledPredictor"
        ],
        "TrainingDashboard.start_monitoring": [
          "threading.Thread",
          "self.monitor_thread.start",
          "logger.info",
          "logger.warning"
        ],
        "TrainingDashboard.stop_monitoring": [
          "logger.info",
          "self.monitor_thread.join"
        ],
        "TrainingDashboard.get_metrics_dataframe": [
          "pd.DataFrame",
          "pd.to_datetime",
          "pd.DataFrame",
          "asdict"
        ],
        "TrainingDashboard.create_dashboard": [
          "st.set_page_config",
          "st.title",
          "st.markdown",
          "st.sidebar.header",
          "st.sidebar.checkbox",
          "st.sidebar.slider",
          "st.sidebar.markdown",
          "st.sidebar.subheader",
          "st.sidebar.markdown",
          "st.sidebar.button",
          "st.sidebar.markdown",
          "self._render_current_status",
          "self._render_training_plots",
          "self._render_metrics_table",
          "st.sidebar.button",
          "self._update_metrics",
          "st.sidebar.info",
          "st.warning",
          "self._render_advanced_plots",
          "self._render_risk_prediction_interface",
          "time.sleep",
          "st.experimental_rerun"
        ],
        "TrainingDashboard._render_current_status": [
          "st.header",
          "st.columns",
          "st.metric",
          "st.metric",
          "st.metric",
          "st.metric",
          "st.metric",
          "st.metric",
          "st.metric",
          "st.metric",
          "self._get_metric_delta",
          "self._get_metric_delta",
          "self._get_metric_delta",
          "self._get_metric_delta",
          "self._get_metric_delta",
          "self._get_metric_delta"
        ],
        "TrainingDashboard._get_metric_delta": [
          "getattr",
          "getattr",
          "len"
        ],
        "TrainingDashboard._render_training_plots": [
          "st.header",
          "self.get_metrics_dataframe",
          "st.columns",
          "st.subheader",
          "st.warning",
          "st.subheader",
          "st.subheader",
          "go.Figure",
          "fig_metrics.update_layout",
          "st.plotly_chart",
          "any",
          "px.line",
          "fig_loss.update_layout",
          "st.plotly_chart",
          "any",
          "px.line",
          "fig_lr.update_layout",
          "st.plotly_chart",
          "fig_metrics.add_trace",
          "any",
          "go.Scatter",
          "dict",
          "notna",
          "notna",
          "notna",
          "title",
          "dict",
          "metric.replace"
        ],
        "TrainingDashboard._render_advanced_plots": [
          "st.header",
          "self.get_metrics_dataframe",
          "st.columns",
          "st.columns",
          "st.subheader",
          "st.subheader",
          "st.subheader",
          "st.subheader",
          "go.Figure",
          "fig_cal.update_layout",
          "st.plotly_chart",
          "make_subplots",
          "fig_conf.update_xaxes",
          "fig_conf.update_yaxes",
          "fig_conf.update_yaxes",
          "fig_conf.update_layout",
          "st.plotly_chart",
          "go.Figure",
          "fig_abs.update_layout",
          "st.plotly_chart",
          "go.Figure",
          "fig_risk.update_layout",
          "st.plotly_chart",
          "fig_cal.add_trace",
          "fig_conf.add_trace",
          "fig_conf.add_trace",
          "fig_abs.add_trace",
          "fig_risk.add_trace",
          "any",
          "go.Scatter",
          "any",
          "go.Scatter",
          "go.Scatter",
          "any",
          "go.Scatter",
          "dict",
          "any",
          "go.Scatter",
          "notna",
          "replace",
          "dict",
          "notna",
          "dict",
          "dict",
          "notna",
          "title",
          "dict",
          "notna",
          "title",
          "dict",
          "metric.upper",
          "metric.replace",
          "metric.replace"
        ],
        "TrainingDashboard._render_risk_prediction_interface": [
          "st.header",
          "st.markdown",
          "st.columns",
          "st.button",
          "st.subheader",
          "st.subheader",
          "st.text_area",
          "st.subheader",
          "st.slider",
          "st.slider",
          "st.subheader",
          "st.number_input",
          "st.number_input",
          "st.columns",
          "user_text.strip",
          "st.warning",
          "self._make_risk_controlled_prediction",
          "st.metric",
          "st.metric",
          "st.metric"
        ],
        "TrainingDashboard._render_metrics_table": [
          "st.header",
          "self.get_metrics_dataframe",
          "copy",
          "dt.strftime",
          "st.button",
          "st.warning",
          "st.dataframe",
          "df.to_csv",
          "st.download_button",
          "df.tail",
          "display_df.select_dtypes",
          "sort_values",
          "round",
          "strftime",
          "datetime.now"
        ],
        "TrainingDashboard.add_metrics": [
          "TrainingMetrics",
          "self.metrics_history.append",
          "len",
          "logger.warning",
          "metrics_dict.get",
          "metrics_dict.get",
          "time.time",
          "len",
          "metrics_dict.items",
          "hasattr"
        ],
        "TrainingDashboard._make_risk_controlled_prediction": [
          "st.subheader",
          "np.array",
          "st.info",
          "st.columns",
          "st.subheader",
          "st.write",
          "enumerate",
          "st.write",
          "st.subheader",
          "st.subheader",
          "st.columns",
          "st.subheader",
          "np.argmax",
          "st.write",
          "st.write",
          "pd.DataFrame",
          "st.bar_chart",
          "st.subheader",
          "np.array",
          "np.argmin",
          "st.write",
          "st.write",
          "st.write",
          "np.argsort",
          "prediction_set.append",
          "st.write",
          "st.error",
          "st.write",
          "st.write",
          "st.metric",
          "st.metric",
          "st.metric",
          "st.error",
          "prob_df.set_index",
          "labels.index",
          "st.success",
          "st.warning",
          "np.sum",
          "np.sum",
          "len",
          "np.partition",
          "np.log",
          "str"
        ],
        "TrainingDashboard._monitor_loop": [
          "self._update_metrics",
          "time.sleep",
          "logger.error",
          "time.sleep"
        ],
        "TrainingDashboard._update_metrics": [
          "self.metrics_path.exists",
          "self.metrics_path.stat",
          "open",
          "json.load",
          "isinstance",
          "TrainingMetrics",
          "self.metrics_history.append",
          "logger.warning",
          "len",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "time.time",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get"
        ]
      },
      "external_calls": {},
      "attribute_access": {
        "global": [
          "logging.getLogger",
          "sys.argv",
          "sys.argv",
          "sys.argv",
          "sys.argv"
        ],
        "TrainingDashboard.get_metrics_dataframe": [
          "pd.DataFrame",
          "self.metrics_history",
          "pd.DataFrame",
          "pd.to_datetime",
          "pd.DataFrame",
          "self.metrics_history"
        ],
        "TrainingDashboard.__init__": [
          "self.metrics_path",
          "self.update_interval",
          "self.max_history",
          "self.metrics_history",
          "self.current_metrics",
          "self.is_running",
          "self.last_update",
          "self.monitor_thread",
          "self.metrics_path",
          "self.metrics_aggregator",
          "self.conformal_predictor",
          "self.risk_controlled_predictor",
          "self.metrics_aggregator",
          "self.conformal_predictor",
          "self.risk_controlled_predictor",
          "logger.info",
          "self.metrics_path"
        ],
        "TrainingDashboard.start_monitoring": [
          "self.is_running",
          "self.monitor_thread",
          "self.monitor_thread.daemon",
          "threading.Thread",
          "self.monitor_thread",
          "self.monitor_thread.start",
          "logger.info",
          "logger.warning",
          "self._monitor_loop",
          "self.monitor_thread"
        ],
        "TrainingDashboard.stop_monitoring": [
          "self.is_running",
          "self.monitor_thread",
          "logger.info",
          "self.monitor_thread.join",
          "self.monitor_thread"
        ],
        "TrainingDashboard._monitor_loop": [
          "self.is_running",
          "self._update_metrics",
          "time.sleep",
          "self.update_interval",
          "logger.error",
          "time.sleep",
          "self.update_interval"
        ],
        "TrainingDashboard._render_training_plots": [
          "df.empty",
          "st.header",
          "self.get_metrics_dataframe",
          "st.columns",
          "st.subheader",
          "st.warning",
          "st.subheader",
          "st.subheader",
          "go.Figure",
          "fig_metrics.update_layout",
          "st.plotly_chart",
          "df.columns",
          "any",
          "px.line",
          "fig_loss.update_layout",
          "st.plotly_chart",
          "df.columns",
          "any",
          "px.line",
          "fig_lr.update_layout",
          "st.plotly_chart",
          "fig_metrics.add_trace",
          "df.columns",
          "any",
          "go.Scatter",
          "notna",
          "notna",
          "notna",
          "title",
          "metric.replace"
        ],
        "TrainingDashboard._render_advanced_plots": [
          "df.empty",
          "st.header",
          "self.get_metrics_dataframe",
          "st.columns",
          "st.columns",
          "st.subheader",
          "st.subheader",
          "st.subheader",
          "st.subheader",
          "go.Figure",
          "fig_cal.update_layout",
          "st.plotly_chart",
          "fig_conf.update_xaxes",
          "fig_conf.update_yaxes",
          "fig_conf.update_yaxes",
          "fig_conf.update_layout",
          "st.plotly_chart",
          "go.Figure",
          "fig_abs.update_layout",
          "st.plotly_chart",
          "go.Figure",
          "fig_risk.update_layout",
          "st.plotly_chart",
          "fig_cal.add_trace",
          "fig_conf.add_trace",
          "fig_conf.add_trace",
          "fig_abs.add_trace",
          "fig_risk.add_trace",
          "df.columns",
          "any",
          "go.Scatter",
          "df.columns",
          "any",
          "go.Scatter",
          "go.Scatter",
          "df.columns",
          "any",
          "go.Scatter",
          "df.columns",
          "any",
          "go.Scatter",
          "notna",
          "replace",
          "notna",
          "notna",
          "title",
          "notna",
          "title",
          "metric.upper",
          "metric.replace",
          "metric.replace"
        ],
        "TrainingDashboard._render_metrics_table": [
          "df.empty",
          "st.header",
          "self.get_metrics_dataframe",
          "copy",
          "dt.strftime",
          "columns",
          "st.button",
          "st.warning",
          "dt",
          "st.dataframe",
          "df.to_csv",
          "st.download_button",
          "df.tail",
          "display_df.columns",
          "display_df.select_dtypes",
          "display_df.columns",
          "sort_values",
          "round",
          "np.number",
          "strftime",
          "datetime.now"
        ],
        "run_dashboard": [
          "dashboard.start_monitoring",
          "logger.error",
          "dashboard.create_dashboard",
          "dashboard.stop_monitoring",
          "logger.info"
        ],
        "TrainingDashboard._update_metrics": [
          "st_mtime",
          "self.last_update",
          "self.metrics_path",
          "self.last_update",
          "self.current_metrics",
          "self.metrics_path.exists",
          "self.metrics_path.stat",
          "self.metrics_path",
          "json.load",
          "self.metrics_history.append",
          "self.max_history",
          "self.metrics_history",
          "logger.warning",
          "self.metrics_path",
          "self.metrics_path",
          "self.metrics_history",
          "self.metrics_history",
          "self.metrics_history",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "time.time",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "self.max_history"
        ],
        "TrainingDashboard.add_metrics": [
          "self.current_metrics",
          "self.metrics_history.append",
          "self.max_history",
          "self.metrics_history",
          "self.metrics_history",
          "self.metrics_history",
          "self.metrics_history",
          "logger.warning",
          "metrics_dict.get",
          "metrics_dict.get",
          "time.time",
          "self.metrics_history",
          "self.max_history",
          "metrics_dict.items"
        ],
        "TrainingDashboard.create_dashboard": [
          "st.set_page_config",
          "st.title",
          "st.markdown",
          "st.sidebar.header",
          "st.sidebar.checkbox",
          "st.sidebar.slider",
          "self.update_interval",
          "st.sidebar.markdown",
          "st.sidebar.subheader",
          "st.sidebar.markdown",
          "st.sidebar.button",
          "st.sidebar.markdown",
          "self.metrics_history",
          "self._render_current_status",
          "self._render_training_plots",
          "self._render_metrics_table",
          "st.sidebar",
          "st.sidebar",
          "st.sidebar",
          "st.sidebar.button",
          "self._update_metrics",
          "st.sidebar",
          "st.sidebar",
          "st.sidebar",
          "st.sidebar",
          "st.sidebar.info",
          "st.sidebar",
          "st.warning",
          "self._render_advanced_plots",
          "self._render_risk_prediction_interface",
          "time.sleep",
          "st.experimental_rerun",
          "st.sidebar",
          "st.sidebar"
        ],
        "TrainingDashboard._render_current_status": [
          "self.current_metrics",
          "st.header",
          "st.columns",
          "self.current_metrics.train_loss",
          "self.current_metrics.accuracy",
          "self.current_metrics.learning_rate",
          "st.metric",
          "self.current_metrics",
          "self.current_metrics",
          "self.current_metrics",
          "self.current_metrics.ece",
          "self.current_metrics.abstention_rate",
          "self.current_metrics.conformal_coverage",
          "self.current_metrics.average_risk",
          "st.metric",
          "st.metric",
          "st.metric",
          "self.current_metrics",
          "st.metric",
          "self.current_metrics",
          "st.metric",
          "self.current_metrics",
          "st.metric",
          "self.current_metrics",
          "st.metric",
          "self.current_metrics.epoch",
          "self.current_metrics",
          "self.current_metrics.train_loss",
          "self._get_metric_delta",
          "self.current_metrics.accuracy",
          "self._get_metric_delta",
          "self.current_metrics.learning_rate",
          "self.current_metrics.ece",
          "self._get_metric_delta",
          "self.current_metrics.abstention_rate",
          "self._get_metric_delta",
          "self.current_metrics.conformal_coverage",
          "self._get_metric_delta",
          "self.current_metrics.average_risk",
          "self._get_metric_delta",
          "self.current_metrics",
          "self.current_metrics",
          "self.current_metrics",
          "self.current_metrics",
          "self.current_metrics",
          "self.current_metrics",
          "self.current_metrics"
        ],
        "TrainingDashboard._get_metric_delta": [
          "self.current_metrics",
          "self.metrics_history",
          "self.metrics_history"
        ],
        "TrainingDashboard._render_risk_prediction_interface": [
          "st.header",
          "st.markdown",
          "st.columns",
          "st.button",
          "st.subheader",
          "self.current_metrics",
          "st.subheader",
          "st.text_area",
          "st.subheader",
          "st.slider",
          "st.slider",
          "st.subheader",
          "st.number_input",
          "st.number_input",
          "self.current_metrics.ece",
          "st.columns",
          "user_text.strip",
          "st.warning",
          "self._make_risk_controlled_prediction",
          "self.current_metrics",
          "st.metric",
          "self.current_metrics.conformal_coverage",
          "self.current_metrics.average_risk",
          "self.current_metrics.ece",
          "self.current_metrics",
          "st.metric",
          "self.current_metrics",
          "st.metric",
          "self.current_metrics",
          "self.current_metrics.ece",
          "self.current_metrics.ece",
          "self.current_metrics.conformal_coverage",
          "self.current_metrics.average_risk",
          "self.current_metrics",
          "self.current_metrics",
          "self.current_metrics",
          "self.current_metrics.conformal_coverage",
          "self.current_metrics.conformal_coverage",
          "self.current_metrics",
          "self.current_metrics.average_risk",
          "self.current_metrics.average_risk",
          "self.current_metrics",
          "self.current_metrics",
          "self.current_metrics",
          "self.current_metrics"
        ],
        "TrainingDashboard._make_risk_controlled_prediction": [
          "st.subheader",
          "np.array",
          "st.info",
          "st.columns",
          "st.subheader",
          "st.write",
          "st.write",
          "st.subheader",
          "st.subheader",
          "st.columns",
          "st.subheader",
          "np.argmax",
          "st.write",
          "st.write",
          "pd.DataFrame",
          "st.bar_chart",
          "st.subheader",
          "np.array",
          "np.argmin",
          "st.write",
          "st.write",
          "st.write",
          "np.argsort",
          "prediction_set.append",
          "st.write",
          "st.error",
          "st.write",
          "st.write",
          "st.metric",
          "st.metric",
          "st.metric",
          "st.error",
          "prob_df.set_index",
          "labels.index",
          "st.success",
          "st.warning",
          "np.sum",
          "np.sum",
          "np.partition",
          "np.log"
        ]
      },
      "inheritance_chain": {},
      "composition_relationships": {}
    },
    "call_graph": {
      "TrainingDashboard.__init__": {
        "type": "method",
        "calls": [
          "logger.info",
          "Path",
          "MetricsAggregator",
          "ConformalPredictor",
          "RiskControlledPredictor"
        ],
        "called_by": [],
        "complexity": 1,
        "line_count": 36
      },
      "TrainingDashboard.start_monitoring": {
        "type": "method",
        "calls": [
          "threading.Thread",
          "self.monitor_thread.start",
          "logger.info",
          "logger.warning"
        ],
        "called_by": [],
        "complexity": 1,
        "line_count": 12
      },
      "TrainingDashboard.stop_monitoring": {
        "type": "method",
        "calls": [
          "logger.info",
          "self.monitor_thread.join"
        ],
        "called_by": [],
        "complexity": 1,
        "line_count": 6
      },
      "TrainingDashboard._monitor_loop": {
        "type": "method",
        "calls": [
          "self._update_metrics",
          "time.sleep",
          "logger.error",
          "time.sleep"
        ],
        "called_by": [],
        "complexity": 2,
        "line_count": 9
      },
      "TrainingDashboard._update_metrics": {
        "type": "method",
        "calls": [
          "self.metrics_path.exists",
          "self.metrics_path.stat",
          "open",
          "json.load",
          "isinstance",
          "TrainingMetrics",
          "self.metrics_history.append",
          "logger.warning",
          "len",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "time.time",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get",
          "latest_data.get"
        ],
        "called_by": [],
        "complexity": 5,
        "line_count": 69
      },
      "TrainingDashboard.add_metrics": {
        "type": "method",
        "calls": [
          "TrainingMetrics",
          "self.metrics_history.append",
          "len",
          "logger.warning",
          "metrics_dict.get",
          "metrics_dict.get",
          "time.time",
          "len",
          "metrics_dict.items",
          "hasattr"
        ],
        "called_by": [],
        "complexity": 2,
        "line_count": 20
      },
      "TrainingDashboard.get_metrics_dataframe": {
        "type": "method",
        "calls": [
          "pd.DataFrame",
          "pd.to_datetime",
          "pd.DataFrame",
          "asdict"
        ],
        "called_by": [],
        "complexity": 1,
        "line_count": 12
      },
      "TrainingDashboard.create_dashboard": {
        "type": "method",
        "calls": [
          "st.set_page_config",
          "st.title",
          "st.markdown",
          "st.sidebar.header",
          "st.sidebar.checkbox",
          "st.sidebar.slider",
          "st.sidebar.markdown",
          "st.sidebar.subheader",
          "st.sidebar.markdown",
          "st.sidebar.button",
          "st.sidebar.markdown",
          "self._render_current_status",
          "self._render_training_plots",
          "self._render_metrics_table",
          "st.sidebar.button",
          "self._update_metrics",
          "st.sidebar.info",
          "st.warning",
          "self._render_advanced_plots",
          "self._render_risk_prediction_interface",
          "time.sleep",
          "st.experimental_rerun"
        ],
        "called_by": [],
        "complexity": 7,
        "line_count": 72
      },
      "TrainingDashboard._render_current_status": {
        "type": "method",
        "calls": [
          "st.header",
          "st.columns",
          "st.metric",
          "st.metric",
          "st.metric",
          "st.metric",
          "st.metric",
          "st.metric",
          "st.metric",
          "st.metric",
          "self._get_metric_delta",
          "self._get_metric_delta",
          "self._get_metric_delta",
          "self._get_metric_delta",
          "self._get_metric_delta",
          "self._get_metric_delta"
        ],
        "called_by": [],
        "complexity": 8,
        "line_count": 66
      },
      "TrainingDashboard._get_metric_delta": {
        "type": "method",
        "calls": [
          "getattr",
          "getattr",
          "len"
        ],
        "called_by": [],
        "complexity": 2,
        "line_count": 11
      },
      "TrainingDashboard._render_training_plots": {
        "type": "method",
        "calls": [
          "st.header",
          "self.get_metrics_dataframe",
          "st.columns",
          "st.subheader",
          "st.warning",
          "st.subheader",
          "st.subheader",
          "go.Figure",
          "fig_metrics.update_layout",
          "st.plotly_chart",
          "any",
          "px.line",
          "fig_loss.update_layout",
          "st.plotly_chart",
          "any",
          "px.line",
          "fig_lr.update_layout",
          "st.plotly_chart",
          "fig_metrics.add_trace",
          "any",
          "go.Scatter",
          "dict",
          "notna",
          "notna",
          "notna",
          "title",
          "dict",
          "metric.replace"
        ],
        "called_by": [],
        "complexity": 5,
        "line_count": 54
      },
      "TrainingDashboard._render_advanced_plots": {
        "type": "method",
        "calls": [
          "st.header",
          "self.get_metrics_dataframe",
          "st.columns",
          "st.columns",
          "st.subheader",
          "st.subheader",
          "st.subheader",
          "st.subheader",
          "go.Figure",
          "fig_cal.update_layout",
          "st.plotly_chart",
          "make_subplots",
          "fig_conf.update_xaxes",
          "fig_conf.update_yaxes",
          "fig_conf.update_yaxes",
          "fig_conf.update_layout",
          "st.plotly_chart",
          "go.Figure",
          "fig_abs.update_layout",
          "st.plotly_chart",
          "go.Figure",
          "fig_risk.update_layout",
          "st.plotly_chart",
          "fig_cal.add_trace",
          "fig_conf.add_trace",
          "fig_conf.add_trace",
          "fig_abs.add_trace",
          "fig_risk.add_trace",
          "any",
          "go.Scatter",
          "any",
          "go.Scatter",
          "go.Scatter",
          "any",
          "go.Scatter",
          "dict",
          "any",
          "go.Scatter",
          "notna",
          "replace",
          "dict",
          "notna",
          "dict",
          "dict",
          "notna",
          "title",
          "dict",
          "notna",
          "title",
          "dict",
          "metric.upper",
          "metric.replace",
          "metric.replace"
        ],
        "called_by": [],
        "complexity": 10,
        "line_count": 122
      },
      "TrainingDashboard._render_risk_prediction_interface": {
        "type": "method",
        "calls": [
          "st.header",
          "st.markdown",
          "st.columns",
          "st.button",
          "st.subheader",
          "st.subheader",
          "st.text_area",
          "st.subheader",
          "st.slider",
          "st.slider",
          "st.subheader",
          "st.number_input",
          "st.number_input",
          "st.columns",
          "user_text.strip",
          "st.warning",
          "self._make_risk_controlled_prediction",
          "st.metric",
          "st.metric",
          "st.metric"
        ],
        "called_by": [],
        "complexity": 5,
        "line_count": 109
      },
      "TrainingDashboard._make_risk_controlled_prediction": {
        "type": "method",
        "calls": [
          "st.subheader",
          "np.array",
          "st.info",
          "st.columns",
          "st.subheader",
          "st.write",
          "enumerate",
          "st.write",
          "st.subheader",
          "st.subheader",
          "st.columns",
          "st.subheader",
          "np.argmax",
          "st.write",
          "st.write",
          "pd.DataFrame",
          "st.bar_chart",
          "st.subheader",
          "np.array",
          "np.argmin",
          "st.write",
          "st.write",
          "st.write",
          "np.argsort",
          "prediction_set.append",
          "st.write",
          "st.error",
          "st.write",
          "st.write",
          "st.metric",
          "st.metric",
          "st.metric",
          "st.error",
          "prob_df.set_index",
          "labels.index",
          "st.success",
          "st.warning",
          "np.sum",
          "np.sum",
          "len",
          "np.partition",
          "np.log",
          "str"
        ],
        "called_by": [],
        "complexity": 6,
        "line_count": 115
      },
      "TrainingDashboard._render_metrics_table": {
        "type": "method",
        "calls": [
          "st.header",
          "self.get_metrics_dataframe",
          "copy",
          "dt.strftime",
          "st.button",
          "st.warning",
          "st.dataframe",
          "df.to_csv",
          "st.download_button",
          "df.tail",
          "display_df.select_dtypes",
          "sort_values",
          "round",
          "strftime",
          "datetime.now"
        ],
        "called_by": [],
        "complexity": 5,
        "line_count": 41
      },
      "run_dashboard": {
        "type": "function",
        "calls": [
          "TrainingDashboard",
          "dashboard.start_monitoring",
          "logger.error",
          "dashboard.create_dashboard",
          "dashboard.stop_monitoring",
          "logger.info"
        ],
        "called_by": [],
        "complexity": 2,
        "line_count": 24
      }
    },
    "data_flow": {
      "global_variables": [
        "logger"
      ],
      "shared_state": {},
      "parameter_flow": {
        "TrainingDashboard.__init__": {
          "parameters": [
            "self",
            "metrics_path",
            "update_interval",
            "max_history"
          ],
          "parameter_count": 4,
          "has_self": true,
          "has_kwargs": false,
          "has_args": false
        },
        "TrainingDashboard.start_monitoring": {
          "parameters": [
            "self"
          ],
          "parameter_count": 1,
          "has_self": true,
          "has_kwargs": false,
          "has_args": false
        },
        "TrainingDashboard.stop_monitoring": {
          "parameters": [
            "self"
          ],
          "parameter_count": 1,
          "has_self": true,
          "has_kwargs": false,
          "has_args": false
        },
        "TrainingDashboard._monitor_loop": {
          "parameters": [
            "self"
          ],
          "parameter_count": 1,
          "has_self": true,
          "has_kwargs": false,
          "has_args": false
        },
        "TrainingDashboard._update_metrics": {
          "parameters": [
            "self"
          ],
          "parameter_count": 1,
          "has_self": true,
          "has_kwargs": false,
          "has_args": false
        },
        "TrainingDashboard.add_metrics": {
          "parameters": [
            "self",
            "metrics_dict"
          ],
          "parameter_count": 2,
          "has_self": true,
          "has_kwargs": false,
          "has_args": false
        },
        "TrainingDashboard.get_metrics_dataframe": {
          "parameters": [
            "self"
          ],
          "parameter_count": 1,
          "has_self": true,
          "has_kwargs": false,
          "has_args": false
        },
        "TrainingDashboard.create_dashboard": {
          "parameters": [
            "self"
          ],
          "parameter_count": 1,
          "has_self": true,
          "has_kwargs": false,
          "has_args": false
        },
        "TrainingDashboard._render_current_status": {
          "parameters": [
            "self"
          ],
          "parameter_count": 1,
          "has_self": true,
          "has_kwargs": false,
          "has_args": false
        },
        "TrainingDashboard._get_metric_delta": {
          "parameters": [
            "self",
            "metric_name"
          ],
          "parameter_count": 2,
          "has_self": true,
          "has_kwargs": false,
          "has_args": false
        },
        "TrainingDashboard._render_training_plots": {
          "parameters": [
            "self"
          ],
          "parameter_count": 1,
          "has_self": true,
          "has_kwargs": false,
          "has_args": false
        },
        "TrainingDashboard._render_advanced_plots": {
          "parameters": [
            "self"
          ],
          "parameter_count": 1,
          "has_self": true,
          "has_kwargs": false,
          "has_args": false
        },
        "TrainingDashboard._render_risk_prediction_interface": {
          "parameters": [
            "self"
          ],
          "parameter_count": 1,
          "has_self": true,
          "has_kwargs": false,
          "has_args": false
        },
        "TrainingDashboard._make_risk_controlled_prediction": {
          "parameters": [
            "self",
            "text",
            "confidence_level",
            "risk_tolerance",
            "fp_cost",
            "fn_cost"
          ],
          "parameter_count": 6,
          "has_self": true,
          "has_kwargs": false,
          "has_args": false
        },
        "TrainingDashboard._render_metrics_table": {
          "parameters": [
            "self"
          ],
          "parameter_count": 1,
          "has_self": true,
          "has_kwargs": false,
          "has_args": false
        }
      },
      "return_patterns": {
        "TrainingDashboard.__init__": {
          "return_statements": 0,
          "returns_none": false,
          "return_complexity": "single"
        },
        "TrainingDashboard.start_monitoring": {
          "return_statements": 2,
          "returns_none": false,
          "return_complexity": "multiple"
        },
        "TrainingDashboard.stop_monitoring": {
          "return_statements": 0,
          "returns_none": false,
          "return_complexity": "single"
        },
        "TrainingDashboard._monitor_loop": {
          "return_statements": 0,
          "returns_none": false,
          "return_complexity": "single"
        },
        "TrainingDashboard._update_metrics": {
          "return_statements": 2,
          "returns_none": true,
          "return_complexity": "multiple"
        },
        "TrainingDashboard.add_metrics": {
          "return_statements": 0,
          "returns_none": false,
          "return_complexity": "single"
        },
        "TrainingDashboard.get_metrics_dataframe": {
          "return_statements": 2,
          "returns_none": false,
          "return_complexity": "multiple"
        },
        "TrainingDashboard.create_dashboard": {
          "return_statements": 2,
          "returns_none": true,
          "return_complexity": "multiple"
        },
        "TrainingDashboard._render_current_status": {
          "return_statements": 1,
          "returns_none": true,
          "return_complexity": "single"
        },
        "TrainingDashboard._get_metric_delta": {
          "return_statements": 3,
          "returns_none": false,
          "return_complexity": "multiple"
        },
        "TrainingDashboard._render_training_plots": {
          "return_statements": 1,
          "returns_none": true,
          "return_complexity": "single"
        },
        "TrainingDashboard._render_advanced_plots": {
          "return_statements": 1,
          "returns_none": true,
          "return_complexity": "single"
        },
        "TrainingDashboard._render_risk_prediction_interface": {
          "return_statements": 0,
          "returns_none": false,
          "return_complexity": "single"
        },
        "TrainingDashboard._make_risk_controlled_prediction": {
          "return_statements": 0,
          "returns_none": false,
          "return_complexity": "single"
        },
        "TrainingDashboard._render_metrics_table": {
          "return_statements": 1,
          "returns_none": true,
          "return_complexity": "single"
        }
      }
    },
    "analysis_metadata": {
      "timestamp": "2025-08-14T18:24:47.816419Z",
      "analyzer_version": "1.0.0",
      "file_analyzed": "C:\\Users\\Kevin\\fine_tune_llm\\backups\\god_classes\\dashboard_backup_20250814_123055.py",
      "analysis_complete": true
    }
  },
  "summary_report": {
    "file_summary": {
      "file_path": "C:\\Users\\Kevin\\fine_tune_llm\\backups\\god_classes\\dashboard_backup_20250814_123055.py",
      "total_classes": 2,
      "total_methods": 15,
      "total_functions": 1,
      "total_imports": 10,
      "lines_of_code": 717,
      "total_complexity": 61
    },
    "complexity_analysis": {
      "average_methods_per_class": 7.5,
      "most_complex_class": {
        "name": "TrainingDashboard",
        "complexity": 61,
        "method_count": 15,
        "line_count": 771
      },
      "most_connected_method": {
        "name": "TrainingDashboard._render_advanced_plots",
        "total_connections": 53,
        "outgoing_calls": 53,
        "incoming_calls": 0
      },
      "dependency_density": 1.0
    },
    "decomposition_candidates": [
      {
        "class_name": "TrainingDashboard",
        "reason": "god_class",
        "method_count": 15,
        "complexity": 61,
        "line_count": 771,
        "decomposition_suggestions": [
          "Extract -related methods into separate class",
          "Extract utility methods into helper class"
        ]
      }
    ],
    "external_dependencies": {
      "third_party_imports": [
        "numpy",
        "streamlit",
        "plotly.graph_objects",
        "plotly.express",
        "pandas"
      ],
      "high_coupling_indicators": [
        "Highly connected methods: 8"
      ]
    }
  }
}