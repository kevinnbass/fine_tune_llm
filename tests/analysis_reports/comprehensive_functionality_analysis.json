{
  "timestamp": "2025-08-14T18:24:46.344412Z",
  "project_root": "C:\\Users\\Kevin\\fine_tune_llm",
  "backup_directory": "C:\\Users\\Kevin\\fine_tune_llm\\backups\\god_classes",
  "functionality_maps": [
    {
      "class_name": "AdvancedHighStakesAuditor",
      "functionality_map": {
        "file_info": {
          "path": "C:\\Users\\Kevin\\fine_tune_llm\\backups\\god_classes\\high_stakes_audit_backup_20250814_121039.py",
          "size": 51075,
          "lines": 1233,
          "non_empty_lines": 985,
          "comment_lines": 84
        },
        "imports": {
          "stdlib": [
            "logging",
            "json",
            "hashlib",
            "re"
          ],
          "third_party": [
            "torch",
            "torch.nn.functional",
            "numpy"
          ],
          "local": [
            "yaml"
          ],
          "from_imports": {
            "typing": {
              "category": "stdlib",
              "items": [
                "Dict",
                "List",
                "Optional",
                "Tuple",
                "Any"
              ]
            },
            "pathlib": {
              "category": "stdlib",
              "items": [
                "Path"
              ]
            },
            "datetime": {
              "category": "stdlib",
              "items": [
                "datetime"
              ]
            },
            "metrics": {
              "category": "local",
              "items": [
                "compute_ece",
                "compute_mce",
                "compute_brier_score",
                "compute_abstention_metrics",
                "compute_risk_aware_metrics",
                "compute_confidence_metrics",
                "MetricsAggregator"
              ]
            },
            "conformal": {
              "category": "local",
              "items": [
                "ConformalPredictor",
                "RiskControlledPredictor"
              ]
            }
          },
          "import_aliases": {
            "F": "torch.nn.functional",
            "np": "numpy"
          }
        },
        "classes": {
          "BiasAuditor": {
            "name": "BiasAuditor",
            "line_start": 29,
            "line_end": 218,
            "bases": [],
            "decorators": [],
            "methods": {
              "__init__": {
                "name": "__init__",
                "line_start": 32,
                "line_end": 58,
                "line_count": 27,
                "parameters": [
                  "self",
                  "config"
                ],
                "decorators": [],
                "docstring": null,
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "get",
                  "self.bias_config.get",
                  "self.bias_config.get",
                  "self.bias_config.get",
                  "config.get"
                ],
                "complexity": 0,
                "return_count": 0,
                "returns_none": false
              },
              "detect_bias": {
                "name": "detect_bias",
                "line_start": 60,
                "line_end": 103,
                "line_count": 44,
                "parameters": [
                  "self",
                  "text",
                  "predictions"
                ],
                "decorators": [],
                "docstring": "Detect bias in text and predictions.\n\nArgs:\n    text: Input text\n    predictions: Model predictions\n    \nReturns:\n    Dictionary of bias scores by category",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "text.lower",
                  "bias_scores.items",
                  "logger.error",
                  "self._detect_gender_bias",
                  "logger.warning",
                  "self.audit_log.append",
                  "self._detect_race_bias",
                  "self._detect_age_bias",
                  "isoformat",
                  "self._detect_nationality_bias",
                  "datetime.now"
                ],
                "complexity": 8,
                "return_count": 2,
                "returns_none": false
              },
              "_detect_gender_bias": {
                "name": "_detect_gender_bias",
                "line_start": 105,
                "line_end": 130,
                "line_count": 26,
                "parameters": [
                  "self",
                  "text",
                  "predictions"
                ],
                "decorators": [],
                "docstring": "Detect gender bias in text and predictions.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "sum",
                  "sum",
                  "sum",
                  "item",
                  "min",
                  "abs",
                  "len",
                  "predictions.std"
                ],
                "complexity": 3,
                "return_count": 2,
                "returns_none": false
              },
              "_detect_race_bias": {
                "name": "_detect_race_bias",
                "line_start": 132,
                "line_end": 141,
                "line_count": 10,
                "parameters": [
                  "self",
                  "text",
                  "predictions"
                ],
                "decorators": [],
                "docstring": "Detect racial bias in text.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "sum",
                  "min"
                ],
                "complexity": 0,
                "return_count": 1,
                "returns_none": false
              },
              "_detect_age_bias": {
                "name": "_detect_age_bias",
                "line_start": 143,
                "line_end": 156,
                "line_count": 14,
                "parameters": [
                  "self",
                  "text",
                  "predictions"
                ],
                "decorators": [],
                "docstring": "Detect age bias in text.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "sum",
                  "sum",
                  "abs"
                ],
                "complexity": 1,
                "return_count": 2,
                "returns_none": false
              },
              "_detect_nationality_bias": {
                "name": "_detect_nationality_bias",
                "line_start": 158,
                "line_end": 167,
                "line_count": 10,
                "parameters": [
                  "self",
                  "text",
                  "predictions"
                ],
                "decorators": [],
                "docstring": "Detect nationality bias in text.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "sum",
                  "min"
                ],
                "complexity": 0,
                "return_count": 1,
                "returns_none": false
              },
              "compute_bias_mitigation_loss": {
                "name": "compute_bias_mitigation_loss",
                "line_start": 169,
                "line_end": 191,
                "line_count": 23,
                "parameters": [
                  "self",
                  "text",
                  "predictions"
                ],
                "decorators": [],
                "docstring": "Compute loss to mitigate bias.\n\nArgs:\n    text: Input text\n    predictions: Model predictions\n    \nReturns:\n    Bias mitigation loss",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "self.detect_bias",
                  "torch.tensor",
                  "self.bias_config.get",
                  "torch.tensor",
                  "sum",
                  "len",
                  "bias_scores.values"
                ],
                "complexity": 1,
                "return_count": 2,
                "returns_none": false
              },
              "generate_audit_report": {
                "name": "generate_audit_report",
                "line_start": 193,
                "line_end": 218,
                "line_count": 26,
                "parameters": [
                  "self",
                  "save_path"
                ],
                "decorators": [],
                "docstring": "Generate comprehensive bias audit report.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "isoformat",
                  "len",
                  "logger.info",
                  "open",
                  "json.dump",
                  "datetime.now",
                  "len",
                  "np.mean",
                  "np.max",
                  "len"
                ],
                "complexity": 3,
                "return_count": 1,
                "returns_none": false
              }
            },
            "properties": [],
            "class_variables": [],
            "instance_variables": "{'config', 'audit_log', 'audit_categories', 'bias_config', 'bias_patterns', 'mitigation_weight', 'bias_threshold'}",
            "docstring": "Audit and mitigate bias in high-stakes predictions.",
            "complexity_metrics": {
              "method_count": 8,
              "line_count": 190,
              "cyclomatic_complexity": 16,
              "public_methods": 3,
              "private_methods": 5,
              "property_count": 0,
              "inheritance_depth": 0
            }
          },
          "ExplainableReasoning": {
            "name": "ExplainableReasoning",
            "line_start": 221,
            "line_end": 377,
            "bases": [],
            "decorators": [],
            "methods": {
              "__init__": {
                "name": "__init__",
                "line_start": 224,
                "line_end": 231,
                "line_count": 8,
                "parameters": [
                  "self",
                  "model",
                  "tokenizer",
                  "config"
                ],
                "decorators": [],
                "docstring": null,
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "get",
                  "self.explain_config.get",
                  "self.explain_config.get",
                  "self.explain_config.get",
                  "config.get"
                ],
                "complexity": 0,
                "return_count": 0,
                "returns_none": false
              },
              "generate_reasoning_chain": {
                "name": "generate_reasoning_chain",
                "line_start": 233,
                "line_end": 277,
                "line_count": 45,
                "parameters": [
                  "self",
                  "input_text"
                ],
                "decorators": [],
                "docstring": "Generate step-by-step reasoning chain.\n\nArgs:\n    input_text: Input requiring reasoning\n    \nReturns:\n    Tuple of (final_answer, reasoning_steps)",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "self.tokenizer",
                  "self.tokenizer.decode",
                  "self._extract_reasoning_steps",
                  "self._extract_final_answer",
                  "self.explain_config.get",
                  "torch.no_grad",
                  "self.model.generate",
                  "logger.error"
                ],
                "complexity": 2,
                "return_count": 3,
                "returns_none": false
              },
              "_extract_reasoning_steps": {
                "name": "_extract_reasoning_steps",
                "line_start": 279,
                "line_end": 300,
                "line_count": 22,
                "parameters": [
                  "self",
                  "text"
                ],
                "decorators": [],
                "docstring": "Extract individual reasoning steps from text.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "re.findall",
                  "text.split",
                  "s.strip",
                  "len",
                  "match.strip",
                  "len",
                  "s.strip"
                ],
                "complexity": 3,
                "return_count": 1,
                "returns_none": false
              },
              "_extract_final_answer": {
                "name": "_extract_final_answer",
                "line_start": 302,
                "line_end": 323,
                "line_count": 22,
                "parameters": [
                  "self",
                  "text"
                ],
                "decorators": [],
                "docstring": "Extract final answer from reasoning text.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "text.split",
                  "re.search",
                  "strip",
                  "strip",
                  "match.group"
                ],
                "complexity": 3,
                "return_count": 3,
                "returns_none": false
              },
              "verify_faithfulness": {
                "name": "verify_faithfulness",
                "line_start": 325,
                "line_end": 377,
                "line_count": 53,
                "parameters": [
                  "self",
                  "reasoning_steps",
                  "final_answer"
                ],
                "decorators": [],
                "docstring": "Verify that reasoning faithfully leads to conclusion.\n\nArgs:\n    reasoning_steps: List of reasoning steps\n    final_answer: Final conclusion\n    \nReturns:\n    Tuple of (is_faithful, faithfulness_score)",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "join",
                  "self.tokenizer",
                  "lower",
                  "torch.no_grad",
                  "self.model.generate",
                  "logger.error",
                  "self.tokenizer.decode",
                  "enumerate"
                ],
                "complexity": 4,
                "return_count": 3,
                "returns_none": false
              }
            },
            "properties": [],
            "class_variables": [],
            "instance_variables": "{'explain_config', 'config', 'chain_of_thought', 'tokenizer', 'model', 'faithfulness_check', 'min_steps'}",
            "docstring": "Generate and verify explainable reasoning chains.",
            "complexity_metrics": {
              "method_count": 5,
              "line_count": 157,
              "cyclomatic_complexity": 12,
              "public_methods": 2,
              "private_methods": 3,
              "property_count": 0,
              "inheritance_depth": 0
            }
          },
          "ProceduralAlignment": {
            "name": "ProceduralAlignment",
            "line_start": 380,
            "line_end": 512,
            "bases": [],
            "decorators": [],
            "methods": {
              "__init__": {
                "name": "__init__",
                "line_start": 383,
                "line_end": 390,
                "line_count": 8,
                "parameters": [
                  "self",
                  "config"
                ],
                "decorators": [],
                "docstring": null,
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "get",
                  "self.procedural_config.get",
                  "self.procedural_config.get",
                  "self._load_procedures",
                  "config.get"
                ],
                "complexity": 0,
                "return_count": 0,
                "returns_none": false
              },
              "_load_procedures": {
                "name": "_load_procedures",
                "line_start": 392,
                "line_end": 436,
                "line_count": 45,
                "parameters": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Load domain-specific procedures.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "self.procedural_config.get",
                  "exists",
                  "Path",
                  "open",
                  "yaml.safe_load",
                  "logger.error"
                ],
                "complexity": 2,
                "return_count": 2,
                "returns_none": false
              },
              "check_compliance": {
                "name": "check_compliance",
                "line_start": 438,
                "line_end": 473,
                "line_count": 36,
                "parameters": [
                  "self",
                  "text"
                ],
                "decorators": [],
                "docstring": "Check compliance with domain procedures.\n\nArgs:\n    text: Text to check for compliance\n    \nReturns:\n    Tuple of (is_compliant, compliance_score, missing_procedures)",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "self.procedures.get",
                  "text.lower",
                  "self.procedural_config.get",
                  "self._extract_key_terms",
                  "any",
                  "logger.warning",
                  "logger.debug",
                  "compliant_procedures.append",
                  "missing_procedures.append",
                  "len",
                  "len"
                ],
                "complexity": 4,
                "return_count": 2,
                "returns_none": false
              },
              "_extract_key_terms": {
                "name": "_extract_key_terms",
                "line_start": 475,
                "line_end": 481,
                "line_count": 7,
                "parameters": [
                  "self",
                  "procedure"
                ],
                "decorators": [],
                "docstring": "Extract key terms from procedure for matching.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "split",
                  "procedure.lower",
                  "len"
                ],
                "complexity": 0,
                "return_count": 1,
                "returns_none": false
              },
              "enhance_with_procedures": {
                "name": "enhance_with_procedures",
                "line_start": 483,
                "line_end": 512,
                "line_count": 30,
                "parameters": [
                  "self",
                  "text"
                ],
                "decorators": [],
                "docstring": "Enhance text with required procedures.\n\nArgs:\n    text: Original text\n    \nReturns:\n    Enhanced text with procedures",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "self.check_compliance",
                  "self.procedures.get",
                  "enumerate",
                  "self.procedural_config.get",
                  "self.domain.title"
                ],
                "complexity": 3,
                "return_count": 3,
                "returns_none": false
              }
            },
            "properties": [],
            "class_variables": [],
            "instance_variables": "{'config', 'domain', 'procedural_config', 'procedures', 'compliance_weight'}",
            "docstring": "Ensure alignment with domain-specific procedures.",
            "complexity_metrics": {
              "method_count": 5,
              "line_count": 133,
              "cyclomatic_complexity": 9,
              "public_methods": 2,
              "private_methods": 3,
              "property_count": 0,
              "inheritance_depth": 0
            }
          },
          "VerifiableTraining": {
            "name": "VerifiableTraining",
            "line_start": 515,
            "line_end": 656,
            "bases": [],
            "decorators": [],
            "methods": {
              "__init__": {
                "name": "__init__",
                "line_start": 518,
                "line_end": 522,
                "line_count": 5,
                "parameters": [
                  "self",
                  "config"
                ],
                "decorators": [],
                "docstring": null,
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "get",
                  "Path",
                  "self.audit_log_path.parent.mkdir",
                  "self.verifiable_config.get",
                  "config.get"
                ],
                "complexity": 0,
                "return_count": 0,
                "returns_none": false
              },
              "hash_artifact": {
                "name": "hash_artifact",
                "line_start": 524,
                "line_end": 559,
                "line_count": 36,
                "parameters": [
                  "self",
                  "artifact",
                  "artifact_type"
                ],
                "decorators": [],
                "docstring": "Create cryptographic hash of training artifact.\n\nArgs:\n    artifact: Artifact to hash (model, data, config, etc.)\n    artifact_type: Type of artifact\n    \nReturns:\n    Hash string",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "self.verifiable_config.get",
                  "hexdigest",
                  "artifact.named_parameters",
                  "param_str.encode",
                  "logger.error",
                  "encode",
                  "hashlib.sha256",
                  "encode",
                  "encode",
                  "tobytes",
                  "json.dumps",
                  "json.dumps",
                  "str",
                  "numpy",
                  "param.data.cpu"
                ],
                "complexity": 6,
                "return_count": 3,
                "returns_none": false
              },
              "log_training_event": {
                "name": "log_training_event",
                "line_start": 561,
                "line_end": 589,
                "line_count": 29,
                "parameters": [
                  "self",
                  "event_type",
                  "details"
                ],
                "decorators": [],
                "docstring": "Log training event to audit trail.\n\nArgs:\n    event_type: Type of event\n    details: Event details",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "self.verifiable_config.get",
                  "self.verifiable_config.get",
                  "isoformat",
                  "hexdigest",
                  "open",
                  "f.write",
                  "logger.error",
                  "datetime.now",
                  "hashlib.sha256",
                  "encode",
                  "json.dumps",
                  "json.dumps"
                ],
                "complexity": 3,
                "return_count": 1,
                "returns_none": true
              },
              "create_training_proof": {
                "name": "create_training_proof",
                "line_start": 591,
                "line_end": 620,
                "line_count": 30,
                "parameters": [
                  "self",
                  "model",
                  "train_data",
                  "config"
                ],
                "decorators": [],
                "docstring": "Create comprehensive proof of training.\n\nArgs:\n    model: Trained model\n    train_data: Training data\n    config: Training configuration\n    \nReturns:\n    Dictionary of proof elements",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "json.dumps",
                  "hexdigest",
                  "self.log_training_event",
                  "self.verifiable_config.get",
                  "isoformat",
                  "self.hash_artifact",
                  "self.hash_artifact",
                  "self.hash_artifact",
                  "hashlib.sha256",
                  "datetime.now",
                  "composite.encode"
                ],
                "complexity": 1,
                "return_count": 2,
                "returns_none": false
              },
              "verify_training": {
                "name": "verify_training",
                "line_start": 622,
                "line_end": 656,
                "line_count": 35,
                "parameters": [
                  "self",
                  "model",
                  "proof"
                ],
                "decorators": [],
                "docstring": "Verify training using proof.\n\nArgs:\n    model: Model to verify\n    proof: Training proof\n    \nReturns:\n    True if verification passes",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "self.hash_artifact",
                  "proof.copy",
                  "proof_copy.pop",
                  "json.dumps",
                  "hexdigest",
                  "logger.info",
                  "proof.get",
                  "logger.error",
                  "logger.error",
                  "logger.error",
                  "hashlib.sha256",
                  "composite.encode"
                ],
                "complexity": 3,
                "return_count": 4,
                "returns_none": false
              }
            },
            "properties": [],
            "class_variables": [],
            "instance_variables": "{'audit_log_path', 'config', 'verifiable_config'}",
            "docstring": "Create verifiable audit trail for training process.",
            "complexity_metrics": {
              "method_count": 5,
              "line_count": 142,
              "cyclomatic_complexity": 13,
              "public_methods": 4,
              "private_methods": 1,
              "property_count": 0,
              "inheritance_depth": 0
            }
          },
          "AdvancedHighStakesAuditor": {
            "name": "AdvancedHighStakesAuditor",
            "line_start": 659,
            "line_end": 1233,
            "bases": [],
            "decorators": [],
            "methods": {
              "__init__": {
                "name": "__init__",
                "line_start": 667,
                "line_end": 710,
                "line_count": 44,
                "parameters": [
                  "self",
                  "config",
                  "model",
                  "tokenizer"
                ],
                "decorators": [],
                "docstring": "Initialize advanced high-stakes auditor.\n\nArgs:\n    config: Configuration dictionary\n    model: Optional model for reasoning tasks\n    tokenizer: Optional tokenizer for reasoning tasks",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "BiasAuditor",
                  "VerifiableTraining",
                  "ProceduralAlignment",
                  "ExplainableReasoning",
                  "Path",
                  "audit_metrics_path.parent.mkdir",
                  "MetricsAggregator",
                  "config.get",
                  "get",
                  "get",
                  "logger.info",
                  "get",
                  "ConformalPredictor",
                  "RiskControlledPredictor",
                  "advanced_config.get",
                  "advanced_config.get"
                ],
                "complexity": 4,
                "return_count": 0,
                "returns_none": false
              },
              "conduct_comprehensive_audit": {
                "name": "conduct_comprehensive_audit",
                "line_start": 712,
                "line_end": 786,
                "line_count": 75,
                "parameters": [
                  "self",
                  "predictions",
                  "ground_truth",
                  "texts",
                  "metadata"
                ],
                "decorators": [],
                "docstring": "Conduct comprehensive high-stakes audit with advanced metrics.\n\nArgs:\n    predictions: List of model predictions with confidence scores\n    ground_truth: List of true labels\n    texts: List of input texts\n    metadata: Optional metadata for each prediction\n    \nReturns:\n    Comprehensive audit report",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "self._conduct_bias_audit",
                  "self._conduct_procedural_audit",
                  "self._conduct_risk_assessment_audit",
                  "self._conduct_coverage_calibration_audit",
                  "self._generate_overall_assessment",
                  "self.verifiable_training.log_training_event",
                  "isoformat",
                  "len",
                  "p.get",
                  "p.get",
                  "p.get",
                  "self._conduct_explainability_audit",
                  "self._conduct_advanced_metrics_audit",
                  "self.metrics_aggregator.add_metrics",
                  "len",
                  "datetime.now"
                ],
                "complexity": 3,
                "return_count": 1,
                "returns_none": false
              },
              "_conduct_bias_audit": {
                "name": "_conduct_bias_audit",
                "line_start": 788,
                "line_end": 838,
                "line_count": 51,
                "parameters": [
                  "self",
                  "texts",
                  "predictions"
                ],
                "decorators": [],
                "docstring": "Conduct bias audit with enhanced metrics.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "enumerate",
                  "len",
                  "zip",
                  "isinstance",
                  "self.bias_auditor.detect_bias",
                  "all_bias_scores.append",
                  "set",
                  "pred.get",
                  "torch.tensor",
                  "torch.tensor",
                  "max",
                  "categories.update",
                  "len",
                  "list",
                  "bias_scores.values",
                  "len",
                  "append",
                  "scores.keys",
                  "scores.get",
                  "float",
                  "float",
                  "sum",
                  "values",
                  "pred.get",
                  "np.mean",
                  "np.max"
                ],
                "complexity": 7,
                "return_count": 1,
                "returns_none": false
              },
              "_conduct_procedural_audit": {
                "name": "_conduct_procedural_audit",
                "line_start": 840,
                "line_end": 872,
                "line_count": 33,
                "parameters": [
                  "self",
                  "texts",
                  "predictions"
                ],
                "decorators": [],
                "docstring": "Conduct procedural compliance audit.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "len",
                  "self.procedural_alignment.check_compliance",
                  "append",
                  "float",
                  "float",
                  "np.mean",
                  "np.min",
                  "len"
                ],
                "complexity": 5,
                "return_count": 1,
                "returns_none": false
              },
              "_conduct_explainability_audit": {
                "name": "_conduct_explainability_audit",
                "line_start": 874,
                "line_end": 919,
                "line_count": 46,
                "parameters": [
                  "self",
                  "sample_texts"
                ],
                "decorators": [],
                "docstring": "Conduct explainability audit on sample texts.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "len",
                  "float",
                  "float",
                  "self.explainable_reasoning.generate_reasoning_chain",
                  "min",
                  "append",
                  "self.explainable_reasoning.verify_faithfulness",
                  "append",
                  "np.mean",
                  "np.mean",
                  "len",
                  "logger.warning",
                  "len"
                ],
                "complexity": 4,
                "return_count": 1,
                "returns_none": false
              },
              "_conduct_advanced_metrics_audit": {
                "name": "_conduct_advanced_metrics_audit",
                "line_start": 921,
                "line_end": 1007,
                "line_count": 87,
                "parameters": [
                  "self",
                  "pred_labels",
                  "ground_truth",
                  "confidences",
                  "abstentions"
                ],
                "decorators": [],
                "docstring": "Conduct audit using advanced calibration and conformal metrics.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "np.array",
                  "np.array",
                  "np.array",
                  "np.array",
                  "compute_confidence_metrics",
                  "any",
                  "compute_risk_aware_metrics",
                  "conf_metrics.get",
                  "conf_metrics.get",
                  "np.array",
                  "np.array",
                  "np.array",
                  "compute_abstention_metrics",
                  "risk_metrics.get",
                  "risk_metrics.get",
                  "get",
                  "get",
                  "get",
                  "get",
                  "sum",
                  "logger.error",
                  "str",
                  "enumerate",
                  "len",
                  "len",
                  "float",
                  "float",
                  "float",
                  "self._label_to_index",
                  "self._label_to_index",
                  "abs",
                  "abs_metrics.get",
                  "abs_metrics.get",
                  "abs_metrics.get",
                  "risk_metrics.get",
                  "zip",
                  "compute_ece",
                  "compute_mce",
                  "compute_brier_score",
                  "conf_metrics.get",
                  "self._label_to_index",
                  "self._label_to_index",
                  "abs_metrics.get",
                  "adv_results.get",
                  "adv_results.get",
                  "adv_results.get",
                  "adv_results.get"
                ],
                "complexity": 5,
                "return_count": 3,
                "returns_none": false
              },
              "_conduct_risk_assessment_audit": {
                "name": "_conduct_risk_assessment_audit",
                "line_start": 1009,
                "line_end": 1048,
                "line_count": 40,
                "parameters": [
                  "self",
                  "pred_labels",
                  "ground_truth",
                  "confidences"
                ],
                "decorators": [],
                "docstring": "Conduct comprehensive risk assessment audit.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "set",
                  "enumerate",
                  "len",
                  "zip",
                  "pred_labels.count",
                  "ground_truth.count",
                  "self._calculate_misclassification_risk",
                  "len",
                  "append"
                ],
                "complexity": 4,
                "return_count": 1,
                "returns_none": false
              },
              "_conduct_coverage_calibration_audit": {
                "name": "_conduct_coverage_calibration_audit",
                "line_start": 1050,
                "line_end": 1110,
                "line_count": 61,
                "parameters": [
                  "self",
                  "pred_labels",
                  "ground_truth",
                  "confidences",
                  "abstentions"
                ],
                "decorators": [],
                "docstring": "Conduct coverage and calibration audit for high-stakes applications.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "sum",
                  "len",
                  "np.linspace",
                  "range",
                  "get",
                  "get",
                  "len",
                  "np.mean",
                  "len",
                  "sum",
                  "len",
                  "len",
                  "set",
                  "len",
                  "bin_mask.sum",
                  "float",
                  "np.array",
                  "np.array",
                  "np.mean",
                  "bin_accuracies.append",
                  "bin_confidences.append",
                  "bin_counts.append",
                  "abs",
                  "range",
                  "range",
                  "range",
                  "sum",
                  "len",
                  "len",
                  "zip",
                  "len",
                  "len",
                  "len",
                  "zip"
                ],
                "complexity": 5,
                "return_count": 1,
                "returns_none": false
              },
              "_calculate_misclassification_risk": {
                "name": "_calculate_misclassification_risk",
                "line_start": 1112,
                "line_end": 1134,
                "line_count": 23,
                "parameters": [
                  "self",
                  "predicted",
                  "actual",
                  "confidence"
                ],
                "decorators": [],
                "docstring": "Calculate risk score for a misclassification.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "risk_levels.get",
                  "risk_levels.get",
                  "min"
                ],
                "complexity": 1,
                "return_count": 1,
                "returns_none": false
              },
              "_label_to_index": {
                "name": "_label_to_index",
                "line_start": 1136,
                "line_end": 1145,
                "line_count": 10,
                "parameters": [
                  "self",
                  "label"
                ],
                "decorators": [],
                "docstring": "Convert label to index for metrics calculations.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "label_map.get"
                ],
                "complexity": 0,
                "return_count": 1,
                "returns_none": false
              },
              "_generate_overall_assessment": {
                "name": "_generate_overall_assessment",
                "line_start": 1147,
                "line_end": 1186,
                "line_count": 40,
                "parameters": [
                  "self",
                  "audit_results"
                ],
                "decorators": [],
                "docstring": "Generate overall audit assessment.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "audit_results.get",
                  "component_results.items",
                  "results.get",
                  "audit_passes.append",
                  "float",
                  "sum",
                  "len",
                  "self._generate_recommendations",
                  "sum",
                  "len"
                ],
                "complexity": 4,
                "return_count": 1,
                "returns_none": false
              },
              "_generate_recommendations": {
                "name": "_generate_recommendations",
                "line_start": 1188,
                "line_end": 1233,
                "line_count": 46,
                "parameters": [
                  "self",
                  "component_results",
                  "audit_score"
                ],
                "decorators": [],
                "docstring": "Generate recommendations based on audit results.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "component_results.get",
                  "component_results.get",
                  "component_results.get",
                  "component_results.get",
                  "component_results.get",
                  "component_results.get",
                  "bias_results.get",
                  "recommendations.append",
                  "recommendations.append",
                  "proc_results.get",
                  "recommendations.append",
                  "recommendations.append",
                  "recommendations.append",
                  "recommendations.append",
                  "recommendations.append",
                  "recommendations.append",
                  "risk_results.get",
                  "recommendations.append",
                  "recommendations.append",
                  "cov_results.get",
                  "recommendations.append",
                  "recommendations.append",
                  "recommendations.append",
                  "recommendations.append",
                  "expl_results.get",
                  "adv_results.get"
                ],
                "complexity": 7,
                "return_count": 1,
                "returns_none": false
              }
            },
            "properties": [],
            "class_variables": [],
            "instance_variables": "{'metrics_aggregator', 'config', 'bias_auditor', 'procedural_alignment', 'risk_controlled_predictor', 'conformal_predictor', 'explainable_reasoning', 'tokenizer', 'model', 'verifiable_training'}",
            "docstring": "Comprehensive high-stakes auditing system with advanced metrics integration.\n\nThis class integrates all high-stakes components with advanced metrics to provide\ncomprehensive auditing, monitoring, and quality assurance for critical applications.",
            "complexity_metrics": {
              "method_count": 12,
              "line_count": 575,
              "cyclomatic_complexity": 49,
              "public_methods": 1,
              "private_methods": 11,
              "property_count": 0,
              "inheritance_depth": 0
            }
          }
        },
        "functions": {},
        "dependencies": {
          "internal_calls": {
            "global": [
              "logging.getLogger"
            ],
            "BiasAuditor.__init__": [
              "get",
              "self.bias_config.get",
              "self.bias_config.get",
              "self.bias_config.get",
              "config.get"
            ],
            "BiasAuditor._detect_gender_bias": [
              "sum",
              "sum",
              "sum",
              "item",
              "min",
              "abs",
              "len",
              "predictions.std"
            ],
            "BiasAuditor._detect_race_bias": [
              "sum",
              "min"
            ],
            "BiasAuditor._detect_age_bias": [
              "sum",
              "sum",
              "abs"
            ],
            "BiasAuditor._detect_nationality_bias": [
              "sum",
              "min"
            ],
            "BiasAuditor.compute_bias_mitigation_loss": [
              "self.detect_bias",
              "torch.tensor",
              "self.bias_config.get",
              "torch.tensor",
              "sum",
              "len",
              "bias_scores.values"
            ],
            "ExplainableReasoning.__init__": [
              "get",
              "self.explain_config.get",
              "self.explain_config.get",
              "self.explain_config.get",
              "config.get"
            ],
            "ExplainableReasoning._extract_final_answer": [
              "text.split",
              "re.search",
              "strip",
              "strip",
              "match.group"
            ],
            "ProceduralAlignment.__init__": [
              "get",
              "self.procedural_config.get",
              "self.procedural_config.get",
              "self._load_procedures",
              "config.get"
            ],
            "ProceduralAlignment._load_procedures": [
              "self.procedural_config.get",
              "exists",
              "Path",
              "open",
              "yaml.safe_load",
              "logger.error"
            ],
            "ProceduralAlignment.check_compliance": [
              "self.procedures.get",
              "text.lower",
              "self.procedural_config.get",
              "self._extract_key_terms",
              "any",
              "logger.warning",
              "logger.debug",
              "compliant_procedures.append",
              "missing_procedures.append",
              "len",
              "len"
            ],
            "ProceduralAlignment._extract_key_terms": [
              "split",
              "procedure.lower",
              "len"
            ],
            "ProceduralAlignment.enhance_with_procedures": [
              "self.check_compliance",
              "self.procedures.get",
              "enumerate",
              "self.procedural_config.get",
              "self.domain.title"
            ],
            "VerifiableTraining.__init__": [
              "get",
              "Path",
              "self.audit_log_path.parent.mkdir",
              "self.verifiable_config.get",
              "config.get"
            ],
            "VerifiableTraining.log_training_event": [
              "self.verifiable_config.get",
              "self.verifiable_config.get",
              "isoformat",
              "hexdigest",
              "open",
              "f.write",
              "logger.error",
              "datetime.now",
              "hashlib.sha256",
              "encode",
              "json.dumps",
              "json.dumps"
            ],
            "VerifiableTraining.create_training_proof": [
              "json.dumps",
              "hexdigest",
              "self.log_training_event",
              "self.verifiable_config.get",
              "isoformat",
              "self.hash_artifact",
              "self.hash_artifact",
              "self.hash_artifact",
              "hashlib.sha256",
              "datetime.now",
              "composite.encode"
            ],
            "AdvancedHighStakesAuditor.__init__": [
              "BiasAuditor",
              "VerifiableTraining",
              "ProceduralAlignment",
              "ExplainableReasoning",
              "Path",
              "audit_metrics_path.parent.mkdir",
              "MetricsAggregator",
              "config.get",
              "get",
              "get",
              "logger.info",
              "get",
              "ConformalPredictor",
              "RiskControlledPredictor",
              "advanced_config.get",
              "advanced_config.get"
            ],
            "AdvancedHighStakesAuditor.conduct_comprehensive_audit": [
              "self._conduct_bias_audit",
              "self._conduct_procedural_audit",
              "self._conduct_risk_assessment_audit",
              "self._conduct_coverage_calibration_audit",
              "self._generate_overall_assessment",
              "self.verifiable_training.log_training_event",
              "isoformat",
              "len",
              "p.get",
              "p.get",
              "p.get",
              "self._conduct_explainability_audit",
              "self._conduct_advanced_metrics_audit",
              "self.metrics_aggregator.add_metrics",
              "len",
              "datetime.now"
            ],
            "AdvancedHighStakesAuditor._conduct_bias_audit": [
              "enumerate",
              "len",
              "zip",
              "isinstance",
              "self.bias_auditor.detect_bias",
              "all_bias_scores.append",
              "set",
              "pred.get",
              "torch.tensor",
              "torch.tensor",
              "max",
              "categories.update",
              "len",
              "list",
              "bias_scores.values",
              "len",
              "append",
              "scores.keys",
              "scores.get",
              "float",
              "float",
              "sum",
              "values",
              "pred.get",
              "np.mean",
              "np.max"
            ],
            "AdvancedHighStakesAuditor._conduct_risk_assessment_audit": [
              "set",
              "enumerate",
              "len",
              "zip",
              "pred_labels.count",
              "ground_truth.count",
              "self._calculate_misclassification_risk",
              "len",
              "append"
            ],
            "AdvancedHighStakesAuditor._conduct_coverage_calibration_audit": [
              "sum",
              "len",
              "np.linspace",
              "range",
              "get",
              "get",
              "len",
              "np.mean",
              "len",
              "sum",
              "len",
              "len",
              "set",
              "len",
              "bin_mask.sum",
              "float",
              "np.array",
              "np.array",
              "np.mean",
              "bin_accuracies.append",
              "bin_confidences.append",
              "bin_counts.append",
              "abs",
              "range",
              "range",
              "range",
              "sum",
              "len",
              "len",
              "zip",
              "len",
              "len",
              "len",
              "zip"
            ],
            "AdvancedHighStakesAuditor._calculate_misclassification_risk": [
              "risk_levels.get",
              "risk_levels.get",
              "min"
            ],
            "AdvancedHighStakesAuditor._label_to_index": [
              "label_map.get"
            ],
            "AdvancedHighStakesAuditor._generate_overall_assessment": [
              "audit_results.get",
              "component_results.items",
              "results.get",
              "audit_passes.append",
              "float",
              "sum",
              "len",
              "self._generate_recommendations",
              "sum",
              "len"
            ],
            "AdvancedHighStakesAuditor._generate_recommendations": [
              "component_results.get",
              "component_results.get",
              "component_results.get",
              "component_results.get",
              "component_results.get",
              "component_results.get",
              "bias_results.get",
              "recommendations.append",
              "recommendations.append",
              "proc_results.get",
              "recommendations.append",
              "recommendations.append",
              "recommendations.append",
              "recommendations.append",
              "recommendations.append",
              "recommendations.append",
              "risk_results.get",
              "recommendations.append",
              "recommendations.append",
              "cov_results.get",
              "recommendations.append",
              "recommendations.append",
              "recommendations.append",
              "recommendations.append",
              "expl_results.get",
              "adv_results.get"
            ],
            "BiasAuditor.detect_bias": [
              "text.lower",
              "bias_scores.items",
              "logger.error",
              "self._detect_gender_bias",
              "logger.warning",
              "self.audit_log.append",
              "self._detect_race_bias",
              "self._detect_age_bias",
              "isoformat",
              "self._detect_nationality_bias",
              "datetime.now"
            ],
            "BiasAuditor.generate_audit_report": [
              "isoformat",
              "len",
              "logger.info",
              "open",
              "json.dump",
              "datetime.now",
              "len",
              "np.mean",
              "np.max",
              "len"
            ],
            "ExplainableReasoning.generate_reasoning_chain": [
              "self.tokenizer",
              "self.tokenizer.decode",
              "self._extract_reasoning_steps",
              "self._extract_final_answer",
              "self.explain_config.get",
              "torch.no_grad",
              "self.model.generate",
              "logger.error"
            ],
            "ExplainableReasoning._extract_reasoning_steps": [
              "re.findall",
              "text.split",
              "s.strip",
              "len",
              "match.strip",
              "len",
              "s.strip"
            ],
            "ExplainableReasoning.verify_faithfulness": [
              "join",
              "self.tokenizer",
              "lower",
              "torch.no_grad",
              "self.model.generate",
              "logger.error",
              "self.tokenizer.decode",
              "enumerate"
            ],
            "VerifiableTraining.hash_artifact": [
              "self.verifiable_config.get",
              "hexdigest",
              "artifact.named_parameters",
              "param_str.encode",
              "logger.error",
              "encode",
              "hashlib.sha256",
              "encode",
              "encode",
              "tobytes",
              "json.dumps",
              "json.dumps",
              "str",
              "numpy",
              "param.data.cpu"
            ],
            "VerifiableTraining.verify_training": [
              "self.hash_artifact",
              "proof.copy",
              "proof_copy.pop",
              "json.dumps",
              "hexdigest",
              "logger.info",
              "proof.get",
              "logger.error",
              "logger.error",
              "logger.error",
              "hashlib.sha256",
              "composite.encode"
            ],
            "AdvancedHighStakesAuditor._conduct_procedural_audit": [
              "len",
              "self.procedural_alignment.check_compliance",
              "append",
              "float",
              "float",
              "np.mean",
              "np.min",
              "len"
            ],
            "AdvancedHighStakesAuditor._conduct_explainability_audit": [
              "len",
              "float",
              "float",
              "self.explainable_reasoning.generate_reasoning_chain",
              "min",
              "append",
              "self.explainable_reasoning.verify_faithfulness",
              "append",
              "np.mean",
              "np.mean",
              "len",
              "logger.warning",
              "len"
            ],
            "AdvancedHighStakesAuditor._conduct_advanced_metrics_audit": [
              "np.array",
              "np.array",
              "np.array",
              "np.array",
              "compute_confidence_metrics",
              "any",
              "compute_risk_aware_metrics",
              "conf_metrics.get",
              "conf_metrics.get",
              "np.array",
              "np.array",
              "np.array",
              "compute_abstention_metrics",
              "risk_metrics.get",
              "risk_metrics.get",
              "get",
              "get",
              "get",
              "get",
              "sum",
              "logger.error",
              "str",
              "enumerate",
              "len",
              "len",
              "float",
              "float",
              "float",
              "self._label_to_index",
              "self._label_to_index",
              "abs",
              "abs_metrics.get",
              "abs_metrics.get",
              "abs_metrics.get",
              "risk_metrics.get",
              "zip",
              "compute_ece",
              "compute_mce",
              "compute_brier_score",
              "conf_metrics.get",
              "self._label_to_index",
              "self._label_to_index",
              "abs_metrics.get",
              "adv_results.get",
              "adv_results.get",
              "adv_results.get",
              "adv_results.get"
            ]
          },
          "external_calls": {},
          "attribute_access": {
            "global": [
              "logging.getLogger"
            ],
            "BiasAuditor.compute_bias_mitigation_loss": [
              "torch.Tensor",
              "torch.Tensor",
              "self.detect_bias",
              "self.mitigation_weight",
              "torch.tensor",
              "self.bias_config.get",
              "torch.tensor",
              "self.bias_config",
              "bias_scores.values"
            ],
            "BiasAuditor.__init__": [
              "self.config",
              "self.bias_config",
              "self.audit_categories",
              "self.bias_threshold",
              "self.mitigation_weight",
              "self.bias_patterns",
              "self.audit_log",
              "get",
              "self.bias_config.get",
              "self.bias_config.get",
              "self.bias_config.get",
              "self.bias_config",
              "self.bias_config",
              "self.bias_config",
              "config.get"
            ],
            "BiasAuditor.generate_audit_report": [
              "self.audit_categories",
              "isoformat",
              "self.audit_log",
              "logger.info",
              "self.audit_log",
              "json.dump",
              "datetime.now",
              "np.mean",
              "np.max",
              "self.bias_threshold"
            ],
            "ExplainableReasoning.__init__": [
              "self.model",
              "self.tokenizer",
              "self.config",
              "self.explain_config",
              "self.chain_of_thought",
              "self.min_steps",
              "self.faithfulness_check",
              "get",
              "self.explain_config.get",
              "self.explain_config.get",
              "self.explain_config.get",
              "self.explain_config",
              "self.explain_config",
              "self.explain_config",
              "config.get"
            ],
            "ProceduralAlignment.__init__": [
              "self.config",
              "self.procedural_config",
              "self.domain",
              "self.compliance_weight",
              "self.procedures",
              "get",
              "self.procedural_config.get",
              "self.procedural_config.get",
              "self._load_procedures",
              "self.procedural_config",
              "self.procedural_config",
              "config.get"
            ],
            "VerifiableTraining.__init__": [
              "self.config",
              "self.verifiable_config",
              "self.audit_log_path",
              "get",
              "self.audit_log_path.parent.mkdir",
              "self.verifiable_config.get",
              "self.audit_log_path.parent",
              "config.get",
              "self.verifiable_config",
              "self.audit_log_path"
            ],
            "AdvancedHighStakesAuditor.__init__": [
              "self.config",
              "self.model",
              "self.tokenizer",
              "self.bias_auditor",
              "self.verifiable_training",
              "self.procedural_alignment",
              "self.metrics_aggregator",
              "self.conformal_predictor",
              "self.risk_controlled_predictor",
              "self.explainable_reasoning",
              "self.explainable_reasoning",
              "self.metrics_aggregator",
              "audit_metrics_path.parent.mkdir",
              "config.get",
              "get",
              "self.conformal_predictor",
              "get",
              "self.risk_controlled_predictor",
              "logger.info",
              "audit_metrics_path.parent",
              "get",
              "advanced_config.get",
              "advanced_config.get"
            ],
            "AdvancedHighStakesAuditor.conduct_comprehensive_audit": [
              "self.explainable_reasoning",
              "self.metrics_aggregator",
              "self._conduct_bias_audit",
              "self._conduct_procedural_audit",
              "self._conduct_risk_assessment_audit",
              "self._conduct_coverage_calibration_audit",
              "self._generate_overall_assessment",
              "self.verifiable_training.log_training_event",
              "isoformat",
              "p.get",
              "p.get",
              "p.get",
              "self._conduct_explainability_audit",
              "self._conduct_advanced_metrics_audit",
              "self.verifiable_training",
              "self.metrics_aggregator.add_metrics",
              "self.metrics_aggregator",
              "datetime.now"
            ],
            "BiasAuditor.detect_bias": [
              "torch.Tensor",
              "self.audit_categories",
              "text.lower",
              "bias_scores.items",
              "self.bias_threshold",
              "logger.error",
              "self._detect_gender_bias",
              "logger.warning",
              "self.audit_log.append",
              "self.audit_categories",
              "self._detect_race_bias",
              "self.audit_log",
              "self._detect_age_bias",
              "isoformat",
              "self._detect_nationality_bias",
              "datetime.now"
            ],
            "BiasAuditor._detect_gender_bias": [
              "torch.Tensor",
              "self.bias_patterns",
              "item",
              "predictions.shape",
              "predictions.std"
            ],
            "BiasAuditor._detect_race_bias": [
              "torch.Tensor",
              "self.bias_patterns"
            ],
            "BiasAuditor._detect_age_bias": [
              "torch.Tensor",
              "self.bias_patterns"
            ],
            "BiasAuditor._detect_nationality_bias": [
              "torch.Tensor",
              "self.bias_patterns"
            ],
            "ExplainableReasoning._extract_final_answer": [
              "text.split",
              "re.search",
              "strip",
              "re.IGNORECASE",
              "re.DOTALL",
              "strip",
              "match.group"
            ],
            "ProceduralAlignment._load_procedures": [
              "self.procedural_config.get",
              "self.procedural_config",
              "exists",
              "yaml.safe_load",
              "logger.error"
            ],
            "ProceduralAlignment.check_compliance": [
              "self.procedures.get",
              "self.domain",
              "text.lower",
              "self.procedural_config.get",
              "self.procedures",
              "self.procedures",
              "self._extract_key_terms",
              "logger.warning",
              "logger.debug",
              "self.procedural_config",
              "compliant_procedures.append",
              "missing_procedures.append"
            ],
            "ProceduralAlignment._extract_key_terms": [
              "split",
              "procedure.lower"
            ],
            "ProceduralAlignment.enhance_with_procedures": [
              "self.check_compliance",
              "self.procedures.get",
              "self.domain",
              "self.procedural_config.get",
              "self.procedures",
              "self.procedures",
              "self.procedural_config",
              "self.domain.title",
              "self.domain"
            ],
            "VerifiableTraining.log_training_event": [
              "self.verifiable_config.get",
              "self.verifiable_config.get",
              "isoformat",
              "self.verifiable_config",
              "hexdigest",
              "self.verifiable_config",
              "self.audit_log_path",
              "f.write",
              "logger.error",
              "datetime.now",
              "hashlib.sha256",
              "encode",
              "json.dumps",
              "json.dumps"
            ],
            "VerifiableTraining.create_training_proof": [
              "json.dumps",
              "hexdigest",
              "self.log_training_event",
              "self.verifiable_config.get",
              "isoformat",
              "self.hash_artifact",
              "self.hash_artifact",
              "self.hash_artifact",
              "self.verifiable_config",
              "hashlib.sha256",
              "datetime.now",
              "composite.encode"
            ],
            "AdvancedHighStakesAuditor._calculate_misclassification_risk": [
              "risk_levels.get",
              "risk_levels.get"
            ],
            "AdvancedHighStakesAuditor._label_to_index": [
              "label_map.get"
            ],
            "AdvancedHighStakesAuditor._generate_overall_assessment": [
              "audit_results.get",
              "component_results.items",
              "results.get",
              "audit_passes.append",
              "self._generate_recommendations"
            ],
            "AdvancedHighStakesAuditor._generate_recommendations": [
              "component_results.get",
              "component_results.get",
              "component_results.get",
              "component_results.get",
              "component_results.get",
              "component_results.get",
              "bias_results.get",
              "recommendations.append",
              "recommendations.append",
              "proc_results.get",
              "recommendations.append",
              "recommendations.append",
              "recommendations.append",
              "recommendations.append",
              "recommendations.append",
              "recommendations.append",
              "risk_results.get",
              "recommendations.append",
              "recommendations.append",
              "cov_results.get",
              "recommendations.append",
              "recommendations.append",
              "recommendations.append",
              "recommendations.append",
              "expl_results.get",
              "adv_results.get"
            ],
            "ExplainableReasoning.generate_reasoning_chain": [
              "self.tokenizer",
              "self.tokenizer.decode",
              "self._extract_reasoning_steps",
              "self._extract_final_answer",
              "self.explain_config.get",
              "torch.no_grad",
              "self.model.generate",
              "self.tokenizer",
              "logger.error",
              "self.explain_config",
              "self.model"
            ],
            "ExplainableReasoning._extract_reasoning_steps": [
              "re.findall",
              "text.split",
              "self.min_steps",
              "re.DOTALL",
              "re.IGNORECASE",
              "s.strip",
              "self.min_steps",
              "match.strip",
              "s.strip"
            ],
            "ExplainableReasoning.verify_faithfulness": [
              "self.faithfulness_check",
              "join",
              "self.tokenizer",
              "lower",
              "torch.no_grad",
              "self.model.generate",
              "logger.error",
              "self.model",
              "self.tokenizer.decode",
              "self.tokenizer"
            ],
            "VerifiableTraining.hash_artifact": [
              "self.verifiable_config.get",
              "hexdigest",
              "self.verifiable_config",
              "artifact.named_parameters",
              "param_str.encode",
              "logger.error",
              "encode",
              "hashlib.sha256",
              "encode",
              "encode",
              "tobytes",
              "json.dumps",
              "json.dumps",
              "numpy",
              "param.data.cpu",
              "param.data"
            ],
            "VerifiableTraining.verify_training": [
              "self.hash_artifact",
              "proof.copy",
              "proof_copy.pop",
              "json.dumps",
              "hexdigest",
              "logger.info",
              "proof.get",
              "logger.error",
              "logger.error",
              "logger.error",
              "hashlib.sha256",
              "composite.encode"
            ],
            "AdvancedHighStakesAuditor._conduct_bias_audit": [
              "self.bias_auditor.detect_bias",
              "all_bias_scores.append",
              "self.bias_auditor.bias_threshold",
              "pred.get",
              "torch.tensor",
              "torch.tensor",
              "self.bias_auditor",
              "self.bias_auditor",
              "categories.update",
              "bias_scores.values",
              "append",
              "scores.keys",
              "scores.get",
              "values",
              "pred.get",
              "np.mean",
              "np.max",
              "self.bias_auditor.bias_threshold",
              "self.bias_auditor"
            ],
            "AdvancedHighStakesAuditor._conduct_procedural_audit": [
              "self.procedural_alignment.check_compliance",
              "append",
              "self.procedural_alignment",
              "np.mean",
              "np.min"
            ],
            "AdvancedHighStakesAuditor._conduct_advanced_metrics_audit": [
              "np.array",
              "np.array",
              "np.array",
              "np.array",
              "conf_metrics.get",
              "conf_metrics.get",
              "np.array",
              "np.array",
              "np.array",
              "risk_metrics.get",
              "risk_metrics.get",
              "get",
              "get",
              "get",
              "get",
              "logger.error",
              "self._label_to_index",
              "self._label_to_index",
              "abs_metrics.get",
              "abs_metrics.get",
              "abs_metrics.get",
              "risk_metrics.get",
              "conf_metrics.get",
              "self._label_to_index",
              "self._label_to_index",
              "abs_metrics.get",
              "adv_results.get",
              "adv_results.get",
              "adv_results.get",
              "adv_results.get"
            ],
            "AdvancedHighStakesAuditor._conduct_coverage_calibration_audit": [
              "np.linspace",
              "get",
              "get",
              "np.mean",
              "bin_mask.sum",
              "np.array",
              "np.array",
              "np.mean",
              "bin_accuracies.append",
              "bin_confidences.append",
              "bin_counts.append"
            ],
            "AdvancedHighStakesAuditor._conduct_explainability_audit": [
              "self.explainable_reasoning.generate_reasoning_chain",
              "append",
              "self.explainable_reasoning.verify_faithfulness",
              "append",
              "np.mean",
              "np.mean",
              "self.explainable_reasoning",
              "self.explainable_reasoning",
              "logger.warning"
            ],
            "AdvancedHighStakesAuditor._conduct_risk_assessment_audit": [
              "pred_labels.count",
              "ground_truth.count",
              "self._calculate_misclassification_risk",
              "append"
            ]
          },
          "inheritance_chain": {},
          "composition_relationships": {}
        },
        "call_graph": {
          "BiasAuditor.__init__": {
            "type": "method",
            "calls": [
              "get",
              "self.bias_config.get",
              "self.bias_config.get",
              "self.bias_config.get",
              "config.get"
            ],
            "called_by": [],
            "complexity": 0,
            "line_count": 27
          },
          "BiasAuditor.detect_bias": {
            "type": "method",
            "calls": [
              "text.lower",
              "bias_scores.items",
              "logger.error",
              "self._detect_gender_bias",
              "logger.warning",
              "self.audit_log.append",
              "self._detect_race_bias",
              "self._detect_age_bias",
              "isoformat",
              "self._detect_nationality_bias",
              "datetime.now"
            ],
            "called_by": [],
            "complexity": 8,
            "line_count": 44
          },
          "BiasAuditor._detect_gender_bias": {
            "type": "method",
            "calls": [
              "sum",
              "sum",
              "sum",
              "item",
              "min",
              "abs",
              "len",
              "predictions.std"
            ],
            "called_by": [],
            "complexity": 3,
            "line_count": 26
          },
          "BiasAuditor._detect_race_bias": {
            "type": "method",
            "calls": [
              "sum",
              "min"
            ],
            "called_by": [],
            "complexity": 0,
            "line_count": 10
          },
          "BiasAuditor._detect_age_bias": {
            "type": "method",
            "calls": [
              "sum",
              "sum",
              "abs"
            ],
            "called_by": [],
            "complexity": 1,
            "line_count": 14
          },
          "BiasAuditor._detect_nationality_bias": {
            "type": "method",
            "calls": [
              "sum",
              "min"
            ],
            "called_by": [],
            "complexity": 0,
            "line_count": 10
          },
          "BiasAuditor.compute_bias_mitigation_loss": {
            "type": "method",
            "calls": [
              "self.detect_bias",
              "torch.tensor",
              "self.bias_config.get",
              "torch.tensor",
              "sum",
              "len",
              "bias_scores.values"
            ],
            "called_by": [],
            "complexity": 1,
            "line_count": 23
          },
          "BiasAuditor.generate_audit_report": {
            "type": "method",
            "calls": [
              "isoformat",
              "len",
              "logger.info",
              "open",
              "json.dump",
              "datetime.now",
              "len",
              "np.mean",
              "np.max",
              "len"
            ],
            "called_by": [],
            "complexity": 3,
            "line_count": 26
          },
          "ExplainableReasoning.__init__": {
            "type": "method",
            "calls": [
              "get",
              "self.explain_config.get",
              "self.explain_config.get",
              "self.explain_config.get",
              "config.get"
            ],
            "called_by": [],
            "complexity": 0,
            "line_count": 8
          },
          "ExplainableReasoning.generate_reasoning_chain": {
            "type": "method",
            "calls": [
              "self.tokenizer",
              "self.tokenizer.decode",
              "self._extract_reasoning_steps",
              "self._extract_final_answer",
              "self.explain_config.get",
              "torch.no_grad",
              "self.model.generate",
              "logger.error"
            ],
            "called_by": [],
            "complexity": 2,
            "line_count": 45
          },
          "ExplainableReasoning._extract_reasoning_steps": {
            "type": "method",
            "calls": [
              "re.findall",
              "text.split",
              "s.strip",
              "len",
              "match.strip",
              "len",
              "s.strip"
            ],
            "called_by": [],
            "complexity": 3,
            "line_count": 22
          },
          "ExplainableReasoning._extract_final_answer": {
            "type": "method",
            "calls": [
              "text.split",
              "re.search",
              "strip",
              "strip",
              "match.group"
            ],
            "called_by": [],
            "complexity": 3,
            "line_count": 22
          },
          "ExplainableReasoning.verify_faithfulness": {
            "type": "method",
            "calls": [
              "join",
              "self.tokenizer",
              "lower",
              "torch.no_grad",
              "self.model.generate",
              "logger.error",
              "self.tokenizer.decode",
              "enumerate"
            ],
            "called_by": [],
            "complexity": 4,
            "line_count": 53
          },
          "ProceduralAlignment.__init__": {
            "type": "method",
            "calls": [
              "get",
              "self.procedural_config.get",
              "self.procedural_config.get",
              "self._load_procedures",
              "config.get"
            ],
            "called_by": [],
            "complexity": 0,
            "line_count": 8
          },
          "ProceduralAlignment._load_procedures": {
            "type": "method",
            "calls": [
              "self.procedural_config.get",
              "exists",
              "Path",
              "open",
              "yaml.safe_load",
              "logger.error"
            ],
            "called_by": [],
            "complexity": 2,
            "line_count": 45
          },
          "ProceduralAlignment.check_compliance": {
            "type": "method",
            "calls": [
              "self.procedures.get",
              "text.lower",
              "self.procedural_config.get",
              "self._extract_key_terms",
              "any",
              "logger.warning",
              "logger.debug",
              "compliant_procedures.append",
              "missing_procedures.append",
              "len",
              "len"
            ],
            "called_by": [],
            "complexity": 4,
            "line_count": 36
          },
          "ProceduralAlignment._extract_key_terms": {
            "type": "method",
            "calls": [
              "split",
              "procedure.lower",
              "len"
            ],
            "called_by": [],
            "complexity": 0,
            "line_count": 7
          },
          "ProceduralAlignment.enhance_with_procedures": {
            "type": "method",
            "calls": [
              "self.check_compliance",
              "self.procedures.get",
              "enumerate",
              "self.procedural_config.get",
              "self.domain.title"
            ],
            "called_by": [],
            "complexity": 3,
            "line_count": 30
          },
          "VerifiableTraining.__init__": {
            "type": "method",
            "calls": [
              "get",
              "Path",
              "self.audit_log_path.parent.mkdir",
              "self.verifiable_config.get",
              "config.get"
            ],
            "called_by": [],
            "complexity": 0,
            "line_count": 5
          },
          "VerifiableTraining.hash_artifact": {
            "type": "method",
            "calls": [
              "self.verifiable_config.get",
              "hexdigest",
              "artifact.named_parameters",
              "param_str.encode",
              "logger.error",
              "encode",
              "hashlib.sha256",
              "encode",
              "encode",
              "tobytes",
              "json.dumps",
              "json.dumps",
              "str",
              "numpy",
              "param.data.cpu"
            ],
            "called_by": [],
            "complexity": 6,
            "line_count": 36
          },
          "VerifiableTraining.log_training_event": {
            "type": "method",
            "calls": [
              "self.verifiable_config.get",
              "self.verifiable_config.get",
              "isoformat",
              "hexdigest",
              "open",
              "f.write",
              "logger.error",
              "datetime.now",
              "hashlib.sha256",
              "encode",
              "json.dumps",
              "json.dumps"
            ],
            "called_by": [],
            "complexity": 3,
            "line_count": 29
          },
          "VerifiableTraining.create_training_proof": {
            "type": "method",
            "calls": [
              "json.dumps",
              "hexdigest",
              "self.log_training_event",
              "self.verifiable_config.get",
              "isoformat",
              "self.hash_artifact",
              "self.hash_artifact",
              "self.hash_artifact",
              "hashlib.sha256",
              "datetime.now",
              "composite.encode"
            ],
            "called_by": [],
            "complexity": 1,
            "line_count": 30
          },
          "VerifiableTraining.verify_training": {
            "type": "method",
            "calls": [
              "self.hash_artifact",
              "proof.copy",
              "proof_copy.pop",
              "json.dumps",
              "hexdigest",
              "logger.info",
              "proof.get",
              "logger.error",
              "logger.error",
              "logger.error",
              "hashlib.sha256",
              "composite.encode"
            ],
            "called_by": [],
            "complexity": 3,
            "line_count": 35
          },
          "AdvancedHighStakesAuditor.__init__": {
            "type": "method",
            "calls": [
              "BiasAuditor",
              "VerifiableTraining",
              "ProceduralAlignment",
              "ExplainableReasoning",
              "Path",
              "audit_metrics_path.parent.mkdir",
              "MetricsAggregator",
              "config.get",
              "get",
              "get",
              "logger.info",
              "get",
              "ConformalPredictor",
              "RiskControlledPredictor",
              "advanced_config.get",
              "advanced_config.get"
            ],
            "called_by": [],
            "complexity": 4,
            "line_count": 44
          },
          "AdvancedHighStakesAuditor.conduct_comprehensive_audit": {
            "type": "method",
            "calls": [
              "self._conduct_bias_audit",
              "self._conduct_procedural_audit",
              "self._conduct_risk_assessment_audit",
              "self._conduct_coverage_calibration_audit",
              "self._generate_overall_assessment",
              "self.verifiable_training.log_training_event",
              "isoformat",
              "len",
              "p.get",
              "p.get",
              "p.get",
              "self._conduct_explainability_audit",
              "self._conduct_advanced_metrics_audit",
              "self.metrics_aggregator.add_metrics",
              "len",
              "datetime.now"
            ],
            "called_by": [],
            "complexity": 3,
            "line_count": 75
          },
          "AdvancedHighStakesAuditor._conduct_bias_audit": {
            "type": "method",
            "calls": [
              "enumerate",
              "len",
              "zip",
              "isinstance",
              "self.bias_auditor.detect_bias",
              "all_bias_scores.append",
              "set",
              "pred.get",
              "torch.tensor",
              "torch.tensor",
              "max",
              "categories.update",
              "len",
              "list",
              "bias_scores.values",
              "len",
              "append",
              "scores.keys",
              "scores.get",
              "float",
              "float",
              "sum",
              "values",
              "pred.get",
              "np.mean",
              "np.max"
            ],
            "called_by": [],
            "complexity": 7,
            "line_count": 51
          },
          "AdvancedHighStakesAuditor._conduct_procedural_audit": {
            "type": "method",
            "calls": [
              "len",
              "self.procedural_alignment.check_compliance",
              "append",
              "float",
              "float",
              "np.mean",
              "np.min",
              "len"
            ],
            "called_by": [],
            "complexity": 5,
            "line_count": 33
          },
          "AdvancedHighStakesAuditor._conduct_explainability_audit": {
            "type": "method",
            "calls": [
              "len",
              "float",
              "float",
              "self.explainable_reasoning.generate_reasoning_chain",
              "min",
              "append",
              "self.explainable_reasoning.verify_faithfulness",
              "append",
              "np.mean",
              "np.mean",
              "len",
              "logger.warning",
              "len"
            ],
            "called_by": [],
            "complexity": 4,
            "line_count": 46
          },
          "AdvancedHighStakesAuditor._conduct_advanced_metrics_audit": {
            "type": "method",
            "calls": [
              "np.array",
              "np.array",
              "np.array",
              "np.array",
              "compute_confidence_metrics",
              "any",
              "compute_risk_aware_metrics",
              "conf_metrics.get",
              "conf_metrics.get",
              "np.array",
              "np.array",
              "np.array",
              "compute_abstention_metrics",
              "risk_metrics.get",
              "risk_metrics.get",
              "get",
              "get",
              "get",
              "get",
              "sum",
              "logger.error",
              "str",
              "enumerate",
              "len",
              "len",
              "float",
              "float",
              "float",
              "self._label_to_index",
              "self._label_to_index",
              "abs",
              "abs_metrics.get",
              "abs_metrics.get",
              "abs_metrics.get",
              "risk_metrics.get",
              "zip",
              "compute_ece",
              "compute_mce",
              "compute_brier_score",
              "conf_metrics.get",
              "self._label_to_index",
              "self._label_to_index",
              "abs_metrics.get",
              "adv_results.get",
              "adv_results.get",
              "adv_results.get",
              "adv_results.get"
            ],
            "called_by": [],
            "complexity": 5,
            "line_count": 87
          },
          "AdvancedHighStakesAuditor._conduct_risk_assessment_audit": {
            "type": "method",
            "calls": [
              "set",
              "enumerate",
              "len",
              "zip",
              "pred_labels.count",
              "ground_truth.count",
              "self._calculate_misclassification_risk",
              "len",
              "append"
            ],
            "called_by": [],
            "complexity": 4,
            "line_count": 40
          },
          "AdvancedHighStakesAuditor._conduct_coverage_calibration_audit": {
            "type": "method",
            "calls": [
              "sum",
              "len",
              "np.linspace",
              "range",
              "get",
              "get",
              "len",
              "np.mean",
              "len",
              "sum",
              "len",
              "len",
              "set",
              "len",
              "bin_mask.sum",
              "float",
              "np.array",
              "np.array",
              "np.mean",
              "bin_accuracies.append",
              "bin_confidences.append",
              "bin_counts.append",
              "abs",
              "range",
              "range",
              "range",
              "sum",
              "len",
              "len",
              "zip",
              "len",
              "len",
              "len",
              "zip"
            ],
            "called_by": [],
            "complexity": 5,
            "line_count": 61
          },
          "AdvancedHighStakesAuditor._calculate_misclassification_risk": {
            "type": "method",
            "calls": [
              "risk_levels.get",
              "risk_levels.get",
              "min"
            ],
            "called_by": [],
            "complexity": 1,
            "line_count": 23
          },
          "AdvancedHighStakesAuditor._label_to_index": {
            "type": "method",
            "calls": [
              "label_map.get"
            ],
            "called_by": [],
            "complexity": 0,
            "line_count": 10
          },
          "AdvancedHighStakesAuditor._generate_overall_assessment": {
            "type": "method",
            "calls": [
              "audit_results.get",
              "component_results.items",
              "results.get",
              "audit_passes.append",
              "float",
              "sum",
              "len",
              "self._generate_recommendations",
              "sum",
              "len"
            ],
            "called_by": [],
            "complexity": 4,
            "line_count": 40
          },
          "AdvancedHighStakesAuditor._generate_recommendations": {
            "type": "method",
            "calls": [
              "component_results.get",
              "component_results.get",
              "component_results.get",
              "component_results.get",
              "component_results.get",
              "component_results.get",
              "bias_results.get",
              "recommendations.append",
              "recommendations.append",
              "proc_results.get",
              "recommendations.append",
              "recommendations.append",
              "recommendations.append",
              "recommendations.append",
              "recommendations.append",
              "recommendations.append",
              "risk_results.get",
              "recommendations.append",
              "recommendations.append",
              "cov_results.get",
              "recommendations.append",
              "recommendations.append",
              "recommendations.append",
              "recommendations.append",
              "expl_results.get",
              "adv_results.get"
            ],
            "called_by": [],
            "complexity": 7,
            "line_count": 46
          }
        },
        "data_flow": {
          "global_variables": [
            "logger"
          ],
          "shared_state": {},
          "parameter_flow": {
            "BiasAuditor.__init__": {
              "parameters": [
                "self",
                "config"
              ],
              "parameter_count": 2,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "BiasAuditor.detect_bias": {
              "parameters": [
                "self",
                "text",
                "predictions"
              ],
              "parameter_count": 3,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "BiasAuditor._detect_gender_bias": {
              "parameters": [
                "self",
                "text",
                "predictions"
              ],
              "parameter_count": 3,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "BiasAuditor._detect_race_bias": {
              "parameters": [
                "self",
                "text",
                "predictions"
              ],
              "parameter_count": 3,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "BiasAuditor._detect_age_bias": {
              "parameters": [
                "self",
                "text",
                "predictions"
              ],
              "parameter_count": 3,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "BiasAuditor._detect_nationality_bias": {
              "parameters": [
                "self",
                "text",
                "predictions"
              ],
              "parameter_count": 3,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "BiasAuditor.compute_bias_mitigation_loss": {
              "parameters": [
                "self",
                "text",
                "predictions"
              ],
              "parameter_count": 3,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "BiasAuditor.generate_audit_report": {
              "parameters": [
                "self",
                "save_path"
              ],
              "parameter_count": 2,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "ExplainableReasoning.__init__": {
              "parameters": [
                "self",
                "model",
                "tokenizer",
                "config"
              ],
              "parameter_count": 4,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "ExplainableReasoning.generate_reasoning_chain": {
              "parameters": [
                "self",
                "input_text"
              ],
              "parameter_count": 2,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "ExplainableReasoning._extract_reasoning_steps": {
              "parameters": [
                "self",
                "text"
              ],
              "parameter_count": 2,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "ExplainableReasoning._extract_final_answer": {
              "parameters": [
                "self",
                "text"
              ],
              "parameter_count": 2,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "ExplainableReasoning.verify_faithfulness": {
              "parameters": [
                "self",
                "reasoning_steps",
                "final_answer"
              ],
              "parameter_count": 3,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "ProceduralAlignment.__init__": {
              "parameters": [
                "self",
                "config"
              ],
              "parameter_count": 2,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "ProceduralAlignment._load_procedures": {
              "parameters": [
                "self"
              ],
              "parameter_count": 1,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "ProceduralAlignment.check_compliance": {
              "parameters": [
                "self",
                "text"
              ],
              "parameter_count": 2,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "ProceduralAlignment._extract_key_terms": {
              "parameters": [
                "self",
                "procedure"
              ],
              "parameter_count": 2,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "ProceduralAlignment.enhance_with_procedures": {
              "parameters": [
                "self",
                "text"
              ],
              "parameter_count": 2,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "VerifiableTraining.__init__": {
              "parameters": [
                "self",
                "config"
              ],
              "parameter_count": 2,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "VerifiableTraining.hash_artifact": {
              "parameters": [
                "self",
                "artifact",
                "artifact_type"
              ],
              "parameter_count": 3,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "VerifiableTraining.log_training_event": {
              "parameters": [
                "self",
                "event_type",
                "details"
              ],
              "parameter_count": 3,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "VerifiableTraining.create_training_proof": {
              "parameters": [
                "self",
                "model",
                "train_data",
                "config"
              ],
              "parameter_count": 4,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "VerifiableTraining.verify_training": {
              "parameters": [
                "self",
                "model",
                "proof"
              ],
              "parameter_count": 3,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "AdvancedHighStakesAuditor.__init__": {
              "parameters": [
                "self",
                "config",
                "model",
                "tokenizer"
              ],
              "parameter_count": 4,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "AdvancedHighStakesAuditor.conduct_comprehensive_audit": {
              "parameters": [
                "self",
                "predictions",
                "ground_truth",
                "texts",
                "metadata"
              ],
              "parameter_count": 5,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "AdvancedHighStakesAuditor._conduct_bias_audit": {
              "parameters": [
                "self",
                "texts",
                "predictions"
              ],
              "parameter_count": 3,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "AdvancedHighStakesAuditor._conduct_procedural_audit": {
              "parameters": [
                "self",
                "texts",
                "predictions"
              ],
              "parameter_count": 3,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "AdvancedHighStakesAuditor._conduct_explainability_audit": {
              "parameters": [
                "self",
                "sample_texts"
              ],
              "parameter_count": 2,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "AdvancedHighStakesAuditor._conduct_advanced_metrics_audit": {
              "parameters": [
                "self",
                "pred_labels",
                "ground_truth",
                "confidences",
                "abstentions"
              ],
              "parameter_count": 5,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "AdvancedHighStakesAuditor._conduct_risk_assessment_audit": {
              "parameters": [
                "self",
                "pred_labels",
                "ground_truth",
                "confidences"
              ],
              "parameter_count": 4,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "AdvancedHighStakesAuditor._conduct_coverage_calibration_audit": {
              "parameters": [
                "self",
                "pred_labels",
                "ground_truth",
                "confidences",
                "abstentions"
              ],
              "parameter_count": 5,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "AdvancedHighStakesAuditor._calculate_misclassification_risk": {
              "parameters": [
                "self",
                "predicted",
                "actual",
                "confidence"
              ],
              "parameter_count": 4,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "AdvancedHighStakesAuditor._label_to_index": {
              "parameters": [
                "self",
                "label"
              ],
              "parameter_count": 2,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "AdvancedHighStakesAuditor._generate_overall_assessment": {
              "parameters": [
                "self",
                "audit_results"
              ],
              "parameter_count": 2,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "AdvancedHighStakesAuditor._generate_recommendations": {
              "parameters": [
                "self",
                "component_results",
                "audit_score"
              ],
              "parameter_count": 3,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            }
          },
          "return_patterns": {
            "BiasAuditor.__init__": {
              "return_statements": 0,
              "returns_none": false,
              "return_complexity": "single"
            },
            "BiasAuditor.detect_bias": {
              "return_statements": 2,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "BiasAuditor._detect_gender_bias": {
              "return_statements": 2,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "BiasAuditor._detect_race_bias": {
              "return_statements": 1,
              "returns_none": false,
              "return_complexity": "single"
            },
            "BiasAuditor._detect_age_bias": {
              "return_statements": 2,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "BiasAuditor._detect_nationality_bias": {
              "return_statements": 1,
              "returns_none": false,
              "return_complexity": "single"
            },
            "BiasAuditor.compute_bias_mitigation_loss": {
              "return_statements": 2,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "BiasAuditor.generate_audit_report": {
              "return_statements": 1,
              "returns_none": false,
              "return_complexity": "single"
            },
            "ExplainableReasoning.__init__": {
              "return_statements": 0,
              "returns_none": false,
              "return_complexity": "single"
            },
            "ExplainableReasoning.generate_reasoning_chain": {
              "return_statements": 3,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "ExplainableReasoning._extract_reasoning_steps": {
              "return_statements": 1,
              "returns_none": false,
              "return_complexity": "single"
            },
            "ExplainableReasoning._extract_final_answer": {
              "return_statements": 3,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "ExplainableReasoning.verify_faithfulness": {
              "return_statements": 3,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "ProceduralAlignment.__init__": {
              "return_statements": 0,
              "returns_none": false,
              "return_complexity": "single"
            },
            "ProceduralAlignment._load_procedures": {
              "return_statements": 2,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "ProceduralAlignment.check_compliance": {
              "return_statements": 2,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "ProceduralAlignment._extract_key_terms": {
              "return_statements": 1,
              "returns_none": false,
              "return_complexity": "single"
            },
            "ProceduralAlignment.enhance_with_procedures": {
              "return_statements": 3,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "VerifiableTraining.__init__": {
              "return_statements": 0,
              "returns_none": false,
              "return_complexity": "single"
            },
            "VerifiableTraining.hash_artifact": {
              "return_statements": 3,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "VerifiableTraining.log_training_event": {
              "return_statements": 1,
              "returns_none": true,
              "return_complexity": "single"
            },
            "VerifiableTraining.create_training_proof": {
              "return_statements": 2,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "VerifiableTraining.verify_training": {
              "return_statements": 4,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "AdvancedHighStakesAuditor.__init__": {
              "return_statements": 0,
              "returns_none": false,
              "return_complexity": "single"
            },
            "AdvancedHighStakesAuditor.conduct_comprehensive_audit": {
              "return_statements": 1,
              "returns_none": false,
              "return_complexity": "single"
            },
            "AdvancedHighStakesAuditor._conduct_bias_audit": {
              "return_statements": 1,
              "returns_none": false,
              "return_complexity": "single"
            },
            "AdvancedHighStakesAuditor._conduct_procedural_audit": {
              "return_statements": 1,
              "returns_none": false,
              "return_complexity": "single"
            },
            "AdvancedHighStakesAuditor._conduct_explainability_audit": {
              "return_statements": 1,
              "returns_none": false,
              "return_complexity": "single"
            },
            "AdvancedHighStakesAuditor._conduct_advanced_metrics_audit": {
              "return_statements": 3,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "AdvancedHighStakesAuditor._conduct_risk_assessment_audit": {
              "return_statements": 1,
              "returns_none": false,
              "return_complexity": "single"
            },
            "AdvancedHighStakesAuditor._conduct_coverage_calibration_audit": {
              "return_statements": 1,
              "returns_none": false,
              "return_complexity": "single"
            },
            "AdvancedHighStakesAuditor._calculate_misclassification_risk": {
              "return_statements": 1,
              "returns_none": false,
              "return_complexity": "single"
            },
            "AdvancedHighStakesAuditor._label_to_index": {
              "return_statements": 1,
              "returns_none": false,
              "return_complexity": "single"
            },
            "AdvancedHighStakesAuditor._generate_overall_assessment": {
              "return_statements": 1,
              "returns_none": false,
              "return_complexity": "single"
            },
            "AdvancedHighStakesAuditor._generate_recommendations": {
              "return_statements": 1,
              "returns_none": false,
              "return_complexity": "single"
            }
          }
        },
        "analysis_metadata": {
          "timestamp": "2025-08-14T18:24:47.238910Z",
          "analyzer_version": "1.0.0",
          "file_analyzed": "C:\\Users\\Kevin\\fine_tune_llm\\backups\\god_classes\\high_stakes_audit_backup_20250814_121039.py",
          "analysis_complete": true
        }
      },
      "summary_report": {
        "file_summary": {
          "file_path": "C:\\Users\\Kevin\\fine_tune_llm\\backups\\god_classes\\high_stakes_audit_backup_20250814_121039.py",
          "total_classes": 5,
          "total_methods": 35,
          "total_functions": 0,
          "total_imports": 8,
          "lines_of_code": 985,
          "total_complexity": 99
        },
        "complexity_analysis": {
          "average_methods_per_class": 7.0,
          "most_complex_class": {
            "name": "AdvancedHighStakesAuditor",
            "complexity": 49,
            "method_count": 12,
            "line_count": 575
          },
          "most_connected_method": {
            "name": "AdvancedHighStakesAuditor._conduct_advanced_metrics_audit",
            "total_connections": 47,
            "outgoing_calls": 47,
            "incoming_calls": 0
          },
          "dependency_density": 1.0
        },
        "decomposition_candidates": [
          {
            "class_name": "AdvancedHighStakesAuditor",
            "reason": "god_class",
            "method_count": 12,
            "complexity": 49,
            "line_count": 575,
            "decomposition_suggestions": [
              "Extract -related methods into separate class",
              "Extract utility methods into helper class"
            ]
          }
        ],
        "external_dependencies": {
          "third_party_imports": [
            "torch",
            "torch.nn.functional",
            "numpy"
          ],
          "high_coupling_indicators": [
            "Highly connected methods: 13"
          ]
        }
      }
    },
    {
      "class_name": "LLMEvaluator",
      "functionality_map": {
        "file_info": {
          "path": "C:\\Users\\Kevin\\fine_tune_llm\\backups\\god_classes\\evaluate_backup_20250814_121303.py",
          "size": 44687,
          "lines": 1064,
          "non_empty_lines": 885,
          "comment_lines": 109
        },
        "imports": {
          "stdlib": [
            "json",
            "logging"
          ],
          "third_party": [
            "numpy",
            "pandas",
            "torch",
            "matplotlib.pyplot",
            "seaborn"
          ],
          "local": [
            "yaml",
            "evaluate",
            "argparse"
          ],
          "from_imports": {
            "pathlib": {
              "category": "stdlib",
              "items": [
                "Path"
              ]
            },
            "typing": {
              "category": "stdlib",
              "items": [
                "Dict",
                "List",
                "Tuple",
                "Optional"
              ]
            },
            "sklearn.metrics": {
              "category": "third_party",
              "items": [
                "accuracy_score",
                "f1_score",
                "precision_score",
                "recall_score",
                "confusion_matrix"
              ]
            },
            "transformers": {
              "category": "third_party",
              "items": [
                "AutoModelForCausalLM",
                "AutoTokenizer"
              ]
            },
            "peft": {
              "category": "local",
              "items": [
                "PeftModel"
              ]
            },
            "datasets": {
              "category": "third_party",
              "items": [
                "Dataset"
              ]
            },
            "tqdm": {
              "category": "local",
              "items": [
                "tqdm"
              ]
            },
            "datetime": {
              "category": "stdlib",
              "items": [
                "datetime"
              ]
            },
            "metrics": {
              "category": "local",
              "items": [
                "compute_ece",
                "compute_mce",
                "compute_brier_score",
                "compute_abstention_metrics",
                "compute_risk_aware_metrics",
                "compute_confidence_metrics",
                "MetricsAggregator",
                "compute_reliability_diagram_data"
              ]
            },
            "conformal": {
              "category": "local",
              "items": [
                "ConformalPredictor",
                "RiskControlledPredictor"
              ]
            },
            "collections": {
              "category": "stdlib",
              "items": [
                "Counter"
              ]
            }
          },
          "import_aliases": {
            "np": "numpy",
            "pd": "pandas",
            "plt": "matplotlib.pyplot",
            "sns": "seaborn"
          }
        },
        "classes": {
          "LLMEvaluator": {
            "name": "LLMEvaluator",
            "line_start": 43,
            "line_end": 745,
            "bases": [],
            "decorators": [],
            "methods": {
              "__init__": {
                "name": "__init__",
                "line_start": 46,
                "line_end": 112,
                "line_count": 67,
                "parameters": [
                  "self",
                  "model",
                  "tokenizer",
                  "model_path",
                  "config_path"
                ],
                "decorators": [],
                "docstring": "Initialize evaluator.\n\nArgs:\n    model: Model instance for evaluation\n    tokenizer: Tokenizer instance  \n    model_path: Optional path to fine-tuned model\n    config_path: Path to configuration file",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "Path",
                  "self.load_config",
                  "MetricsAggregator",
                  "self.config.get",
                  "get",
                  "get",
                  "logger.info",
                  "evaluate.load",
                  "evaluate.load",
                  "evaluate.load",
                  "evaluate.load",
                  "Path",
                  "get",
                  "get",
                  "ConformalPredictor",
                  "logger.info",
                  "RiskControlledPredictor",
                  "logger.info",
                  "advanced_config.get",
                  "advanced_config.get",
                  "Path"
                ],
                "complexity": 6,
                "return_count": 0,
                "returns_none": false
              },
              "load_config": {
                "name": "load_config",
                "line_start": 114,
                "line_end": 117,
                "line_count": 4,
                "parameters": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Load configuration.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "open",
                  "yaml.safe_load"
                ],
                "complexity": 0,
                "return_count": 0,
                "returns_none": false
              },
              "load_model": {
                "name": "load_model",
                "line_start": 119,
                "line_end": 135,
                "line_count": 17,
                "parameters": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Load the fine-tuned model.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "logger.info",
                  "AutoTokenizer.from_pretrained",
                  "AutoModelForCausalLM.from_pretrained",
                  "logger.info"
                ],
                "complexity": 0,
                "return_count": 0,
                "returns_none": false
              },
              "evaluate_single": {
                "name": "evaluate_single",
                "line_start": 137,
                "line_end": 139,
                "line_count": 3,
                "parameters": [
                  "self",
                  "text",
                  "parse_json"
                ],
                "decorators": [],
                "docstring": "Evaluate a single text input.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "self.predict_single"
                ],
                "complexity": 0,
                "return_count": 1,
                "returns_none": false
              },
              "predict_single": {
                "name": "predict_single",
                "line_start": 141,
                "line_end": 214,
                "line_count": 74,
                "parameters": [
                  "self",
                  "text",
                  "metadata"
                ],
                "decorators": [],
                "docstring": "Generate prediction for a single text.\n\nArgs:\n    text: Input text\n    metadata: Additional metadata\n\nReturns:\n    Prediction dictionary",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "strip",
                  "self.tokenizer",
                  "self.tokenizer.decode",
                  "len",
                  "strip",
                  "torch.no_grad",
                  "self.model.generate",
                  "self.tokenizer.decode",
                  "generated_text.find",
                  "generated_text.rfind",
                  "json.loads",
                  "result.get",
                  "result.get",
                  "result.get",
                  "result.get"
                ],
                "complexity": 2,
                "return_count": 3,
                "returns_none": false
              },
              "evaluate_dataset": {
                "name": "evaluate_dataset",
                "line_start": 216,
                "line_end": 303,
                "line_count": 88,
                "parameters": [
                  "self",
                  "dataset",
                  "batch_size",
                  "output_path"
                ],
                "decorators": [],
                "docstring": "Evaluate model on a dataset.\n\nArgs:\n    dataset: Evaluation dataset (list of dicts or Dataset)\n    batch_size: Batch size for processing\n    output_path: Optional path to save detailed results\n\nReturns:\n    List of evaluation results",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "logger.info",
                  "enumerate",
                  "hasattr",
                  "hasattr",
                  "tqdm",
                  "Path",
                  "output_dir.mkdir",
                  "logger.info",
                  "self.predict_single",
                  "example.get",
                  "pred.get",
                  "detailed_results.append",
                  "open",
                  "json.dump",
                  "range",
                  "len",
                  "example.get",
                  "example.get",
                  "example.get",
                  "example.get",
                  "detailed_results.append",
                  "logger.warning",
                  "len",
                  "example.get",
                  "example.get",
                  "json.loads",
                  "example.get",
                  "example.get",
                  "str",
                  "example.get",
                  "example.get"
                ],
                "complexity": 7,
                "return_count": 2,
                "returns_none": false
              },
              "compute_metrics": {
                "name": "compute_metrics",
                "line_start": 305,
                "line_end": 468,
                "line_count": 164,
                "parameters": [
                  "self",
                  "predictions",
                  "ground_truth",
                  "detailed_results"
                ],
                "decorators": [],
                "docstring": "Compute comprehensive evaluation metrics including advanced metrics.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "accuracy_score",
                  "f1_score",
                  "f1_score",
                  "precision_score",
                  "recall_score",
                  "sum",
                  "len",
                  "logger.warning",
                  "sum",
                  "len",
                  "sum",
                  "len",
                  "len",
                  "len",
                  "len",
                  "self.get_label_distribution",
                  "self.get_label_distribution",
                  "self.metrics_aggregator.add_metrics",
                  "enumerate",
                  "len",
                  "np.mean",
                  "np.std",
                  "np.min",
                  "np.max",
                  "len",
                  "len",
                  "len",
                  "len",
                  "np.array",
                  "np.array",
                  "compute_confidence_metrics",
                  "metrics.update",
                  "compute_risk_aware_metrics",
                  "metrics.update",
                  "logger.info",
                  "compute_ece",
                  "compute_mce",
                  "compute_brier_score",
                  "compute_reliability_diagram_data",
                  "np.array",
                  "np.array",
                  "np.array",
                  "np.array",
                  "np.array",
                  "compute_abstention_metrics",
                  "metrics.update",
                  "np.array",
                  "np.array",
                  "len",
                  "len",
                  "np.zeros",
                  "enumerate",
                  "logger.warning",
                  "result.get",
                  "result.get",
                  "len",
                  "len",
                  "set",
                  "self._label_to_index",
                  "range",
                  "np.array",
                  "self.conformal_predictor.calibrate",
                  "self.conformal_predictor.evaluate_coverage",
                  "metrics.update",
                  "result.get",
                  "result.get",
                  "zip",
                  "self._label_to_index",
                  "self._label_to_index",
                  "confidence_metrics.items",
                  "self._label_to_index",
                  "self._label_to_index",
                  "self._label_to_index",
                  "self._label_to_index",
                  "risk_metrics.items",
                  "max",
                  "logger.warning",
                  "result.get",
                  "range",
                  "abstention_metrics.items",
                  "self._label_to_index",
                  "len",
                  "coverage_metrics.items"
                ],
                "complexity": 11,
                "return_count": 2,
                "returns_none": false
              },
              "_label_to_index": {
                "name": "_label_to_index",
                "line_start": 470,
                "line_end": 480,
                "line_count": 11,
                "parameters": [
                  "self",
                  "label"
                ],
                "decorators": [],
                "docstring": "Convert label string to index for advanced metrics.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "label_map.get"
                ],
                "complexity": 0,
                "return_count": 1,
                "returns_none": false
              },
              "get_label_distribution": {
                "name": "get_label_distribution",
                "line_start": 482,
                "line_end": 488,
                "line_count": 7,
                "parameters": [
                  "self",
                  "labels"
                ],
                "decorators": [],
                "docstring": "Get label distribution.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "Counter",
                  "len",
                  "counts.items"
                ],
                "complexity": 0,
                "return_count": 1,
                "returns_none": false
              },
              "create_visualizations": {
                "name": "create_visualizations",
                "line_start": 490,
                "line_end": 558,
                "line_count": 69,
                "parameters": [
                  "self",
                  "detailed_results",
                  "metrics",
                  "output_dir"
                ],
                "decorators": [],
                "docstring": "Create evaluation visualizations.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "pd.DataFrame",
                  "plt.subplots",
                  "bar",
                  "set_title",
                  "set_ylim",
                  "bar",
                  "set_title",
                  "set_ylim",
                  "bar",
                  "set_title",
                  "tick_params",
                  "plt.tight_layout",
                  "plt.savefig",
                  "plt.close",
                  "self.create_text_report",
                  "logger.info",
                  "len",
                  "sum",
                  "hist",
                  "set_title",
                  "set_xlabel",
                  "set_ylabel",
                  "label_dist.keys",
                  "label_dist.values",
                  "self.create_advanced_visualizations",
                  "len",
                  "confusion_matrix",
                  "sorted",
                  "plt.figure",
                  "sns.heatmap",
                  "plt.title",
                  "plt.ylabel",
                  "plt.xlabel",
                  "plt.tight_layout",
                  "plt.savefig",
                  "plt.close",
                  "list",
                  "set",
                  "set",
                  "unique",
                  "unique"
                ],
                "complexity": 4,
                "return_count": 0,
                "returns_none": false
              },
              "create_advanced_visualizations": {
                "name": "create_advanced_visualizations",
                "line_start": 560,
                "line_end": 662,
                "line_count": 103,
                "parameters": [
                  "self",
                  "metrics",
                  "output_dir"
                ],
                "decorators": [],
                "docstring": "Create advanced metrics visualizations.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "logger.info",
                  "k.replace",
                  "plt.figure",
                  "plt.subplot",
                  "plt.subplot",
                  "plt.tight_layout",
                  "plt.savefig",
                  "plt.close",
                  "logger.warning",
                  "plt.figure",
                  "plt.subplot",
                  "plt.plot",
                  "plt.scatter",
                  "plt.xlabel",
                  "plt.ylabel",
                  "plt.title",
                  "plt.legend",
                  "plt.grid",
                  "plt.subplot",
                  "plt.subplot",
                  "plt.subplot",
                  "metrics.items",
                  "plt.tight_layout",
                  "plt.savefig",
                  "plt.close",
                  "metrics.items",
                  "k.startswith",
                  "plt.bar",
                  "plt.title",
                  "plt.ylabel",
                  "plt.ylim",
                  "list",
                  "plt.bar",
                  "plt.title",
                  "plt.xlabel",
                  "plt.ylabel",
                  "calibration_metrics.append",
                  "calibration_values.append",
                  "calibration_metrics.append",
                  "calibration_values.append",
                  "calibration_metrics.append",
                  "calibration_values.append",
                  "plt.bar",
                  "plt.title",
                  "plt.ylabel",
                  "plt.bar",
                  "plt.title",
                  "plt.ylabel",
                  "plt.bar",
                  "plt.title",
                  "plt.xticks",
                  "plt.ylabel",
                  "conformal_metrics.items",
                  "k.startswith",
                  "int",
                  "size_metrics.values",
                  "key.startswith",
                  "isinstance",
                  "risk_metrics.keys",
                  "risk_metrics.values",
                  "size_metrics.keys",
                  "key.replace",
                  "k.split"
                ],
                "complexity": 14,
                "return_count": 0,
                "returns_none": false
              },
              "create_text_report": {
                "name": "create_text_report",
                "line_start": 664,
                "line_end": 745,
                "line_count": 82,
                "parameters": [
                  "self",
                  "metrics",
                  "output_dir"
                ],
                "decorators": [],
                "docstring": "Create a text summary report.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "items",
                  "items",
                  "metrics.items",
                  "metrics.items",
                  "metrics.items",
                  "metrics.items",
                  "open",
                  "f.write",
                  "key.startswith",
                  "isinstance",
                  "title",
                  "key.startswith",
                  "isinstance",
                  "title",
                  "key.startswith",
                  "isinstance",
                  "title",
                  "key.startswith",
                  "isinstance",
                  "title",
                  "replace",
                  "replace",
                  "replace",
                  "replace",
                  "key.replace",
                  "key.replace",
                  "key.replace",
                  "key.replace"
                ],
                "complexity": 14,
                "return_count": 0,
                "returns_none": false
              }
            },
            "properties": [],
            "class_variables": [],
            "instance_variables": "{'metrics_aggregator', 'results', 'config', 'metrics', 'config_path', 'risk_controlled_predictor', 'conformal_predictor', 'model_path', 'tokenizer', 'model', 'predictions'}",
            "docstring": "Comprehensive evaluation for fine-tuned LLM models.",
            "complexity_metrics": {
              "method_count": 12,
              "line_count": 703,
              "cyclomatic_complexity": 58,
              "public_methods": 10,
              "private_methods": 2,
              "property_count": 0,
              "inheritance_depth": 0
            }
          }
        },
        "functions": {
          "main": {
            "name": "main",
            "line_start": 748,
            "line_end": 783,
            "line_count": 36,
            "parameters": [],
            "decorators": [],
            "docstring": "Main evaluation function.",
            "has_args": false,
            "has_kwargs": false,
            "is_async": false,
            "calls_made": [
              "argparse.ArgumentParser",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.parse_args",
              "args.test_data.endswith",
              "LLMEvaluator",
              "evaluator.evaluate_dataset",
              "print",
              "print",
              "print",
              "print",
              "print",
              "print",
              "print",
              "print",
              "print",
              "Dataset.from_list",
              "Dataset.load_from_disk",
              "open",
              "json.load"
            ],
            "complexity": 1,
            "return_count": 0,
            "returns_none": false
          },
          "load_test_data": {
            "name": "load_test_data",
            "line_start": 788,
            "line_end": 812,
            "line_count": 25,
            "parameters": [
              "file_path"
            ],
            "decorators": [],
            "docstring": "Load test data from file.\n\nArgs:\n    file_path: Path to test data file\n    \nReturns:\n    List of test data samples",
            "has_args": false,
            "has_kwargs": false,
            "is_async": false,
            "calls_made": [
              "Path",
              "file_path.exists",
              "FileNotFoundError",
              "open",
              "json.load",
              "pd.read_csv",
              "df.to_dict",
              "ValueError"
            ],
            "complexity": 3,
            "return_count": 1,
            "returns_none": false
          },
          "compute_metrics": {
            "name": "compute_metrics",
            "line_start": 815,
            "line_end": 886,
            "line_count": 72,
            "parameters": [
              "predictions",
              "labels",
              "confidences",
              "metrics"
            ],
            "decorators": [],
            "docstring": "Compute evaluation metrics for predictions.\n\nArgs:\n    predictions: List of predicted labels\n    labels: List of true labels\n    confidences: Optional list of confidence scores\n    metrics: Optional list of specific metrics to compute\n    \nReturns:\n    Dictionary of computed metrics",
            "has_args": false,
            "has_kwargs": false,
            "is_async": false,
            "calls_made": [
              "sum",
              "len",
              "len",
              "ValueError",
              "len",
              "len",
              "accuracy_score",
              "list",
              "len",
              "zip",
              "zip",
              "set",
              "len",
              "precision_score",
              "recall_score",
              "f1_score",
              "precision_score",
              "recall_score",
              "f1_score",
              "np.mean",
              "np.std",
              "len",
              "len",
              "len",
              "abs",
              "zip",
              "enumerate",
              "np.mean",
              "np.mean"
            ],
            "complexity": 8,
            "return_count": 2,
            "returns_none": false
          },
          "create_visualizations": {
            "name": "create_visualizations",
            "line_start": 889,
            "line_end": 988,
            "line_count": 100,
            "parameters": [
              "predictions",
              "labels",
              "confidences",
              "save_dir",
              "plots"
            ],
            "decorators": [],
            "docstring": "Create visualizations for evaluation results.\n\nArgs:\n    predictions: List of predicted labels\n    labels: List of true labels\n    confidences: Optional list of confidence scores\n    save_dir: Optional directory to save plots\n    plots: Optional list of specific plots to create",
            "has_args": false,
            "has_kwargs": false,
            "is_async": false,
            "calls_made": [
              "len",
              "len",
              "zip",
              "zip",
              "len",
              "sorted",
              "confusion_matrix",
              "plt.figure",
              "sns.heatmap",
              "plt.title",
              "plt.ylabel",
              "plt.xlabel",
              "plt.close",
              "len",
              "list",
              "plt.savefig",
              "logger.warning",
              "plt.figure",
              "plt.hist",
              "plt.title",
              "plt.xlabel",
              "plt.ylabel",
              "plt.close",
              "logger.warning",
              "len",
              "len",
              "np.linspace",
              "zip",
              "logger.warning",
              "set",
              "plt.savefig",
              "zip",
              "enumerate",
              "any",
              "plt.figure",
              "plt.plot",
              "plt.plot",
              "plt.xlabel",
              "plt.ylabel",
              "plt.title",
              "plt.legend",
              "plt.grid",
              "plt.close",
              "Path",
              "np.mean",
              "np.mean",
              "bin_confidences.append",
              "bin_accuracies.append",
              "plt.savefig",
              "Path",
              "Path",
              "enumerate",
              "enumerate"
            ],
            "complexity": 15,
            "return_count": 1,
            "returns_none": true
          },
          "generate_report": {
            "name": "generate_report",
            "line_start": 991,
            "line_end": 1059,
            "line_count": 69,
            "parameters": [
              "predictions",
              "labels",
              "confidences",
              "metadata",
              "errors",
              "save_path",
              "include_sections"
            ],
            "decorators": [],
            "docstring": "Generate comprehensive evaluation report.\n\nArgs:\n    predictions: List of predicted labels\n    labels: List of true labels\n    confidences: Optional list of confidence scores\n    metadata: Optional metadata about the evaluation\n    errors: Optional list of errors encountered\n    save_path: Optional path to save the report\n    include_sections: Optional list of sections to include\n    \nReturns:\n    Report dictionary",
            "has_args": false,
            "has_kwargs": false,
            "is_async": false,
            "calls_made": [
              "compute_metrics",
              "isoformat",
              "sum",
              "logger.info",
              "len",
              "metrics.get",
              "metrics.get",
              "list",
              "open",
              "json.dump",
              "datetime.now",
              "np.mean",
              "np.std",
              "np.min",
              "np.max",
              "set",
              "len"
            ],
            "complexity": 5,
            "return_count": 1,
            "returns_none": false
          }
        },
        "dependencies": {
          "internal_calls": {
            "global": [
              "logging.getLogger",
              "main"
            ],
            "main": [
              "argparse.ArgumentParser",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.parse_args",
              "args.test_data.endswith",
              "LLMEvaluator",
              "evaluator.evaluate_dataset",
              "print",
              "print",
              "print",
              "print",
              "print",
              "print",
              "print",
              "print",
              "print",
              "Dataset.from_list",
              "Dataset.load_from_disk",
              "open",
              "json.load"
            ],
            "load_test_data": [
              "Path",
              "file_path.exists",
              "FileNotFoundError",
              "open",
              "json.load",
              "pd.read_csv",
              "df.to_dict",
              "ValueError"
            ],
            "compute_metrics": [
              "sum",
              "len",
              "len",
              "ValueError",
              "len",
              "len",
              "accuracy_score",
              "list",
              "len",
              "zip",
              "zip",
              "set",
              "len",
              "precision_score",
              "recall_score",
              "f1_score",
              "precision_score",
              "recall_score",
              "f1_score",
              "np.mean",
              "np.std",
              "len",
              "len",
              "len",
              "abs",
              "zip",
              "enumerate",
              "np.mean",
              "np.mean"
            ],
            "generate_report": [
              "compute_metrics",
              "isoformat",
              "sum",
              "logger.info",
              "len",
              "metrics.get",
              "metrics.get",
              "list",
              "open",
              "json.dump",
              "datetime.now",
              "np.mean",
              "np.std",
              "np.min",
              "np.max",
              "set",
              "len"
            ],
            "LLMEvaluator.load_model": [
              "logger.info",
              "AutoTokenizer.from_pretrained",
              "AutoModelForCausalLM.from_pretrained",
              "logger.info"
            ],
            "LLMEvaluator.evaluate_single": [
              "self.predict_single"
            ],
            "LLMEvaluator.predict_single": [
              "strip",
              "self.tokenizer",
              "self.tokenizer.decode",
              "len",
              "strip",
              "torch.no_grad",
              "self.model.generate",
              "self.tokenizer.decode",
              "generated_text.find",
              "generated_text.rfind",
              "json.loads",
              "result.get",
              "result.get",
              "result.get",
              "result.get"
            ],
            "LLMEvaluator.evaluate_dataset": [
              "logger.info",
              "enumerate",
              "hasattr",
              "hasattr",
              "tqdm",
              "Path",
              "output_dir.mkdir",
              "logger.info",
              "self.predict_single",
              "example.get",
              "pred.get",
              "detailed_results.append",
              "open",
              "json.dump",
              "range",
              "len",
              "example.get",
              "example.get",
              "example.get",
              "example.get",
              "detailed_results.append",
              "logger.warning",
              "len",
              "example.get",
              "example.get",
              "json.loads",
              "example.get",
              "example.get",
              "str",
              "example.get",
              "example.get"
            ],
            "LLMEvaluator.compute_metrics": [
              "accuracy_score",
              "f1_score",
              "f1_score",
              "precision_score",
              "recall_score",
              "sum",
              "len",
              "logger.warning",
              "sum",
              "len",
              "sum",
              "len",
              "len",
              "len",
              "len",
              "self.get_label_distribution",
              "self.get_label_distribution",
              "self.metrics_aggregator.add_metrics",
              "enumerate",
              "len",
              "np.mean",
              "np.std",
              "np.min",
              "np.max",
              "len",
              "len",
              "len",
              "len",
              "np.array",
              "np.array",
              "compute_confidence_metrics",
              "metrics.update",
              "compute_risk_aware_metrics",
              "metrics.update",
              "logger.info",
              "compute_ece",
              "compute_mce",
              "compute_brier_score",
              "compute_reliability_diagram_data",
              "np.array",
              "np.array",
              "np.array",
              "np.array",
              "np.array",
              "compute_abstention_metrics",
              "metrics.update",
              "np.array",
              "np.array",
              "len",
              "len",
              "np.zeros",
              "enumerate",
              "logger.warning",
              "result.get",
              "result.get",
              "len",
              "len",
              "set",
              "self._label_to_index",
              "range",
              "np.array",
              "self.conformal_predictor.calibrate",
              "self.conformal_predictor.evaluate_coverage",
              "metrics.update",
              "result.get",
              "result.get",
              "zip",
              "self._label_to_index",
              "self._label_to_index",
              "confidence_metrics.items",
              "self._label_to_index",
              "self._label_to_index",
              "self._label_to_index",
              "self._label_to_index",
              "risk_metrics.items",
              "max",
              "logger.warning",
              "result.get",
              "range",
              "abstention_metrics.items",
              "self._label_to_index",
              "len",
              "coverage_metrics.items"
            ],
            "LLMEvaluator._label_to_index": [
              "label_map.get"
            ],
            "LLMEvaluator.get_label_distribution": [
              "Counter",
              "len",
              "counts.items"
            ],
            "LLMEvaluator.create_visualizations": [
              "pd.DataFrame",
              "plt.subplots",
              "bar",
              "set_title",
              "set_ylim",
              "bar",
              "set_title",
              "set_ylim",
              "bar",
              "set_title",
              "tick_params",
              "plt.tight_layout",
              "plt.savefig",
              "plt.close",
              "self.create_text_report",
              "logger.info",
              "len",
              "sum",
              "hist",
              "set_title",
              "set_xlabel",
              "set_ylabel",
              "label_dist.keys",
              "label_dist.values",
              "self.create_advanced_visualizations",
              "len",
              "confusion_matrix",
              "sorted",
              "plt.figure",
              "sns.heatmap",
              "plt.title",
              "plt.ylabel",
              "plt.xlabel",
              "plt.tight_layout",
              "plt.savefig",
              "plt.close",
              "list",
              "set",
              "set",
              "unique",
              "unique"
            ],
            "LLMEvaluator.create_text_report": [
              "items",
              "items",
              "metrics.items",
              "metrics.items",
              "metrics.items",
              "metrics.items",
              "open",
              "f.write",
              "key.startswith",
              "isinstance",
              "title",
              "key.startswith",
              "isinstance",
              "title",
              "key.startswith",
              "isinstance",
              "title",
              "key.startswith",
              "isinstance",
              "title",
              "replace",
              "replace",
              "replace",
              "replace",
              "key.replace",
              "key.replace",
              "key.replace",
              "key.replace"
            ],
            "LLMEvaluator.__init__": [
              "Path",
              "self.load_config",
              "MetricsAggregator",
              "self.config.get",
              "get",
              "get",
              "logger.info",
              "evaluate.load",
              "evaluate.load",
              "evaluate.load",
              "evaluate.load",
              "Path",
              "get",
              "get",
              "ConformalPredictor",
              "logger.info",
              "RiskControlledPredictor",
              "logger.info",
              "advanced_config.get",
              "advanced_config.get",
              "Path"
            ],
            "LLMEvaluator.load_config": [
              "open",
              "yaml.safe_load"
            ],
            "LLMEvaluator.create_advanced_visualizations": [
              "logger.info",
              "k.replace",
              "plt.figure",
              "plt.subplot",
              "plt.subplot",
              "plt.tight_layout",
              "plt.savefig",
              "plt.close",
              "logger.warning",
              "plt.figure",
              "plt.subplot",
              "plt.plot",
              "plt.scatter",
              "plt.xlabel",
              "plt.ylabel",
              "plt.title",
              "plt.legend",
              "plt.grid",
              "plt.subplot",
              "plt.subplot",
              "plt.subplot",
              "metrics.items",
              "plt.tight_layout",
              "plt.savefig",
              "plt.close",
              "metrics.items",
              "k.startswith",
              "plt.bar",
              "plt.title",
              "plt.ylabel",
              "plt.ylim",
              "list",
              "plt.bar",
              "plt.title",
              "plt.xlabel",
              "plt.ylabel",
              "calibration_metrics.append",
              "calibration_values.append",
              "calibration_metrics.append",
              "calibration_values.append",
              "calibration_metrics.append",
              "calibration_values.append",
              "plt.bar",
              "plt.title",
              "plt.ylabel",
              "plt.bar",
              "plt.title",
              "plt.ylabel",
              "plt.bar",
              "plt.title",
              "plt.xticks",
              "plt.ylabel",
              "conformal_metrics.items",
              "k.startswith",
              "int",
              "size_metrics.values",
              "key.startswith",
              "isinstance",
              "risk_metrics.keys",
              "risk_metrics.values",
              "size_metrics.keys",
              "key.replace",
              "k.split"
            ],
            "create_visualizations": [
              "len",
              "len",
              "zip",
              "zip",
              "len",
              "sorted",
              "confusion_matrix",
              "plt.figure",
              "sns.heatmap",
              "plt.title",
              "plt.ylabel",
              "plt.xlabel",
              "plt.close",
              "len",
              "list",
              "plt.savefig",
              "logger.warning",
              "plt.figure",
              "plt.hist",
              "plt.title",
              "plt.xlabel",
              "plt.ylabel",
              "plt.close",
              "logger.warning",
              "len",
              "len",
              "np.linspace",
              "zip",
              "logger.warning",
              "set",
              "plt.savefig",
              "zip",
              "enumerate",
              "any",
              "plt.figure",
              "plt.plot",
              "plt.plot",
              "plt.xlabel",
              "plt.ylabel",
              "plt.title",
              "plt.legend",
              "plt.grid",
              "plt.close",
              "Path",
              "np.mean",
              "np.mean",
              "bin_confidences.append",
              "bin_accuracies.append",
              "plt.savefig",
              "Path",
              "Path",
              "enumerate",
              "enumerate"
            ]
          },
          "external_calls": {},
          "attribute_access": {
            "global": [
              "logging.getLogger"
            ],
            "LLMEvaluator.__init__": [
              "self.model",
              "self.tokenizer",
              "self.model_path",
              "self.config_path",
              "self.predictions",
              "self.results",
              "self.metrics_aggregator",
              "self.conformal_predictor",
              "self.risk_controlled_predictor",
              "self.metrics",
              "self.metrics_aggregator",
              "self.load_config",
              "self.config",
              "self.metrics",
              "self.config.get",
              "get",
              "self.conformal_predictor",
              "get",
              "self.risk_controlled_predictor",
              "logger.info",
              "evaluate.load",
              "evaluate.load",
              "evaluate.load",
              "evaluate.load",
              "parent",
              "self.config",
              "get",
              "get",
              "logger.info",
              "logger.info",
              "advanced_config.get",
              "advanced_config.get"
            ],
            "LLMEvaluator.load_model": [
              "self.tokenizer",
              "self.model",
              "logger.info",
              "self.config",
              "AutoTokenizer.from_pretrained",
              "self.model_path",
              "AutoModelForCausalLM.from_pretrained",
              "self.model_path",
              "logger.info",
              "self.config",
              "torch.bfloat16",
              "self.model_path"
            ],
            "main": [
              "argparse.ArgumentParser",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.parse_args",
              "args.test_data.endswith",
              "args.model_path",
              "args.config",
              "evaluator.evaluate_dataset",
              "args.output",
              "args.test_data",
              "Dataset.from_list",
              "Dataset.load_from_disk",
              "args.test_data",
              "args.test_data",
              "json.load"
            ],
            "load_test_data": [
              "file_path.suffix",
              "file_path.exists",
              "file_path.suffix",
              "json.load",
              "pd.read_csv",
              "df.to_dict",
              "file_path.suffix"
            ],
            "LLMEvaluator.load_config": [
              "self.config",
              "self.config_path",
              "yaml.safe_load"
            ],
            "LLMEvaluator.evaluate_single": [
              "self.predict_single"
            ],
            "LLMEvaluator.predict_single": [
              "strip",
              "self.tokenizer",
              "self.tokenizer.decode",
              "strip",
              "json.JSONDecodeError",
              "torch.no_grad",
              "self.model.generate",
              "self.tokenizer",
              "self.tokenizer.decode",
              "generated_text.find",
              "self.model",
              "self.tokenizer.eos_token_id",
              "self.tokenizer",
              "generated_text.rfind",
              "json.loads",
              "self.config",
              "self.tokenizer",
              "result.get",
              "result.get",
              "result.get",
              "result.get"
            ],
            "LLMEvaluator.evaluate_dataset": [
              "logger.info",
              "output_dir.mkdir",
              "logger.info",
              "self.predict_single",
              "example.get",
              "pred.get",
              "detailed_results.append",
              "json.dump",
              "example.get",
              "example.get",
              "example.get",
              "example.get",
              "detailed_results.append",
              "logger.warning",
              "example.get",
              "example.get",
              "json.loads",
              "example.get",
              "example.get",
              "example.get",
              "example.get"
            ],
            "LLMEvaluator.compute_metrics": [
              "self.metrics_aggregator",
              "logger.warning",
              "self.get_label_distribution",
              "self.get_label_distribution",
              "self.metrics_aggregator.add_metrics",
              "np.mean",
              "np.std",
              "np.min",
              "np.max",
              "np.array",
              "np.array",
              "metrics.update",
              "metrics.update",
              "self.conformal_predictor",
              "logger.info",
              "self.metrics_aggregator",
              "np.array",
              "np.array",
              "np.array",
              "np.array",
              "np.array",
              "metrics.update",
              "np.array",
              "np.array",
              "np.zeros",
              "logger.warning",
              "result.get",
              "result.get",
              "self._label_to_index",
              "np.array",
              "self.conformal_predictor.calibrate",
              "self.conformal_predictor.evaluate_coverage",
              "metrics.update",
              "result.get",
              "result.get",
              "self._label_to_index",
              "self._label_to_index",
              "confidence_metrics.items",
              "self._label_to_index",
              "self._label_to_index",
              "self._label_to_index",
              "self._label_to_index",
              "risk_metrics.items",
              "probs.shape",
              "self.conformal_predictor",
              "self.conformal_predictor",
              "logger.warning",
              "result.get",
              "abstention_metrics.items",
              "probs.shape",
              "self._label_to_index",
              "coverage_metrics.items"
            ],
            "LLMEvaluator._label_to_index": [
              "label_map.get"
            ],
            "LLMEvaluator.create_visualizations": [
              "pd.DataFrame",
              "plt.subplots",
              "bar",
              "set_title",
              "set_ylim",
              "bar",
              "set_title",
              "set_ylim",
              "bar",
              "set_title",
              "tick_params",
              "plt.tight_layout",
              "plt.savefig",
              "plt.close",
              "self.create_text_report",
              "logger.info",
              "sum",
              "hist",
              "set_title",
              "set_xlabel",
              "set_ylabel",
              "label_dist.keys",
              "label_dist.values",
              "self.create_advanced_visualizations",
              "plt.figure",
              "sns.heatmap",
              "plt.title",
              "plt.ylabel",
              "plt.xlabel",
              "plt.tight_layout",
              "plt.savefig",
              "plt.close",
              "unique",
              "unique"
            ],
            "LLMEvaluator.create_text_report": [
              "items",
              "items",
              "metrics.items",
              "metrics.items",
              "metrics.items",
              "metrics.items",
              "f.write",
              "key.startswith",
              "title",
              "key.startswith",
              "title",
              "key.startswith",
              "title",
              "key.startswith",
              "title",
              "replace",
              "replace",
              "replace",
              "replace",
              "key.replace",
              "key.replace",
              "key.replace",
              "key.replace"
            ],
            "generate_report": [
              "isoformat",
              "logger.info",
              "metrics.get",
              "metrics.get",
              "json.dump",
              "datetime.now",
              "np.mean",
              "np.std",
              "np.min",
              "np.max"
            ],
            "LLMEvaluator.create_advanced_visualizations": [
              "logger.info",
              "k.replace",
              "plt.figure",
              "plt.subplot",
              "plt.subplot",
              "plt.tight_layout",
              "plt.savefig",
              "plt.close",
              "logger.warning",
              "plt.figure",
              "plt.subplot",
              "plt.plot",
              "plt.scatter",
              "plt.xlabel",
              "plt.ylabel",
              "plt.title",
              "plt.legend",
              "plt.grid",
              "plt.subplot",
              "plt.subplot",
              "plt.subplot",
              "metrics.items",
              "plt.tight_layout",
              "plt.savefig",
              "plt.close",
              "metrics.items",
              "k.startswith",
              "plt.bar",
              "plt.title",
              "plt.ylabel",
              "plt.ylim",
              "plt.bar",
              "plt.title",
              "plt.xlabel",
              "plt.ylabel",
              "calibration_metrics.append",
              "calibration_values.append",
              "calibration_metrics.append",
              "calibration_values.append",
              "calibration_metrics.append",
              "calibration_values.append",
              "plt.bar",
              "plt.title",
              "plt.ylabel",
              "plt.bar",
              "plt.title",
              "plt.ylabel",
              "plt.bar",
              "plt.title",
              "plt.xticks",
              "plt.ylabel",
              "conformal_metrics.items",
              "k.startswith",
              "size_metrics.values",
              "key.startswith",
              "risk_metrics.keys",
              "risk_metrics.values",
              "size_metrics.keys",
              "key.replace",
              "k.split"
            ],
            "compute_metrics": [
              "np.mean",
              "np.std",
              "np.mean",
              "np.mean"
            ],
            "create_visualizations": [
              "plt.figure",
              "sns.heatmap",
              "plt.title",
              "plt.ylabel",
              "plt.xlabel",
              "plt.close",
              "plt.savefig",
              "logger.warning",
              "plt.figure",
              "plt.hist",
              "plt.title",
              "plt.xlabel",
              "plt.ylabel",
              "plt.close",
              "logger.warning",
              "np.linspace",
              "logger.warning",
              "plt.savefig",
              "plt.figure",
              "plt.plot",
              "plt.plot",
              "plt.xlabel",
              "plt.ylabel",
              "plt.title",
              "plt.legend",
              "plt.grid",
              "plt.close",
              "np.mean",
              "np.mean",
              "bin_confidences.append",
              "bin_accuracies.append",
              "plt.savefig"
            ],
            "LLMEvaluator.get_label_distribution": [
              "counts.items"
            ]
          },
          "inheritance_chain": {},
          "composition_relationships": {}
        },
        "call_graph": {
          "LLMEvaluator.__init__": {
            "type": "method",
            "calls": [
              "Path",
              "self.load_config",
              "MetricsAggregator",
              "self.config.get",
              "get",
              "get",
              "logger.info",
              "evaluate.load",
              "evaluate.load",
              "evaluate.load",
              "evaluate.load",
              "Path",
              "get",
              "get",
              "ConformalPredictor",
              "logger.info",
              "RiskControlledPredictor",
              "logger.info",
              "advanced_config.get",
              "advanced_config.get",
              "Path"
            ],
            "called_by": [],
            "complexity": 6,
            "line_count": 67
          },
          "LLMEvaluator.load_config": {
            "type": "method",
            "calls": [
              "open",
              "yaml.safe_load"
            ],
            "called_by": [],
            "complexity": 0,
            "line_count": 4
          },
          "LLMEvaluator.load_model": {
            "type": "method",
            "calls": [
              "logger.info",
              "AutoTokenizer.from_pretrained",
              "AutoModelForCausalLM.from_pretrained",
              "logger.info"
            ],
            "called_by": [],
            "complexity": 0,
            "line_count": 17
          },
          "LLMEvaluator.evaluate_single": {
            "type": "method",
            "calls": [
              "self.predict_single"
            ],
            "called_by": [],
            "complexity": 0,
            "line_count": 3
          },
          "LLMEvaluator.predict_single": {
            "type": "method",
            "calls": [
              "strip",
              "self.tokenizer",
              "self.tokenizer.decode",
              "len",
              "strip",
              "torch.no_grad",
              "self.model.generate",
              "self.tokenizer.decode",
              "generated_text.find",
              "generated_text.rfind",
              "json.loads",
              "result.get",
              "result.get",
              "result.get",
              "result.get"
            ],
            "called_by": [],
            "complexity": 2,
            "line_count": 74
          },
          "LLMEvaluator.evaluate_dataset": {
            "type": "method",
            "calls": [
              "logger.info",
              "enumerate",
              "hasattr",
              "hasattr",
              "tqdm",
              "Path",
              "output_dir.mkdir",
              "logger.info",
              "self.predict_single",
              "example.get",
              "pred.get",
              "detailed_results.append",
              "open",
              "json.dump",
              "range",
              "len",
              "example.get",
              "example.get",
              "example.get",
              "example.get",
              "detailed_results.append",
              "logger.warning",
              "len",
              "example.get",
              "example.get",
              "json.loads",
              "example.get",
              "example.get",
              "str",
              "example.get",
              "example.get"
            ],
            "called_by": [],
            "complexity": 7,
            "line_count": 88
          },
          "LLMEvaluator.compute_metrics": {
            "type": "method",
            "calls": [
              "accuracy_score",
              "f1_score",
              "f1_score",
              "precision_score",
              "recall_score",
              "sum",
              "len",
              "logger.warning",
              "sum",
              "len",
              "sum",
              "len",
              "len",
              "len",
              "len",
              "self.get_label_distribution",
              "self.get_label_distribution",
              "self.metrics_aggregator.add_metrics",
              "enumerate",
              "len",
              "np.mean",
              "np.std",
              "np.min",
              "np.max",
              "len",
              "len",
              "len",
              "len",
              "np.array",
              "np.array",
              "compute_confidence_metrics",
              "metrics.update",
              "compute_risk_aware_metrics",
              "metrics.update",
              "logger.info",
              "compute_ece",
              "compute_mce",
              "compute_brier_score",
              "compute_reliability_diagram_data",
              "np.array",
              "np.array",
              "np.array",
              "np.array",
              "np.array",
              "compute_abstention_metrics",
              "metrics.update",
              "np.array",
              "np.array",
              "len",
              "len",
              "np.zeros",
              "enumerate",
              "logger.warning",
              "result.get",
              "result.get",
              "len",
              "len",
              "set",
              "self._label_to_index",
              "range",
              "np.array",
              "self.conformal_predictor.calibrate",
              "self.conformal_predictor.evaluate_coverage",
              "metrics.update",
              "result.get",
              "result.get",
              "zip",
              "self._label_to_index",
              "self._label_to_index",
              "confidence_metrics.items",
              "self._label_to_index",
              "self._label_to_index",
              "self._label_to_index",
              "self._label_to_index",
              "risk_metrics.items",
              "max",
              "logger.warning",
              "result.get",
              "range",
              "abstention_metrics.items",
              "self._label_to_index",
              "len",
              "coverage_metrics.items"
            ],
            "called_by": [],
            "complexity": 11,
            "line_count": 164
          },
          "LLMEvaluator._label_to_index": {
            "type": "method",
            "calls": [
              "label_map.get"
            ],
            "called_by": [],
            "complexity": 0,
            "line_count": 11
          },
          "LLMEvaluator.get_label_distribution": {
            "type": "method",
            "calls": [
              "Counter",
              "len",
              "counts.items"
            ],
            "called_by": [],
            "complexity": 0,
            "line_count": 7
          },
          "LLMEvaluator.create_visualizations": {
            "type": "method",
            "calls": [
              "pd.DataFrame",
              "plt.subplots",
              "bar",
              "set_title",
              "set_ylim",
              "bar",
              "set_title",
              "set_ylim",
              "bar",
              "set_title",
              "tick_params",
              "plt.tight_layout",
              "plt.savefig",
              "plt.close",
              "self.create_text_report",
              "logger.info",
              "len",
              "sum",
              "hist",
              "set_title",
              "set_xlabel",
              "set_ylabel",
              "label_dist.keys",
              "label_dist.values",
              "self.create_advanced_visualizations",
              "len",
              "confusion_matrix",
              "sorted",
              "plt.figure",
              "sns.heatmap",
              "plt.title",
              "plt.ylabel",
              "plt.xlabel",
              "plt.tight_layout",
              "plt.savefig",
              "plt.close",
              "list",
              "set",
              "set",
              "unique",
              "unique"
            ],
            "called_by": [],
            "complexity": 4,
            "line_count": 69
          },
          "LLMEvaluator.create_advanced_visualizations": {
            "type": "method",
            "calls": [
              "logger.info",
              "k.replace",
              "plt.figure",
              "plt.subplot",
              "plt.subplot",
              "plt.tight_layout",
              "plt.savefig",
              "plt.close",
              "logger.warning",
              "plt.figure",
              "plt.subplot",
              "plt.plot",
              "plt.scatter",
              "plt.xlabel",
              "plt.ylabel",
              "plt.title",
              "plt.legend",
              "plt.grid",
              "plt.subplot",
              "plt.subplot",
              "plt.subplot",
              "metrics.items",
              "plt.tight_layout",
              "plt.savefig",
              "plt.close",
              "metrics.items",
              "k.startswith",
              "plt.bar",
              "plt.title",
              "plt.ylabel",
              "plt.ylim",
              "list",
              "plt.bar",
              "plt.title",
              "plt.xlabel",
              "plt.ylabel",
              "calibration_metrics.append",
              "calibration_values.append",
              "calibration_metrics.append",
              "calibration_values.append",
              "calibration_metrics.append",
              "calibration_values.append",
              "plt.bar",
              "plt.title",
              "plt.ylabel",
              "plt.bar",
              "plt.title",
              "plt.ylabel",
              "plt.bar",
              "plt.title",
              "plt.xticks",
              "plt.ylabel",
              "conformal_metrics.items",
              "k.startswith",
              "int",
              "size_metrics.values",
              "key.startswith",
              "isinstance",
              "risk_metrics.keys",
              "risk_metrics.values",
              "size_metrics.keys",
              "key.replace",
              "k.split"
            ],
            "called_by": [],
            "complexity": 14,
            "line_count": 103
          },
          "LLMEvaluator.create_text_report": {
            "type": "method",
            "calls": [
              "items",
              "items",
              "metrics.items",
              "metrics.items",
              "metrics.items",
              "metrics.items",
              "open",
              "f.write",
              "key.startswith",
              "isinstance",
              "title",
              "key.startswith",
              "isinstance",
              "title",
              "key.startswith",
              "isinstance",
              "title",
              "key.startswith",
              "isinstance",
              "title",
              "replace",
              "replace",
              "replace",
              "replace",
              "key.replace",
              "key.replace",
              "key.replace",
              "key.replace"
            ],
            "called_by": [],
            "complexity": 14,
            "line_count": 82
          },
          "main": {
            "type": "function",
            "calls": [
              "argparse.ArgumentParser",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.parse_args",
              "args.test_data.endswith",
              "LLMEvaluator",
              "evaluator.evaluate_dataset",
              "print",
              "print",
              "print",
              "print",
              "print",
              "print",
              "print",
              "print",
              "print",
              "Dataset.from_list",
              "Dataset.load_from_disk",
              "open",
              "json.load"
            ],
            "called_by": [],
            "complexity": 1,
            "line_count": 36
          },
          "load_test_data": {
            "type": "function",
            "calls": [
              "Path",
              "file_path.exists",
              "FileNotFoundError",
              "open",
              "json.load",
              "pd.read_csv",
              "df.to_dict",
              "ValueError"
            ],
            "called_by": [],
            "complexity": 3,
            "line_count": 25
          },
          "compute_metrics": {
            "type": "function",
            "calls": [
              "sum",
              "len",
              "len",
              "ValueError",
              "len",
              "len",
              "accuracy_score",
              "list",
              "len",
              "zip",
              "zip",
              "set",
              "len",
              "precision_score",
              "recall_score",
              "f1_score",
              "precision_score",
              "recall_score",
              "f1_score",
              "np.mean",
              "np.std",
              "len",
              "len",
              "len",
              "abs",
              "zip",
              "enumerate",
              "np.mean",
              "np.mean"
            ],
            "called_by": [
              "generate_report"
            ],
            "complexity": 8,
            "line_count": 72
          },
          "create_visualizations": {
            "type": "function",
            "calls": [
              "len",
              "len",
              "zip",
              "zip",
              "len",
              "sorted",
              "confusion_matrix",
              "plt.figure",
              "sns.heatmap",
              "plt.title",
              "plt.ylabel",
              "plt.xlabel",
              "plt.close",
              "len",
              "list",
              "plt.savefig",
              "logger.warning",
              "plt.figure",
              "plt.hist",
              "plt.title",
              "plt.xlabel",
              "plt.ylabel",
              "plt.close",
              "logger.warning",
              "len",
              "len",
              "np.linspace",
              "zip",
              "logger.warning",
              "set",
              "plt.savefig",
              "zip",
              "enumerate",
              "any",
              "plt.figure",
              "plt.plot",
              "plt.plot",
              "plt.xlabel",
              "plt.ylabel",
              "plt.title",
              "plt.legend",
              "plt.grid",
              "plt.close",
              "Path",
              "np.mean",
              "np.mean",
              "bin_confidences.append",
              "bin_accuracies.append",
              "plt.savefig",
              "Path",
              "Path",
              "enumerate",
              "enumerate"
            ],
            "called_by": [],
            "complexity": 15,
            "line_count": 100
          },
          "generate_report": {
            "type": "function",
            "calls": [
              "compute_metrics",
              "isoformat",
              "sum",
              "logger.info",
              "len",
              "metrics.get",
              "metrics.get",
              "list",
              "open",
              "json.dump",
              "datetime.now",
              "np.mean",
              "np.std",
              "np.min",
              "np.max",
              "set",
              "len"
            ],
            "called_by": [],
            "complexity": 5,
            "line_count": 69
          }
        },
        "data_flow": {
          "global_variables": [
            "logger"
          ],
          "shared_state": {},
          "parameter_flow": {
            "LLMEvaluator.__init__": {
              "parameters": [
                "self",
                "model",
                "tokenizer",
                "model_path",
                "config_path"
              ],
              "parameter_count": 5,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "LLMEvaluator.load_config": {
              "parameters": [
                "self"
              ],
              "parameter_count": 1,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "LLMEvaluator.load_model": {
              "parameters": [
                "self"
              ],
              "parameter_count": 1,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "LLMEvaluator.evaluate_single": {
              "parameters": [
                "self",
                "text",
                "parse_json"
              ],
              "parameter_count": 3,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "LLMEvaluator.predict_single": {
              "parameters": [
                "self",
                "text",
                "metadata"
              ],
              "parameter_count": 3,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "LLMEvaluator.evaluate_dataset": {
              "parameters": [
                "self",
                "dataset",
                "batch_size",
                "output_path"
              ],
              "parameter_count": 4,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "LLMEvaluator.compute_metrics": {
              "parameters": [
                "self",
                "predictions",
                "ground_truth",
                "detailed_results"
              ],
              "parameter_count": 4,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "LLMEvaluator._label_to_index": {
              "parameters": [
                "self",
                "label"
              ],
              "parameter_count": 2,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "LLMEvaluator.get_label_distribution": {
              "parameters": [
                "self",
                "labels"
              ],
              "parameter_count": 2,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "LLMEvaluator.create_visualizations": {
              "parameters": [
                "self",
                "detailed_results",
                "metrics",
                "output_dir"
              ],
              "parameter_count": 4,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "LLMEvaluator.create_advanced_visualizations": {
              "parameters": [
                "self",
                "metrics",
                "output_dir"
              ],
              "parameter_count": 3,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "LLMEvaluator.create_text_report": {
              "parameters": [
                "self",
                "metrics",
                "output_dir"
              ],
              "parameter_count": 3,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            }
          },
          "return_patterns": {
            "LLMEvaluator.__init__": {
              "return_statements": 0,
              "returns_none": false,
              "return_complexity": "single"
            },
            "LLMEvaluator.load_config": {
              "return_statements": 0,
              "returns_none": false,
              "return_complexity": "single"
            },
            "LLMEvaluator.load_model": {
              "return_statements": 0,
              "returns_none": false,
              "return_complexity": "single"
            },
            "LLMEvaluator.evaluate_single": {
              "return_statements": 1,
              "returns_none": false,
              "return_complexity": "single"
            },
            "LLMEvaluator.predict_single": {
              "return_statements": 3,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "LLMEvaluator.evaluate_dataset": {
              "return_statements": 2,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "LLMEvaluator.compute_metrics": {
              "return_statements": 2,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "LLMEvaluator._label_to_index": {
              "return_statements": 1,
              "returns_none": false,
              "return_complexity": "single"
            },
            "LLMEvaluator.get_label_distribution": {
              "return_statements": 1,
              "returns_none": false,
              "return_complexity": "single"
            },
            "LLMEvaluator.create_visualizations": {
              "return_statements": 0,
              "returns_none": false,
              "return_complexity": "single"
            },
            "LLMEvaluator.create_advanced_visualizations": {
              "return_statements": 0,
              "returns_none": false,
              "return_complexity": "single"
            },
            "LLMEvaluator.create_text_report": {
              "return_statements": 0,
              "returns_none": false,
              "return_complexity": "single"
            }
          }
        },
        "analysis_metadata": {
          "timestamp": "2025-08-14T18:24:47.638438Z",
          "analyzer_version": "1.0.0",
          "file_analyzed": "C:\\Users\\Kevin\\fine_tune_llm\\backups\\god_classes\\evaluate_backup_20250814_121303.py",
          "analysis_complete": true
        }
      },
      "summary_report": {
        "file_summary": {
          "file_path": "C:\\Users\\Kevin\\fine_tune_llm\\backups\\god_classes\\evaluate_backup_20250814_121303.py",
          "total_classes": 1,
          "total_methods": 12,
          "total_functions": 5,
          "total_imports": 10,
          "lines_of_code": 885,
          "total_complexity": 58
        },
        "complexity_analysis": {
          "average_methods_per_class": 12.0,
          "most_complex_class": {
            "name": "LLMEvaluator",
            "complexity": 58,
            "method_count": 12,
            "line_count": 703
          },
          "most_connected_method": {
            "name": "LLMEvaluator.compute_metrics",
            "total_connections": 83,
            "outgoing_calls": 83,
            "incoming_calls": 0
          },
          "dependency_density": 1.0
        },
        "decomposition_candidates": [
          {
            "class_name": "LLMEvaluator",
            "reason": "god_class",
            "method_count": 12,
            "complexity": 58,
            "line_count": 703,
            "decomposition_suggestions": [
              "Extract create-related methods into separate class"
            ]
          }
        ],
        "external_dependencies": {
          "third_party_imports": [
            "numpy",
            "pandas",
            "torch",
            "matplotlib.pyplot",
            "seaborn"
          ],
          "high_coupling_indicators": [
            "Highly connected methods: 11"
          ]
        }
      }
    },
    {
      "class_name": "TrainingDashboard",
      "functionality_map": {
        "file_info": {
          "path": "C:\\Users\\Kevin\\fine_tune_llm\\backups\\god_classes\\dashboard_backup_20250814_123055.py",
          "size": 35114,
          "lines": 891,
          "non_empty_lines": 717,
          "comment_lines": 71
        },
        "imports": {
          "stdlib": [
            "json",
            "time",
            "threading",
            "logging",
            "sys"
          ],
          "third_party": [
            "numpy",
            "streamlit",
            "plotly.graph_objects",
            "plotly.express",
            "pandas"
          ],
          "local": [],
          "from_imports": {
            "pathlib": {
              "category": "stdlib",
              "items": [
                "Path"
              ]
            },
            "typing": {
              "category": "stdlib",
              "items": [
                "Dict",
                "List",
                "Optional",
                "Any"
              ]
            },
            "datetime": {
              "category": "stdlib",
              "items": [
                "datetime",
                "timedelta"
              ]
            },
            "dataclasses": {
              "category": "local",
              "items": [
                "dataclass",
                "asdict"
              ]
            },
            "plotly.subplots": {
              "category": "third_party",
              "items": [
                "make_subplots"
              ]
            },
            "metrics": {
              "category": "local",
              "items": [
                "MetricsAggregator"
              ]
            },
            "conformal": {
              "category": "local",
              "items": [
                "ConformalPredictor",
                "RiskControlledPredictor"
              ]
            }
          },
          "import_aliases": {
            "np": "numpy",
            "st": "streamlit",
            "go": "plotly.graph_objects",
            "px": "plotly.express",
            "pd": "pandas"
          }
        },
        "classes": {
          "TrainingMetrics": {
            "name": "TrainingMetrics",
            "line_start": 42,
            "line_end": 83,
            "bases": [],
            "decorators": [
              "dataclass"
            ],
            "methods": {},
            "properties": [],
            "class_variables": [
              "epoch",
              "step",
              "timestamp",
              "train_loss",
              "eval_loss",
              "learning_rate",
              "accuracy",
              "f1_score",
              "precision",
              "recall",
              "ece",
              "mce",
              "brier_score",
              "mean_confidence",
              "confidence_accuracy_correlation",
              "abstention_rate",
              "effective_accuracy",
              "abstention_cost",
              "conformal_coverage",
              "conformal_avg_set_size",
              "average_risk",
              "risk_reduction",
              "gpu_memory_used",
              "training_speed"
            ],
            "instance_variables": "set()",
            "docstring": "Structure for training metrics.",
            "complexity_metrics": {
              "method_count": 0,
              "line_count": 42,
              "cyclomatic_complexity": 0,
              "public_methods": 0,
              "private_methods": 0,
              "property_count": 0,
              "inheritance_depth": 0
            }
          },
          "TrainingDashboard": {
            "name": "TrainingDashboard",
            "line_start": 86,
            "line_end": 856,
            "bases": [],
            "decorators": [],
            "methods": {
              "__init__": {
                "name": "__init__",
                "line_start": 89,
                "line_end": 124,
                "line_count": 36,
                "parameters": [
                  "self",
                  "metrics_path",
                  "update_interval",
                  "max_history"
                ],
                "decorators": [],
                "docstring": "Initialize training dashboard.\n\nArgs:\n    metrics_path: Path to metrics file for monitoring\n    update_interval: Update interval in seconds\n    max_history: Maximum number of metrics to keep in history",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "logger.info",
                  "Path",
                  "MetricsAggregator",
                  "ConformalPredictor",
                  "RiskControlledPredictor"
                ],
                "complexity": 1,
                "return_count": 0,
                "returns_none": false
              },
              "start_monitoring": {
                "name": "start_monitoring",
                "line_start": 126,
                "line_end": 137,
                "line_count": 12,
                "parameters": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Start monitoring training metrics.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "threading.Thread",
                  "self.monitor_thread.start",
                  "logger.info",
                  "logger.warning"
                ],
                "complexity": 1,
                "return_count": 2,
                "returns_none": false
              },
              "stop_monitoring": {
                "name": "stop_monitoring",
                "line_start": 139,
                "line_end": 144,
                "line_count": 6,
                "parameters": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Stop monitoring training metrics.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "logger.info",
                  "self.monitor_thread.join"
                ],
                "complexity": 1,
                "return_count": 0,
                "returns_none": false
              },
              "_monitor_loop": {
                "name": "_monitor_loop",
                "line_start": 146,
                "line_end": 154,
                "line_count": 9,
                "parameters": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Main monitoring loop.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "self._update_metrics",
                  "time.sleep",
                  "logger.error",
                  "time.sleep"
                ],
                "complexity": 2,
                "return_count": 0,
                "returns_none": false
              },
              "_update_metrics": {
                "name": "_update_metrics",
                "line_start": 156,
                "line_end": 224,
                "line_count": 69,
                "parameters": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Update metrics from file.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "self.metrics_path.exists",
                  "self.metrics_path.stat",
                  "open",
                  "json.load",
                  "isinstance",
                  "TrainingMetrics",
                  "self.metrics_history.append",
                  "logger.warning",
                  "len",
                  "latest_data.get",
                  "latest_data.get",
                  "latest_data.get",
                  "latest_data.get",
                  "latest_data.get",
                  "latest_data.get",
                  "latest_data.get",
                  "latest_data.get",
                  "latest_data.get",
                  "latest_data.get",
                  "latest_data.get",
                  "latest_data.get",
                  "latest_data.get",
                  "latest_data.get",
                  "latest_data.get",
                  "latest_data.get",
                  "latest_data.get",
                  "latest_data.get",
                  "latest_data.get",
                  "latest_data.get",
                  "latest_data.get",
                  "latest_data.get",
                  "time.time",
                  "latest_data.get",
                  "latest_data.get",
                  "latest_data.get",
                  "latest_data.get",
                  "latest_data.get"
                ],
                "complexity": 5,
                "return_count": 2,
                "returns_none": true
              },
              "add_metrics": {
                "name": "add_metrics",
                "line_start": 226,
                "line_end": 245,
                "line_count": 20,
                "parameters": [
                  "self",
                  "metrics_dict"
                ],
                "decorators": [],
                "docstring": "Add metrics manually (for testing or direct integration).",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "TrainingMetrics",
                  "self.metrics_history.append",
                  "len",
                  "logger.warning",
                  "metrics_dict.get",
                  "metrics_dict.get",
                  "time.time",
                  "len",
                  "metrics_dict.items",
                  "hasattr"
                ],
                "complexity": 2,
                "return_count": 0,
                "returns_none": false
              },
              "get_metrics_dataframe": {
                "name": "get_metrics_dataframe",
                "line_start": 247,
                "line_end": 258,
                "line_count": 12,
                "parameters": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Convert metrics history to pandas DataFrame.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "pd.DataFrame",
                  "pd.to_datetime",
                  "pd.DataFrame",
                  "asdict"
                ],
                "complexity": 1,
                "return_count": 2,
                "returns_none": false
              },
              "create_dashboard": {
                "name": "create_dashboard",
                "line_start": 260,
                "line_end": 331,
                "line_count": 72,
                "parameters": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Create Streamlit dashboard.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "st.set_page_config",
                  "st.title",
                  "st.markdown",
                  "st.sidebar.header",
                  "st.sidebar.checkbox",
                  "st.sidebar.slider",
                  "st.sidebar.markdown",
                  "st.sidebar.subheader",
                  "st.sidebar.markdown",
                  "st.sidebar.button",
                  "st.sidebar.markdown",
                  "self._render_current_status",
                  "self._render_training_plots",
                  "self._render_metrics_table",
                  "st.sidebar.button",
                  "self._update_metrics",
                  "st.sidebar.info",
                  "st.warning",
                  "self._render_advanced_plots",
                  "self._render_risk_prediction_interface",
                  "time.sleep",
                  "st.experimental_rerun"
                ],
                "complexity": 7,
                "return_count": 2,
                "returns_none": true
              },
              "_render_current_status": {
                "name": "_render_current_status",
                "line_start": 333,
                "line_end": 398,
                "line_count": 66,
                "parameters": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Render current training status.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "st.header",
                  "st.columns",
                  "st.metric",
                  "st.metric",
                  "st.metric",
                  "st.metric",
                  "st.metric",
                  "st.metric",
                  "st.metric",
                  "st.metric",
                  "self._get_metric_delta",
                  "self._get_metric_delta",
                  "self._get_metric_delta",
                  "self._get_metric_delta",
                  "self._get_metric_delta",
                  "self._get_metric_delta"
                ],
                "complexity": 8,
                "return_count": 1,
                "returns_none": true
              },
              "_get_metric_delta": {
                "name": "_get_metric_delta",
                "line_start": 400,
                "line_end": 410,
                "line_count": 11,
                "parameters": [
                  "self",
                  "metric_name"
                ],
                "decorators": [],
                "docstring": "Get delta for a metric compared to previous value.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "getattr",
                  "getattr",
                  "len"
                ],
                "complexity": 2,
                "return_count": 3,
                "returns_none": false
              },
              "_render_training_plots": {
                "name": "_render_training_plots",
                "line_start": 412,
                "line_end": 465,
                "line_count": 54,
                "parameters": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Render core training plots.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "st.header",
                  "self.get_metrics_dataframe",
                  "st.columns",
                  "st.subheader",
                  "st.warning",
                  "st.subheader",
                  "st.subheader",
                  "go.Figure",
                  "fig_metrics.update_layout",
                  "st.plotly_chart",
                  "any",
                  "px.line",
                  "fig_loss.update_layout",
                  "st.plotly_chart",
                  "any",
                  "px.line",
                  "fig_lr.update_layout",
                  "st.plotly_chart",
                  "fig_metrics.add_trace",
                  "any",
                  "go.Scatter",
                  "dict",
                  "notna",
                  "notna",
                  "notna",
                  "title",
                  "dict",
                  "metric.replace"
                ],
                "complexity": 5,
                "return_count": 1,
                "returns_none": true
              },
              "_render_advanced_plots": {
                "name": "_render_advanced_plots",
                "line_start": 467,
                "line_end": 588,
                "line_count": 122,
                "parameters": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Render advanced metrics plots.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "st.header",
                  "self.get_metrics_dataframe",
                  "st.columns",
                  "st.columns",
                  "st.subheader",
                  "st.subheader",
                  "st.subheader",
                  "st.subheader",
                  "go.Figure",
                  "fig_cal.update_layout",
                  "st.plotly_chart",
                  "make_subplots",
                  "fig_conf.update_xaxes",
                  "fig_conf.update_yaxes",
                  "fig_conf.update_yaxes",
                  "fig_conf.update_layout",
                  "st.plotly_chart",
                  "go.Figure",
                  "fig_abs.update_layout",
                  "st.plotly_chart",
                  "go.Figure",
                  "fig_risk.update_layout",
                  "st.plotly_chart",
                  "fig_cal.add_trace",
                  "fig_conf.add_trace",
                  "fig_conf.add_trace",
                  "fig_abs.add_trace",
                  "fig_risk.add_trace",
                  "any",
                  "go.Scatter",
                  "any",
                  "go.Scatter",
                  "go.Scatter",
                  "any",
                  "go.Scatter",
                  "dict",
                  "any",
                  "go.Scatter",
                  "notna",
                  "replace",
                  "dict",
                  "notna",
                  "dict",
                  "dict",
                  "notna",
                  "title",
                  "dict",
                  "notna",
                  "title",
                  "dict",
                  "metric.upper",
                  "metric.replace",
                  "metric.replace"
                ],
                "complexity": 10,
                "return_count": 1,
                "returns_none": true
              },
              "_render_risk_prediction_interface": {
                "name": "_render_risk_prediction_interface",
                "line_start": 590,
                "line_end": 698,
                "line_count": 109,
                "parameters": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Render risk-controlled prediction interface.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "st.header",
                  "st.markdown",
                  "st.columns",
                  "st.button",
                  "st.subheader",
                  "st.subheader",
                  "st.text_area",
                  "st.subheader",
                  "st.slider",
                  "st.slider",
                  "st.subheader",
                  "st.number_input",
                  "st.number_input",
                  "st.columns",
                  "user_text.strip",
                  "st.warning",
                  "self._make_risk_controlled_prediction",
                  "st.metric",
                  "st.metric",
                  "st.metric"
                ],
                "complexity": 5,
                "return_count": 0,
                "returns_none": false
              },
              "_make_risk_controlled_prediction": {
                "name": "_make_risk_controlled_prediction",
                "line_start": 700,
                "line_end": 814,
                "line_count": 115,
                "parameters": [
                  "self",
                  "text",
                  "confidence_level",
                  "risk_tolerance",
                  "fp_cost",
                  "fn_cost"
                ],
                "decorators": [],
                "docstring": "Make a risk-controlled prediction with the given parameters.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "st.subheader",
                  "np.array",
                  "st.info",
                  "st.columns",
                  "st.subheader",
                  "st.write",
                  "enumerate",
                  "st.write",
                  "st.subheader",
                  "st.subheader",
                  "st.columns",
                  "st.subheader",
                  "np.argmax",
                  "st.write",
                  "st.write",
                  "pd.DataFrame",
                  "st.bar_chart",
                  "st.subheader",
                  "np.array",
                  "np.argmin",
                  "st.write",
                  "st.write",
                  "st.write",
                  "np.argsort",
                  "prediction_set.append",
                  "st.write",
                  "st.error",
                  "st.write",
                  "st.write",
                  "st.metric",
                  "st.metric",
                  "st.metric",
                  "st.error",
                  "prob_df.set_index",
                  "labels.index",
                  "st.success",
                  "st.warning",
                  "np.sum",
                  "np.sum",
                  "len",
                  "np.partition",
                  "np.log",
                  "str"
                ],
                "complexity": 6,
                "return_count": 0,
                "returns_none": false
              },
              "_render_metrics_table": {
                "name": "_render_metrics_table",
                "line_start": 816,
                "line_end": 856,
                "line_count": 41,
                "parameters": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Render detailed metrics table.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "st.header",
                  "self.get_metrics_dataframe",
                  "copy",
                  "dt.strftime",
                  "st.button",
                  "st.warning",
                  "st.dataframe",
                  "df.to_csv",
                  "st.download_button",
                  "df.tail",
                  "display_df.select_dtypes",
                  "sort_values",
                  "round",
                  "strftime",
                  "datetime.now"
                ],
                "complexity": 5,
                "return_count": 1,
                "returns_none": true
              }
            },
            "properties": [],
            "class_variables": [],
            "instance_variables": "{'metrics_aggregator', 'max_history', 'is_running', 'last_update', 'monitor_thread', 'risk_controlled_predictor', 'conformal_predictor', 'metrics_path', 'update_interval'}",
            "docstring": "Real-time training dashboard with advanced metrics.",
            "complexity_metrics": {
              "method_count": 15,
              "line_count": 771,
              "cyclomatic_complexity": 61,
              "public_methods": 5,
              "private_methods": 10,
              "property_count": 0,
              "inheritance_depth": 0
            }
          }
        },
        "functions": {
          "run_dashboard": {
            "name": "run_dashboard",
            "line_start": 859,
            "line_end": 882,
            "line_count": 24,
            "parameters": [
              "metrics_path",
              "port"
            ],
            "decorators": [],
            "docstring": "Run the training dashboard.\n\nArgs:\n    metrics_path: Path to metrics file\n    port: Port to run Streamlit on",
            "has_args": false,
            "has_kwargs": false,
            "is_async": false,
            "calls_made": [
              "TrainingDashboard",
              "dashboard.start_monitoring",
              "logger.error",
              "dashboard.create_dashboard",
              "dashboard.stop_monitoring",
              "logger.info"
            ],
            "complexity": 2,
            "return_count": 2,
            "returns_none": false
          }
        },
        "dependencies": {
          "internal_calls": {
            "global": [
              "logging.getLogger",
              "run_dashboard",
              "int",
              "len",
              "len"
            ],
            "run_dashboard": [
              "TrainingDashboard",
              "dashboard.start_monitoring",
              "logger.error",
              "dashboard.create_dashboard",
              "dashboard.stop_monitoring",
              "logger.info"
            ],
            "TrainingDashboard.__init__": [
              "logger.info",
              "Path",
              "MetricsAggregator",
              "ConformalPredictor",
              "RiskControlledPredictor"
            ],
            "TrainingDashboard.start_monitoring": [
              "threading.Thread",
              "self.monitor_thread.start",
              "logger.info",
              "logger.warning"
            ],
            "TrainingDashboard.stop_monitoring": [
              "logger.info",
              "self.monitor_thread.join"
            ],
            "TrainingDashboard.get_metrics_dataframe": [
              "pd.DataFrame",
              "pd.to_datetime",
              "pd.DataFrame",
              "asdict"
            ],
            "TrainingDashboard.create_dashboard": [
              "st.set_page_config",
              "st.title",
              "st.markdown",
              "st.sidebar.header",
              "st.sidebar.checkbox",
              "st.sidebar.slider",
              "st.sidebar.markdown",
              "st.sidebar.subheader",
              "st.sidebar.markdown",
              "st.sidebar.button",
              "st.sidebar.markdown",
              "self._render_current_status",
              "self._render_training_plots",
              "self._render_metrics_table",
              "st.sidebar.button",
              "self._update_metrics",
              "st.sidebar.info",
              "st.warning",
              "self._render_advanced_plots",
              "self._render_risk_prediction_interface",
              "time.sleep",
              "st.experimental_rerun"
            ],
            "TrainingDashboard._render_current_status": [
              "st.header",
              "st.columns",
              "st.metric",
              "st.metric",
              "st.metric",
              "st.metric",
              "st.metric",
              "st.metric",
              "st.metric",
              "st.metric",
              "self._get_metric_delta",
              "self._get_metric_delta",
              "self._get_metric_delta",
              "self._get_metric_delta",
              "self._get_metric_delta",
              "self._get_metric_delta"
            ],
            "TrainingDashboard._get_metric_delta": [
              "getattr",
              "getattr",
              "len"
            ],
            "TrainingDashboard._render_training_plots": [
              "st.header",
              "self.get_metrics_dataframe",
              "st.columns",
              "st.subheader",
              "st.warning",
              "st.subheader",
              "st.subheader",
              "go.Figure",
              "fig_metrics.update_layout",
              "st.plotly_chart",
              "any",
              "px.line",
              "fig_loss.update_layout",
              "st.plotly_chart",
              "any",
              "px.line",
              "fig_lr.update_layout",
              "st.plotly_chart",
              "fig_metrics.add_trace",
              "any",
              "go.Scatter",
              "dict",
              "notna",
              "notna",
              "notna",
              "title",
              "dict",
              "metric.replace"
            ],
            "TrainingDashboard._render_advanced_plots": [
              "st.header",
              "self.get_metrics_dataframe",
              "st.columns",
              "st.columns",
              "st.subheader",
              "st.subheader",
              "st.subheader",
              "st.subheader",
              "go.Figure",
              "fig_cal.update_layout",
              "st.plotly_chart",
              "make_subplots",
              "fig_conf.update_xaxes",
              "fig_conf.update_yaxes",
              "fig_conf.update_yaxes",
              "fig_conf.update_layout",
              "st.plotly_chart",
              "go.Figure",
              "fig_abs.update_layout",
              "st.plotly_chart",
              "go.Figure",
              "fig_risk.update_layout",
              "st.plotly_chart",
              "fig_cal.add_trace",
              "fig_conf.add_trace",
              "fig_conf.add_trace",
              "fig_abs.add_trace",
              "fig_risk.add_trace",
              "any",
              "go.Scatter",
              "any",
              "go.Scatter",
              "go.Scatter",
              "any",
              "go.Scatter",
              "dict",
              "any",
              "go.Scatter",
              "notna",
              "replace",
              "dict",
              "notna",
              "dict",
              "dict",
              "notna",
              "title",
              "dict",
              "notna",
              "title",
              "dict",
              "metric.upper",
              "metric.replace",
              "metric.replace"
            ],
            "TrainingDashboard._render_risk_prediction_interface": [
              "st.header",
              "st.markdown",
              "st.columns",
              "st.button",
              "st.subheader",
              "st.subheader",
              "st.text_area",
              "st.subheader",
              "st.slider",
              "st.slider",
              "st.subheader",
              "st.number_input",
              "st.number_input",
              "st.columns",
              "user_text.strip",
              "st.warning",
              "self._make_risk_controlled_prediction",
              "st.metric",
              "st.metric",
              "st.metric"
            ],
            "TrainingDashboard._render_metrics_table": [
              "st.header",
              "self.get_metrics_dataframe",
              "copy",
              "dt.strftime",
              "st.button",
              "st.warning",
              "st.dataframe",
              "df.to_csv",
              "st.download_button",
              "df.tail",
              "display_df.select_dtypes",
              "sort_values",
              "round",
              "strftime",
              "datetime.now"
            ],
            "TrainingDashboard.add_metrics": [
              "TrainingMetrics",
              "self.metrics_history.append",
              "len",
              "logger.warning",
              "metrics_dict.get",
              "metrics_dict.get",
              "time.time",
              "len",
              "metrics_dict.items",
              "hasattr"
            ],
            "TrainingDashboard._make_risk_controlled_prediction": [
              "st.subheader",
              "np.array",
              "st.info",
              "st.columns",
              "st.subheader",
              "st.write",
              "enumerate",
              "st.write",
              "st.subheader",
              "st.subheader",
              "st.columns",
              "st.subheader",
              "np.argmax",
              "st.write",
              "st.write",
              "pd.DataFrame",
              "st.bar_chart",
              "st.subheader",
              "np.array",
              "np.argmin",
              "st.write",
              "st.write",
              "st.write",
              "np.argsort",
              "prediction_set.append",
              "st.write",
              "st.error",
              "st.write",
              "st.write",
              "st.metric",
              "st.metric",
              "st.metric",
              "st.error",
              "prob_df.set_index",
              "labels.index",
              "st.success",
              "st.warning",
              "np.sum",
              "np.sum",
              "len",
              "np.partition",
              "np.log",
              "str"
            ],
            "TrainingDashboard._monitor_loop": [
              "self._update_metrics",
              "time.sleep",
              "logger.error",
              "time.sleep"
            ],
            "TrainingDashboard._update_metrics": [
              "self.metrics_path.exists",
              "self.metrics_path.stat",
              "open",
              "json.load",
              "isinstance",
              "TrainingMetrics",
              "self.metrics_history.append",
              "logger.warning",
              "len",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "time.time",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get"
            ]
          },
          "external_calls": {},
          "attribute_access": {
            "global": [
              "logging.getLogger",
              "sys.argv",
              "sys.argv",
              "sys.argv",
              "sys.argv"
            ],
            "TrainingDashboard.get_metrics_dataframe": [
              "pd.DataFrame",
              "self.metrics_history",
              "pd.DataFrame",
              "pd.to_datetime",
              "pd.DataFrame",
              "self.metrics_history"
            ],
            "TrainingDashboard.__init__": [
              "self.metrics_path",
              "self.update_interval",
              "self.max_history",
              "self.metrics_history",
              "self.current_metrics",
              "self.is_running",
              "self.last_update",
              "self.monitor_thread",
              "self.metrics_path",
              "self.metrics_aggregator",
              "self.conformal_predictor",
              "self.risk_controlled_predictor",
              "self.metrics_aggregator",
              "self.conformal_predictor",
              "self.risk_controlled_predictor",
              "logger.info",
              "self.metrics_path"
            ],
            "TrainingDashboard.start_monitoring": [
              "self.is_running",
              "self.monitor_thread",
              "self.monitor_thread.daemon",
              "threading.Thread",
              "self.monitor_thread",
              "self.monitor_thread.start",
              "logger.info",
              "logger.warning",
              "self._monitor_loop",
              "self.monitor_thread"
            ],
            "TrainingDashboard.stop_monitoring": [
              "self.is_running",
              "self.monitor_thread",
              "logger.info",
              "self.monitor_thread.join",
              "self.monitor_thread"
            ],
            "TrainingDashboard._monitor_loop": [
              "self.is_running",
              "self._update_metrics",
              "time.sleep",
              "self.update_interval",
              "logger.error",
              "time.sleep",
              "self.update_interval"
            ],
            "TrainingDashboard._render_training_plots": [
              "df.empty",
              "st.header",
              "self.get_metrics_dataframe",
              "st.columns",
              "st.subheader",
              "st.warning",
              "st.subheader",
              "st.subheader",
              "go.Figure",
              "fig_metrics.update_layout",
              "st.plotly_chart",
              "df.columns",
              "any",
              "px.line",
              "fig_loss.update_layout",
              "st.plotly_chart",
              "df.columns",
              "any",
              "px.line",
              "fig_lr.update_layout",
              "st.plotly_chart",
              "fig_metrics.add_trace",
              "df.columns",
              "any",
              "go.Scatter",
              "notna",
              "notna",
              "notna",
              "title",
              "metric.replace"
            ],
            "TrainingDashboard._render_advanced_plots": [
              "df.empty",
              "st.header",
              "self.get_metrics_dataframe",
              "st.columns",
              "st.columns",
              "st.subheader",
              "st.subheader",
              "st.subheader",
              "st.subheader",
              "go.Figure",
              "fig_cal.update_layout",
              "st.plotly_chart",
              "fig_conf.update_xaxes",
              "fig_conf.update_yaxes",
              "fig_conf.update_yaxes",
              "fig_conf.update_layout",
              "st.plotly_chart",
              "go.Figure",
              "fig_abs.update_layout",
              "st.plotly_chart",
              "go.Figure",
              "fig_risk.update_layout",
              "st.plotly_chart",
              "fig_cal.add_trace",
              "fig_conf.add_trace",
              "fig_conf.add_trace",
              "fig_abs.add_trace",
              "fig_risk.add_trace",
              "df.columns",
              "any",
              "go.Scatter",
              "df.columns",
              "any",
              "go.Scatter",
              "go.Scatter",
              "df.columns",
              "any",
              "go.Scatter",
              "df.columns",
              "any",
              "go.Scatter",
              "notna",
              "replace",
              "notna",
              "notna",
              "title",
              "notna",
              "title",
              "metric.upper",
              "metric.replace",
              "metric.replace"
            ],
            "TrainingDashboard._render_metrics_table": [
              "df.empty",
              "st.header",
              "self.get_metrics_dataframe",
              "copy",
              "dt.strftime",
              "columns",
              "st.button",
              "st.warning",
              "dt",
              "st.dataframe",
              "df.to_csv",
              "st.download_button",
              "df.tail",
              "display_df.columns",
              "display_df.select_dtypes",
              "display_df.columns",
              "sort_values",
              "round",
              "np.number",
              "strftime",
              "datetime.now"
            ],
            "run_dashboard": [
              "dashboard.start_monitoring",
              "logger.error",
              "dashboard.create_dashboard",
              "dashboard.stop_monitoring",
              "logger.info"
            ],
            "TrainingDashboard._update_metrics": [
              "st_mtime",
              "self.last_update",
              "self.metrics_path",
              "self.last_update",
              "self.current_metrics",
              "self.metrics_path.exists",
              "self.metrics_path.stat",
              "self.metrics_path",
              "json.load",
              "self.metrics_history.append",
              "self.max_history",
              "self.metrics_history",
              "logger.warning",
              "self.metrics_path",
              "self.metrics_path",
              "self.metrics_history",
              "self.metrics_history",
              "self.metrics_history",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "time.time",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "self.max_history"
            ],
            "TrainingDashboard.add_metrics": [
              "self.current_metrics",
              "self.metrics_history.append",
              "self.max_history",
              "self.metrics_history",
              "self.metrics_history",
              "self.metrics_history",
              "self.metrics_history",
              "logger.warning",
              "metrics_dict.get",
              "metrics_dict.get",
              "time.time",
              "self.metrics_history",
              "self.max_history",
              "metrics_dict.items"
            ],
            "TrainingDashboard.create_dashboard": [
              "st.set_page_config",
              "st.title",
              "st.markdown",
              "st.sidebar.header",
              "st.sidebar.checkbox",
              "st.sidebar.slider",
              "self.update_interval",
              "st.sidebar.markdown",
              "st.sidebar.subheader",
              "st.sidebar.markdown",
              "st.sidebar.button",
              "st.sidebar.markdown",
              "self.metrics_history",
              "self._render_current_status",
              "self._render_training_plots",
              "self._render_metrics_table",
              "st.sidebar",
              "st.sidebar",
              "st.sidebar",
              "st.sidebar.button",
              "self._update_metrics",
              "st.sidebar",
              "st.sidebar",
              "st.sidebar",
              "st.sidebar",
              "st.sidebar.info",
              "st.sidebar",
              "st.warning",
              "self._render_advanced_plots",
              "self._render_risk_prediction_interface",
              "time.sleep",
              "st.experimental_rerun",
              "st.sidebar",
              "st.sidebar"
            ],
            "TrainingDashboard._render_current_status": [
              "self.current_metrics",
              "st.header",
              "st.columns",
              "self.current_metrics.train_loss",
              "self.current_metrics.accuracy",
              "self.current_metrics.learning_rate",
              "st.metric",
              "self.current_metrics",
              "self.current_metrics",
              "self.current_metrics",
              "self.current_metrics.ece",
              "self.current_metrics.abstention_rate",
              "self.current_metrics.conformal_coverage",
              "self.current_metrics.average_risk",
              "st.metric",
              "st.metric",
              "st.metric",
              "self.current_metrics",
              "st.metric",
              "self.current_metrics",
              "st.metric",
              "self.current_metrics",
              "st.metric",
              "self.current_metrics",
              "st.metric",
              "self.current_metrics.epoch",
              "self.current_metrics",
              "self.current_metrics.train_loss",
              "self._get_metric_delta",
              "self.current_metrics.accuracy",
              "self._get_metric_delta",
              "self.current_metrics.learning_rate",
              "self.current_metrics.ece",
              "self._get_metric_delta",
              "self.current_metrics.abstention_rate",
              "self._get_metric_delta",
              "self.current_metrics.conformal_coverage",
              "self._get_metric_delta",
              "self.current_metrics.average_risk",
              "self._get_metric_delta",
              "self.current_metrics",
              "self.current_metrics",
              "self.current_metrics",
              "self.current_metrics",
              "self.current_metrics",
              "self.current_metrics",
              "self.current_metrics"
            ],
            "TrainingDashboard._get_metric_delta": [
              "self.current_metrics",
              "self.metrics_history",
              "self.metrics_history"
            ],
            "TrainingDashboard._render_risk_prediction_interface": [
              "st.header",
              "st.markdown",
              "st.columns",
              "st.button",
              "st.subheader",
              "self.current_metrics",
              "st.subheader",
              "st.text_area",
              "st.subheader",
              "st.slider",
              "st.slider",
              "st.subheader",
              "st.number_input",
              "st.number_input",
              "self.current_metrics.ece",
              "st.columns",
              "user_text.strip",
              "st.warning",
              "self._make_risk_controlled_prediction",
              "self.current_metrics",
              "st.metric",
              "self.current_metrics.conformal_coverage",
              "self.current_metrics.average_risk",
              "self.current_metrics.ece",
              "self.current_metrics",
              "st.metric",
              "self.current_metrics",
              "st.metric",
              "self.current_metrics",
              "self.current_metrics.ece",
              "self.current_metrics.ece",
              "self.current_metrics.conformal_coverage",
              "self.current_metrics.average_risk",
              "self.current_metrics",
              "self.current_metrics",
              "self.current_metrics",
              "self.current_metrics.conformal_coverage",
              "self.current_metrics.conformal_coverage",
              "self.current_metrics",
              "self.current_metrics.average_risk",
              "self.current_metrics.average_risk",
              "self.current_metrics",
              "self.current_metrics",
              "self.current_metrics",
              "self.current_metrics"
            ],
            "TrainingDashboard._make_risk_controlled_prediction": [
              "st.subheader",
              "np.array",
              "st.info",
              "st.columns",
              "st.subheader",
              "st.write",
              "st.write",
              "st.subheader",
              "st.subheader",
              "st.columns",
              "st.subheader",
              "np.argmax",
              "st.write",
              "st.write",
              "pd.DataFrame",
              "st.bar_chart",
              "st.subheader",
              "np.array",
              "np.argmin",
              "st.write",
              "st.write",
              "st.write",
              "np.argsort",
              "prediction_set.append",
              "st.write",
              "st.error",
              "st.write",
              "st.write",
              "st.metric",
              "st.metric",
              "st.metric",
              "st.error",
              "prob_df.set_index",
              "labels.index",
              "st.success",
              "st.warning",
              "np.sum",
              "np.sum",
              "np.partition",
              "np.log"
            ]
          },
          "inheritance_chain": {},
          "composition_relationships": {}
        },
        "call_graph": {
          "TrainingDashboard.__init__": {
            "type": "method",
            "calls": [
              "logger.info",
              "Path",
              "MetricsAggregator",
              "ConformalPredictor",
              "RiskControlledPredictor"
            ],
            "called_by": [],
            "complexity": 1,
            "line_count": 36
          },
          "TrainingDashboard.start_monitoring": {
            "type": "method",
            "calls": [
              "threading.Thread",
              "self.monitor_thread.start",
              "logger.info",
              "logger.warning"
            ],
            "called_by": [],
            "complexity": 1,
            "line_count": 12
          },
          "TrainingDashboard.stop_monitoring": {
            "type": "method",
            "calls": [
              "logger.info",
              "self.monitor_thread.join"
            ],
            "called_by": [],
            "complexity": 1,
            "line_count": 6
          },
          "TrainingDashboard._monitor_loop": {
            "type": "method",
            "calls": [
              "self._update_metrics",
              "time.sleep",
              "logger.error",
              "time.sleep"
            ],
            "called_by": [],
            "complexity": 2,
            "line_count": 9
          },
          "TrainingDashboard._update_metrics": {
            "type": "method",
            "calls": [
              "self.metrics_path.exists",
              "self.metrics_path.stat",
              "open",
              "json.load",
              "isinstance",
              "TrainingMetrics",
              "self.metrics_history.append",
              "logger.warning",
              "len",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "time.time",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get",
              "latest_data.get"
            ],
            "called_by": [],
            "complexity": 5,
            "line_count": 69
          },
          "TrainingDashboard.add_metrics": {
            "type": "method",
            "calls": [
              "TrainingMetrics",
              "self.metrics_history.append",
              "len",
              "logger.warning",
              "metrics_dict.get",
              "metrics_dict.get",
              "time.time",
              "len",
              "metrics_dict.items",
              "hasattr"
            ],
            "called_by": [],
            "complexity": 2,
            "line_count": 20
          },
          "TrainingDashboard.get_metrics_dataframe": {
            "type": "method",
            "calls": [
              "pd.DataFrame",
              "pd.to_datetime",
              "pd.DataFrame",
              "asdict"
            ],
            "called_by": [],
            "complexity": 1,
            "line_count": 12
          },
          "TrainingDashboard.create_dashboard": {
            "type": "method",
            "calls": [
              "st.set_page_config",
              "st.title",
              "st.markdown",
              "st.sidebar.header",
              "st.sidebar.checkbox",
              "st.sidebar.slider",
              "st.sidebar.markdown",
              "st.sidebar.subheader",
              "st.sidebar.markdown",
              "st.sidebar.button",
              "st.sidebar.markdown",
              "self._render_current_status",
              "self._render_training_plots",
              "self._render_metrics_table",
              "st.sidebar.button",
              "self._update_metrics",
              "st.sidebar.info",
              "st.warning",
              "self._render_advanced_plots",
              "self._render_risk_prediction_interface",
              "time.sleep",
              "st.experimental_rerun"
            ],
            "called_by": [],
            "complexity": 7,
            "line_count": 72
          },
          "TrainingDashboard._render_current_status": {
            "type": "method",
            "calls": [
              "st.header",
              "st.columns",
              "st.metric",
              "st.metric",
              "st.metric",
              "st.metric",
              "st.metric",
              "st.metric",
              "st.metric",
              "st.metric",
              "self._get_metric_delta",
              "self._get_metric_delta",
              "self._get_metric_delta",
              "self._get_metric_delta",
              "self._get_metric_delta",
              "self._get_metric_delta"
            ],
            "called_by": [],
            "complexity": 8,
            "line_count": 66
          },
          "TrainingDashboard._get_metric_delta": {
            "type": "method",
            "calls": [
              "getattr",
              "getattr",
              "len"
            ],
            "called_by": [],
            "complexity": 2,
            "line_count": 11
          },
          "TrainingDashboard._render_training_plots": {
            "type": "method",
            "calls": [
              "st.header",
              "self.get_metrics_dataframe",
              "st.columns",
              "st.subheader",
              "st.warning",
              "st.subheader",
              "st.subheader",
              "go.Figure",
              "fig_metrics.update_layout",
              "st.plotly_chart",
              "any",
              "px.line",
              "fig_loss.update_layout",
              "st.plotly_chart",
              "any",
              "px.line",
              "fig_lr.update_layout",
              "st.plotly_chart",
              "fig_metrics.add_trace",
              "any",
              "go.Scatter",
              "dict",
              "notna",
              "notna",
              "notna",
              "title",
              "dict",
              "metric.replace"
            ],
            "called_by": [],
            "complexity": 5,
            "line_count": 54
          },
          "TrainingDashboard._render_advanced_plots": {
            "type": "method",
            "calls": [
              "st.header",
              "self.get_metrics_dataframe",
              "st.columns",
              "st.columns",
              "st.subheader",
              "st.subheader",
              "st.subheader",
              "st.subheader",
              "go.Figure",
              "fig_cal.update_layout",
              "st.plotly_chart",
              "make_subplots",
              "fig_conf.update_xaxes",
              "fig_conf.update_yaxes",
              "fig_conf.update_yaxes",
              "fig_conf.update_layout",
              "st.plotly_chart",
              "go.Figure",
              "fig_abs.update_layout",
              "st.plotly_chart",
              "go.Figure",
              "fig_risk.update_layout",
              "st.plotly_chart",
              "fig_cal.add_trace",
              "fig_conf.add_trace",
              "fig_conf.add_trace",
              "fig_abs.add_trace",
              "fig_risk.add_trace",
              "any",
              "go.Scatter",
              "any",
              "go.Scatter",
              "go.Scatter",
              "any",
              "go.Scatter",
              "dict",
              "any",
              "go.Scatter",
              "notna",
              "replace",
              "dict",
              "notna",
              "dict",
              "dict",
              "notna",
              "title",
              "dict",
              "notna",
              "title",
              "dict",
              "metric.upper",
              "metric.replace",
              "metric.replace"
            ],
            "called_by": [],
            "complexity": 10,
            "line_count": 122
          },
          "TrainingDashboard._render_risk_prediction_interface": {
            "type": "method",
            "calls": [
              "st.header",
              "st.markdown",
              "st.columns",
              "st.button",
              "st.subheader",
              "st.subheader",
              "st.text_area",
              "st.subheader",
              "st.slider",
              "st.slider",
              "st.subheader",
              "st.number_input",
              "st.number_input",
              "st.columns",
              "user_text.strip",
              "st.warning",
              "self._make_risk_controlled_prediction",
              "st.metric",
              "st.metric",
              "st.metric"
            ],
            "called_by": [],
            "complexity": 5,
            "line_count": 109
          },
          "TrainingDashboard._make_risk_controlled_prediction": {
            "type": "method",
            "calls": [
              "st.subheader",
              "np.array",
              "st.info",
              "st.columns",
              "st.subheader",
              "st.write",
              "enumerate",
              "st.write",
              "st.subheader",
              "st.subheader",
              "st.columns",
              "st.subheader",
              "np.argmax",
              "st.write",
              "st.write",
              "pd.DataFrame",
              "st.bar_chart",
              "st.subheader",
              "np.array",
              "np.argmin",
              "st.write",
              "st.write",
              "st.write",
              "np.argsort",
              "prediction_set.append",
              "st.write",
              "st.error",
              "st.write",
              "st.write",
              "st.metric",
              "st.metric",
              "st.metric",
              "st.error",
              "prob_df.set_index",
              "labels.index",
              "st.success",
              "st.warning",
              "np.sum",
              "np.sum",
              "len",
              "np.partition",
              "np.log",
              "str"
            ],
            "called_by": [],
            "complexity": 6,
            "line_count": 115
          },
          "TrainingDashboard._render_metrics_table": {
            "type": "method",
            "calls": [
              "st.header",
              "self.get_metrics_dataframe",
              "copy",
              "dt.strftime",
              "st.button",
              "st.warning",
              "st.dataframe",
              "df.to_csv",
              "st.download_button",
              "df.tail",
              "display_df.select_dtypes",
              "sort_values",
              "round",
              "strftime",
              "datetime.now"
            ],
            "called_by": [],
            "complexity": 5,
            "line_count": 41
          },
          "run_dashboard": {
            "type": "function",
            "calls": [
              "TrainingDashboard",
              "dashboard.start_monitoring",
              "logger.error",
              "dashboard.create_dashboard",
              "dashboard.stop_monitoring",
              "logger.info"
            ],
            "called_by": [],
            "complexity": 2,
            "line_count": 24
          }
        },
        "data_flow": {
          "global_variables": [
            "logger"
          ],
          "shared_state": {},
          "parameter_flow": {
            "TrainingDashboard.__init__": {
              "parameters": [
                "self",
                "metrics_path",
                "update_interval",
                "max_history"
              ],
              "parameter_count": 4,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "TrainingDashboard.start_monitoring": {
              "parameters": [
                "self"
              ],
              "parameter_count": 1,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "TrainingDashboard.stop_monitoring": {
              "parameters": [
                "self"
              ],
              "parameter_count": 1,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "TrainingDashboard._monitor_loop": {
              "parameters": [
                "self"
              ],
              "parameter_count": 1,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "TrainingDashboard._update_metrics": {
              "parameters": [
                "self"
              ],
              "parameter_count": 1,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "TrainingDashboard.add_metrics": {
              "parameters": [
                "self",
                "metrics_dict"
              ],
              "parameter_count": 2,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "TrainingDashboard.get_metrics_dataframe": {
              "parameters": [
                "self"
              ],
              "parameter_count": 1,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "TrainingDashboard.create_dashboard": {
              "parameters": [
                "self"
              ],
              "parameter_count": 1,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "TrainingDashboard._render_current_status": {
              "parameters": [
                "self"
              ],
              "parameter_count": 1,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "TrainingDashboard._get_metric_delta": {
              "parameters": [
                "self",
                "metric_name"
              ],
              "parameter_count": 2,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "TrainingDashboard._render_training_plots": {
              "parameters": [
                "self"
              ],
              "parameter_count": 1,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "TrainingDashboard._render_advanced_plots": {
              "parameters": [
                "self"
              ],
              "parameter_count": 1,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "TrainingDashboard._render_risk_prediction_interface": {
              "parameters": [
                "self"
              ],
              "parameter_count": 1,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "TrainingDashboard._make_risk_controlled_prediction": {
              "parameters": [
                "self",
                "text",
                "confidence_level",
                "risk_tolerance",
                "fp_cost",
                "fn_cost"
              ],
              "parameter_count": 6,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "TrainingDashboard._render_metrics_table": {
              "parameters": [
                "self"
              ],
              "parameter_count": 1,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            }
          },
          "return_patterns": {
            "TrainingDashboard.__init__": {
              "return_statements": 0,
              "returns_none": false,
              "return_complexity": "single"
            },
            "TrainingDashboard.start_monitoring": {
              "return_statements": 2,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "TrainingDashboard.stop_monitoring": {
              "return_statements": 0,
              "returns_none": false,
              "return_complexity": "single"
            },
            "TrainingDashboard._monitor_loop": {
              "return_statements": 0,
              "returns_none": false,
              "return_complexity": "single"
            },
            "TrainingDashboard._update_metrics": {
              "return_statements": 2,
              "returns_none": true,
              "return_complexity": "multiple"
            },
            "TrainingDashboard.add_metrics": {
              "return_statements": 0,
              "returns_none": false,
              "return_complexity": "single"
            },
            "TrainingDashboard.get_metrics_dataframe": {
              "return_statements": 2,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "TrainingDashboard.create_dashboard": {
              "return_statements": 2,
              "returns_none": true,
              "return_complexity": "multiple"
            },
            "TrainingDashboard._render_current_status": {
              "return_statements": 1,
              "returns_none": true,
              "return_complexity": "single"
            },
            "TrainingDashboard._get_metric_delta": {
              "return_statements": 3,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "TrainingDashboard._render_training_plots": {
              "return_statements": 1,
              "returns_none": true,
              "return_complexity": "single"
            },
            "TrainingDashboard._render_advanced_plots": {
              "return_statements": 1,
              "returns_none": true,
              "return_complexity": "single"
            },
            "TrainingDashboard._render_risk_prediction_interface": {
              "return_statements": 0,
              "returns_none": false,
              "return_complexity": "single"
            },
            "TrainingDashboard._make_risk_controlled_prediction": {
              "return_statements": 0,
              "returns_none": false,
              "return_complexity": "single"
            },
            "TrainingDashboard._render_metrics_table": {
              "return_statements": 1,
              "returns_none": true,
              "return_complexity": "single"
            }
          }
        },
        "analysis_metadata": {
          "timestamp": "2025-08-14T18:24:47.816419Z",
          "analyzer_version": "1.0.0",
          "file_analyzed": "C:\\Users\\Kevin\\fine_tune_llm\\backups\\god_classes\\dashboard_backup_20250814_123055.py",
          "analysis_complete": true
        }
      },
      "summary_report": {
        "file_summary": {
          "file_path": "C:\\Users\\Kevin\\fine_tune_llm\\backups\\god_classes\\dashboard_backup_20250814_123055.py",
          "total_classes": 2,
          "total_methods": 15,
          "total_functions": 1,
          "total_imports": 10,
          "lines_of_code": 717,
          "total_complexity": 61
        },
        "complexity_analysis": {
          "average_methods_per_class": 7.5,
          "most_complex_class": {
            "name": "TrainingDashboard",
            "complexity": 61,
            "method_count": 15,
            "line_count": 771
          },
          "most_connected_method": {
            "name": "TrainingDashboard._render_advanced_plots",
            "total_connections": 53,
            "outgoing_calls": 53,
            "incoming_calls": 0
          },
          "dependency_density": 1.0
        },
        "decomposition_candidates": [
          {
            "class_name": "TrainingDashboard",
            "reason": "god_class",
            "method_count": 15,
            "complexity": 61,
            "line_count": 771,
            "decomposition_suggestions": [
              "Extract -related methods into separate class",
              "Extract utility methods into helper class"
            ]
          }
        ],
        "external_dependencies": {
          "third_party_imports": [
            "numpy",
            "streamlit",
            "plotly.graph_objects",
            "plotly.express",
            "pandas"
          ],
          "high_coupling_indicators": [
            "Highly connected methods: 8"
          ]
        }
      }
    },
    {
      "class_name": "EnhancedLoRASFTTrainer",
      "functionality_map": {
        "file_info": {
          "path": "C:\\Users\\Kevin\\fine_tune_llm\\backups\\god_classes\\sft_lora_backup_20250814_123726.py",
          "size": 35861,
          "lines": 873,
          "non_empty_lines": 717,
          "comment_lines": 102
        },
        "imports": {
          "stdlib": [
            "os",
            "json",
            "logging"
          ],
          "third_party": [
            "torch",
            "numpy"
          ],
          "local": [
            "yaml",
            "evaluate",
            "wandb",
            "argparse"
          ],
          "from_imports": {
            "pathlib": {
              "category": "stdlib",
              "items": [
                "Path"
              ]
            },
            "typing": {
              "category": "stdlib",
              "items": [
                "Dict",
                "Any",
                "Optional",
                "Union"
              ]
            },
            "transformers": {
              "category": "third_party",
              "items": [
                "AutoModelForCausalLM",
                "AutoTokenizer",
                "TrainingArguments",
                "Trainer",
                "DataCollatorForLanguageModeling",
                "EarlyStoppingCallback",
                "BitsAndBytesConfig",
                "get_cosine_schedule_with_warmup",
                "get_linear_schedule_with_warmup"
              ]
            },
            "peft": {
              "category": "local",
              "items": [
                "LoraConfig",
                "AdaLoraConfig",
                "get_peft_model",
                "TaskType",
                "prepare_model_for_kbit_training"
              ]
            },
            "datasets": {
              "category": "third_party",
              "items": [
                "Dataset",
                "load_from_disk"
              ]
            },
            "tqdm": {
              "category": "local",
              "items": [
                "tqdm"
              ]
            },
            "sklearn.model_selection": {
              "category": "third_party",
              "items": [
                "train_test_split"
              ]
            },
            "uncertainty": {
              "category": "local",
              "items": [
                "MCDropoutWrapper",
                "compute_uncertainty_aware_loss",
                "should_abstain"
              ]
            },
            "fact_check": {
              "category": "local",
              "items": [
                "RELIANCEFactChecker",
                "FactualDataFilter"
              ]
            },
            "high_stakes_audit": {
              "category": "local",
              "items": [
                "BiasAuditor",
                "ExplainableReasoning",
                "ProceduralAlignment",
                "VerifiableTraining"
              ]
            },
            "metrics": {
              "category": "local",
              "items": [
                "compute_ece",
                "compute_mce",
                "compute_brier_score",
                "compute_abstention_metrics",
                "compute_risk_aware_metrics",
                "compute_confidence_metrics",
                "MetricsAggregator"
              ]
            },
            "conformal": {
              "category": "local",
              "items": [
                "ConformalPredictor",
                "RiskControlledPredictor"
              ]
            },
            "utils": {
              "category": "local",
              "items": [
                "MetricsTracker",
                "ErrorHandler"
              ]
            }
          },
          "import_aliases": {
            "np": "numpy"
          }
        },
        "classes": {
          "CalibratedTrainer": {
            "name": "CalibratedTrainer",
            "line_start": 61,
            "line_end": 286,
            "bases": [
              "Trainer"
            ],
            "decorators": [],
            "methods": {
              "__init__": {
                "name": "__init__",
                "line_start": 64,
                "line_end": 77,
                "line_count": 14,
                "parameters": [
                  "self",
                  "metrics_aggregator",
                  "conformal_predictor",
                  "abstention_loss_config"
                ],
                "decorators": [],
                "docstring": null,
                "has_args": true,
                "has_kwargs": true,
                "is_async": false,
                "calls_made": [
                  "__init__",
                  "float",
                  "self.abstention_loss_config.get",
                  "self.abstention_loss_config.get",
                  "self.abstention_loss_config.get",
                  "self.abstention_loss_config.get",
                  "super"
                ],
                "complexity": 0,
                "return_count": 0,
                "returns_none": false
              },
              "evaluate": {
                "name": "evaluate",
                "line_start": 79,
                "line_end": 155,
                "line_count": 77,
                "parameters": [
                  "self",
                  "eval_dataset",
                  "ignore_keys",
                  "metric_key_prefix"
                ],
                "decorators": [],
                "docstring": "Enhanced evaluation with calibration and advanced metrics.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "evaluate",
                  "self.get_eval_dataloader",
                  "self._get_predictions_and_labels",
                  "super",
                  "compute_brier_score",
                  "compute_confidence_metrics",
                  "confidence_metrics.items",
                  "self.calibration_history.append",
                  "logger.warning",
                  "len",
                  "len",
                  "np.max",
                  "np.argmax",
                  "astype",
                  "compute_ece",
                  "compute_mce",
                  "compute_ece",
                  "compute_mce",
                  "abstentions.sum",
                  "compute_abstention_metrics",
                  "abstention_metrics.items",
                  "self.conformal_predictor.calibrate",
                  "self.conformal_predictor.evaluate_coverage",
                  "coverage_metrics.items",
                  "self.metrics_aggregator.add_metrics",
                  "astype",
                  "hasattr",
                  "int",
                  "k.replace",
                  "eval_results.items",
                  "k.startswith"
                ],
                "complexity": 11,
                "return_count": 2,
                "returns_none": false
              },
              "_get_predictions_and_labels": {
                "name": "_get_predictions_and_labels",
                "line_start": 157,
                "line_end": 200,
                "line_count": 44,
                "parameters": [
                  "self",
                  "dataloader"
                ],
                "decorators": [],
                "docstring": "Extract predictions, labels, and probabilities from dataloader.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "self.model.eval",
                  "torch.no_grad",
                  "np.concatenate",
                  "np.concatenate",
                  "np.concatenate",
                  "self.model",
                  "torch.softmax",
                  "probabilities.append",
                  "torch.argmax",
                  "predictions.append",
                  "len",
                  "np.array",
                  "np.array",
                  "reshape",
                  "numpy",
                  "numpy",
                  "labels.append",
                  "isinstance",
                  "v.to",
                  "batch.items",
                  "numpy",
                  "np.array",
                  "probs.cpu",
                  "preds.cpu",
                  "cpu"
                ],
                "complexity": 4,
                "return_count": 2,
                "returns_none": false
              },
              "should_adjust_learning_rate": {
                "name": "should_adjust_learning_rate",
                "line_start": 202,
                "line_end": 209,
                "line_count": 8,
                "parameters": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Check if learning rate should be adjusted based on calibration.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "all",
                  "len",
                  "range",
                  "len"
                ],
                "complexity": 1,
                "return_count": 2,
                "returns_none": false
              },
              "adjust_learning_rate": {
                "name": "adjust_learning_rate",
                "line_start": 211,
                "line_end": 217,
                "line_count": 7,
                "parameters": [
                  "self",
                  "factor"
                ],
                "decorators": [],
                "docstring": "Adjust learning rate based on calibration drift.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "logger.info"
                ],
                "complexity": 2,
                "return_count": 0,
                "returns_none": false
              },
              "compute_abstention_aware_loss": {
                "name": "compute_abstention_aware_loss",
                "line_start": 219,
                "line_end": 282,
                "line_count": 64,
                "parameters": [
                  "self",
                  "model",
                  "inputs",
                  "return_outputs"
                ],
                "decorators": [],
                "docstring": "Compute abstention-aware loss that encourages confident predictions\nand penalizes uncertain predictions appropriately.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "model",
                  "inputs.get",
                  "torch.nn.CrossEntropyLoss",
                  "loss_fct",
                  "torch.softmax",
                  "total_loss.mean",
                  "logits.dim",
                  "contiguous",
                  "contiguous",
                  "shift_logits.view",
                  "shift_labels.view",
                  "len",
                  "torch.max",
                  "torch.relu",
                  "torch.sum",
                  "model",
                  "shift_logits.size",
                  "torch.tensor",
                  "model",
                  "torch.log"
                ],
                "complexity": 5,
                "return_count": 5,
                "returns_none": false
              },
              "compute_loss": {
                "name": "compute_loss",
                "line_start": 284,
                "line_end": 286,
                "line_count": 3,
                "parameters": [
                  "self",
                  "model",
                  "inputs",
                  "return_outputs"
                ],
                "decorators": [],
                "docstring": "Override compute_loss to use abstention-aware loss.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "self.compute_abstention_aware_loss"
                ],
                "complexity": 0,
                "return_count": 1,
                "returns_none": false
              }
            },
            "properties": [],
            "class_variables": [],
            "instance_variables": "{'metrics_aggregator', 'best_ece', 'uncertainty_weight', 'calibration_history', 'abstention_penalty', 'conformal_predictor', 'abstention_threshold', 'use_abstention_loss', 'abstention_loss_config'}",
            "docstring": "Enhanced Trainer with calibration monitoring and advanced metrics.",
            "complexity_metrics": {
              "method_count": 7,
              "line_count": 226,
              "cyclomatic_complexity": 23,
              "public_methods": 5,
              "private_methods": 2,
              "property_count": 0,
              "inheritance_depth": 1
            }
          },
          "CalibrationMonitorCallback": {
            "name": "CalibrationMonitorCallback",
            "line_start": 289,
            "line_end": 298,
            "bases": [],
            "decorators": [],
            "methods": {
              "on_evaluate": {
                "name": "on_evaluate",
                "line_start": 292,
                "line_end": 298,
                "line_count": 7,
                "parameters": [
                  "self",
                  "args",
                  "state",
                  "control",
                  "trainer"
                ],
                "decorators": [],
                "docstring": "Called after evaluation.",
                "has_args": false,
                "has_kwargs": true,
                "is_async": false,
                "calls_made": [
                  "isinstance",
                  "trainer.should_adjust_learning_rate",
                  "trainer.adjust_learning_rate",
                  "logger.info"
                ],
                "complexity": 2,
                "return_count": 0,
                "returns_none": false
              }
            },
            "properties": [],
            "class_variables": [],
            "instance_variables": "set()",
            "docstring": "Callback to monitor calibration and adjust learning rate.",
            "complexity_metrics": {
              "method_count": 1,
              "line_count": 10,
              "cyclomatic_complexity": 2,
              "public_methods": 1,
              "private_methods": 0,
              "property_count": 0,
              "inheritance_depth": 0
            }
          },
          "EnhancedLoRASFTTrainer": {
            "name": "EnhancedLoRASFTTrainer",
            "line_start": 301,
            "line_end": 795,
            "bases": [],
            "decorators": [],
            "methods": {
              "__init__": {
                "name": "__init__",
                "line_start": 304,
                "line_end": 346,
                "line_count": 43,
                "parameters": [
                  "self",
                  "config_path"
                ],
                "decorators": [],
                "docstring": "Initialize enhanced LoRA SFT trainer.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "Path",
                  "self.output_dir.mkdir",
                  "open",
                  "yaml.safe_load",
                  "MetricsAggregator",
                  "self.config.get",
                  "get",
                  "get",
                  "self._initialize_high_stakes_components",
                  "evaluate.load",
                  "get",
                  "ConformalPredictor",
                  "logger.info",
                  "RiskControlledPredictor",
                  "logger.info",
                  "advanced_config.get",
                  "advanced_config.get"
                ],
                "complexity": 6,
                "return_count": 0,
                "returns_none": false
              },
              "_initialize_high_stakes_components": {
                "name": "_initialize_high_stakes_components",
                "line_start": 348,
                "line_end": 365,
                "line_count": 18,
                "parameters": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Initialize high-stakes precision and auditing components.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "self.config.get",
                  "get",
                  "get",
                  "get",
                  "BiasAuditor",
                  "logger.info",
                  "ProceduralAlignment",
                  "logger.info",
                  "VerifiableTraining",
                  "logger.info",
                  "high_stakes_config.get",
                  "high_stakes_config.get",
                  "high_stakes_config.get"
                ],
                "complexity": 3,
                "return_count": 0,
                "returns_none": false
              },
              "get_quantization_config": {
                "name": "get_quantization_config",
                "line_start": 367,
                "line_end": 388,
                "line_count": 22,
                "parameters": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get quantization configuration for QLoRA.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "BitsAndBytesConfig",
                  "BitsAndBytesConfig",
                  "ValueError"
                ],
                "complexity": 3,
                "return_count": 3,
                "returns_none": false
              },
              "get_peft_config": {
                "name": "get_peft_config",
                "line_start": 390,
                "line_end": 423,
                "line_count": 34,
                "parameters": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get PEFT configuration based on method.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "AdaLoraConfig",
                  "LoraConfig",
                  "adalora_config.get",
                  "adalora_config.get",
                  "adalora_config.get",
                  "adalora_config.get"
                ],
                "complexity": 1,
                "return_count": 1,
                "returns_none": false
              },
              "setup_model_and_tokenizer": {
                "name": "setup_model_and_tokenizer",
                "line_start": 425,
                "line_end": 481,
                "line_count": 57,
                "parameters": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Setup model and tokenizer with LoRA/QLoRA/DoRA.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "logger.info",
                  "AutoTokenizer.from_pretrained",
                  "self.get_quantization_config",
                  "AutoModelForCausalLM.from_pretrained",
                  "self.get_peft_config",
                  "get_peft_model",
                  "self.model.print_trainable_parameters",
                  "get",
                  "logger.info",
                  "prepare_model_for_kbit_training",
                  "get",
                  "uncertainty_config.get",
                  "self.config.get",
                  "uncertainty_config.get",
                  "MCDropoutWrapper",
                  "logger.info",
                  "uncertainty_config.get"
                ],
                "complexity": 5,
                "return_count": 0,
                "returns_none": false
              },
              "get_model_specific_prompt": {
                "name": "get_model_specific_prompt",
                "line_start": 483,
                "line_end": 496,
                "line_count": 14,
                "parameters": [
                  "self",
                  "text",
                  "metadata"
                ],
                "decorators": [],
                "docstring": "Format prompt according to model-specific chat template.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "self.model_config.get",
                  "strip"
                ],
                "complexity": 3,
                "return_count": 4,
                "returns_none": false
              },
              "prepare_dataset": {
                "name": "prepare_dataset",
                "line_start": 498,
                "line_end": 543,
                "line_count": 46,
                "parameters": [
                  "self",
                  "dataset"
                ],
                "decorators": [],
                "docstring": "Prepare dataset for training with model-specific formatting.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "dataset.map",
                  "example.get",
                  "example.get",
                  "self.get_model_specific_prompt",
                  "example.get",
                  "self.tokenizer",
                  "copy",
                  "example.get",
                  "example.get",
                  "format_example",
                  "get"
                ],
                "complexity": 0,
                "return_count": 3,
                "returns_none": false
              },
              "split_dataset": {
                "name": "split_dataset",
                "line_start": 545,
                "line_end": 563,
                "line_count": 19,
                "parameters": [
                  "self",
                  "dataset"
                ],
                "decorators": [],
                "docstring": "Split dataset into train/validation sets.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "list",
                  "train_test_split",
                  "Dataset.from_list",
                  "Dataset.from_list",
                  "ex.get"
                ],
                "complexity": 1,
                "return_count": 2,
                "returns_none": false
              },
              "compute_metrics": {
                "name": "compute_metrics",
                "line_start": 565,
                "line_end": 575,
                "line_count": 11,
                "parameters": [
                  "self",
                  "eval_pred"
                ],
                "decorators": [],
                "docstring": "Compute evaluation metrics.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "predictions.mean",
                  "item",
                  "torch.exp",
                  "torch.tensor"
                ],
                "complexity": 0,
                "return_count": 1,
                "returns_none": false
              },
              "get_scheduler": {
                "name": "get_scheduler",
                "line_start": 577,
                "line_end": 594,
                "line_count": 18,
                "parameters": [
                  "self",
                  "optimizer",
                  "num_training_steps"
                ],
                "decorators": [],
                "docstring": "Get learning rate scheduler.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "get_cosine_schedule_with_warmup",
                  "get_linear_schedule_with_warmup"
                ],
                "complexity": 2,
                "return_count": 3,
                "returns_none": false
              },
              "init_wandb": {
                "name": "init_wandb",
                "line_start": 596,
                "line_end": 628,
                "line_count": 33,
                "parameters": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Initialize Weights & Biases if enabled.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "wandb_config.get",
                  "wandb_config.get",
                  "wandb.init",
                  "logger.info",
                  "wandb_config.get",
                  "logger.warning",
                  "wandb_config.get",
                  "wandb_config.get"
                ],
                "complexity": 4,
                "return_count": 2,
                "returns_none": true
              },
              "get_report_to": {
                "name": "get_report_to",
                "line_start": 630,
                "line_end": 638,
                "line_count": 9,
                "parameters": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get list of reporting tools.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "wandb_config.get",
                  "report_to.append"
                ],
                "complexity": 1,
                "return_count": 1,
                "returns_none": false
              },
              "train": {
                "name": "train",
                "line_start": 640,
                "line_end": 795,
                "line_count": 156,
                "parameters": [
                  "self",
                  "train_dataset",
                  "eval_dataset",
                  "resume_from_checkpoint"
                ],
                "decorators": [],
                "docstring": "Train the model with all enhancements.",
                "has_args": false,
                "has_kwargs": false,
                "is_async": false,
                "calls_made": [
                  "self.init_wandb",
                  "self.setup_model_and_tokenizer",
                  "logger.info",
                  "self.prepare_dataset",
                  "TrainingArguments",
                  "DataCollatorForLanguageModeling",
                  "logger.info",
                  "logger.info",
                  "logger.info",
                  "trainer.train",
                  "logger.info",
                  "trainer.save_model",
                  "self.tokenizer.save_pretrained",
                  "logger.info",
                  "self.split_dataset",
                  "self.prepare_dataset",
                  "callbacks.append",
                  "callbacks.append",
                  "get",
                  "CalibratedTrainer",
                  "Trainer",
                  "trainer.create_optimizer",
                  "self.get_scheduler",
                  "logger.info",
                  "str",
                  "str",
                  "open",
                  "json.dump",
                  "len",
                  "str",
                  "get",
                  "get",
                  "self.get_report_to",
                  "str",
                  "EarlyStoppingCallback",
                  "CalibrationMonitorCallback",
                  "self.config.get",
                  "len",
                  "len"
                ],
                "complexity": 8,
                "return_count": 1,
                "returns_none": false
              }
            },
            "properties": [],
            "class_variables": [],
            "instance_variables": "{'metrics_aggregator', 'config', 'metrics', 'risk_controlled_predictor', 'conformal_predictor', 'high_stakes_components', 'output_dir', 'model_config'}",
            "docstring": "Enhanced LoRA Supervised Fine-Tuning with QLoRA, DoRA, and multi-model support.",
            "complexity_metrics": {
              "method_count": 13,
              "line_count": 495,
              "cyclomatic_complexity": 37,
              "public_methods": 11,
              "private_methods": 2,
              "property_count": 0,
              "inheritance_depth": 0
            }
          }
        },
        "functions": {
          "train_and_eval": {
            "name": "train_and_eval",
            "line_start": 798,
            "line_end": 807,
            "line_count": 10,
            "parameters": [
              "config"
            ],
            "decorators": [],
            "docstring": "Wrapper function for hyperparameter tuning.",
            "has_args": false,
            "has_kwargs": false,
            "is_async": false,
            "calls_made": [
              "EnhancedLoRASFTTrainer"
            ],
            "complexity": 0,
            "return_count": 1,
            "returns_none": false
          },
          "main": {
            "name": "main",
            "line_start": 810,
            "line_end": 868,
            "line_count": 59,
            "parameters": [],
            "decorators": [],
            "docstring": "Main training function.",
            "has_args": false,
            "has_kwargs": false,
            "is_async": false,
            "calls_made": [
              "argparse.ArgumentParser",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.parse_args",
              "args.train_data.endswith",
              "EnhancedLoRASFTTrainer",
              "trainer.train",
              "open",
              "yaml.safe_load",
              "int",
              "open",
              "yaml.dump",
              "Dataset.from_list",
              "load_from_disk",
              "args.eval_data.endswith",
              "open",
              "json.load",
              "Dataset.from_list",
              "load_from_disk",
              "open",
              "json.load"
            ],
            "complexity": 5,
            "return_count": 0,
            "returns_none": false
          }
        },
        "dependencies": {
          "internal_calls": {
            "global": [
              "logging.getLogger",
              "main"
            ],
            "train_and_eval": [
              "EnhancedLoRASFTTrainer"
            ],
            "main": [
              "argparse.ArgumentParser",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.parse_args",
              "args.train_data.endswith",
              "EnhancedLoRASFTTrainer",
              "trainer.train",
              "open",
              "yaml.safe_load",
              "int",
              "open",
              "yaml.dump",
              "Dataset.from_list",
              "load_from_disk",
              "args.eval_data.endswith",
              "open",
              "json.load",
              "Dataset.from_list",
              "load_from_disk",
              "open",
              "json.load"
            ],
            "CalibratedTrainer.__init__": [
              "__init__",
              "float",
              "self.abstention_loss_config.get",
              "self.abstention_loss_config.get",
              "self.abstention_loss_config.get",
              "self.abstention_loss_config.get",
              "super"
            ],
            "CalibratedTrainer.evaluate": [
              "evaluate",
              "self.get_eval_dataloader",
              "self._get_predictions_and_labels",
              "super",
              "compute_brier_score",
              "compute_confidence_metrics",
              "confidence_metrics.items",
              "self.calibration_history.append",
              "logger.warning",
              "len",
              "len",
              "np.max",
              "np.argmax",
              "astype",
              "compute_ece",
              "compute_mce",
              "compute_ece",
              "compute_mce",
              "abstentions.sum",
              "compute_abstention_metrics",
              "abstention_metrics.items",
              "self.conformal_predictor.calibrate",
              "self.conformal_predictor.evaluate_coverage",
              "coverage_metrics.items",
              "self.metrics_aggregator.add_metrics",
              "astype",
              "hasattr",
              "int",
              "k.replace",
              "eval_results.items",
              "k.startswith"
            ],
            "CalibratedTrainer._get_predictions_and_labels": [
              "self.model.eval",
              "torch.no_grad",
              "np.concatenate",
              "np.concatenate",
              "np.concatenate",
              "self.model",
              "torch.softmax",
              "probabilities.append",
              "torch.argmax",
              "predictions.append",
              "len",
              "np.array",
              "np.array",
              "reshape",
              "numpy",
              "numpy",
              "labels.append",
              "isinstance",
              "v.to",
              "batch.items",
              "numpy",
              "np.array",
              "probs.cpu",
              "preds.cpu",
              "cpu"
            ],
            "CalibratedTrainer.should_adjust_learning_rate": [
              "all",
              "len",
              "range",
              "len"
            ],
            "CalibratedTrainer.compute_abstention_aware_loss": [
              "model",
              "inputs.get",
              "torch.nn.CrossEntropyLoss",
              "loss_fct",
              "torch.softmax",
              "total_loss.mean",
              "logits.dim",
              "contiguous",
              "contiguous",
              "shift_logits.view",
              "shift_labels.view",
              "len",
              "torch.max",
              "torch.relu",
              "torch.sum",
              "model",
              "shift_logits.size",
              "torch.tensor",
              "model",
              "torch.log"
            ],
            "CalibratedTrainer.compute_loss": [
              "self.compute_abstention_aware_loss"
            ],
            "CalibrationMonitorCallback.on_evaluate": [
              "isinstance",
              "trainer.should_adjust_learning_rate",
              "trainer.adjust_learning_rate",
              "logger.info"
            ],
            "EnhancedLoRASFTTrainer.__init__": [
              "Path",
              "self.output_dir.mkdir",
              "open",
              "yaml.safe_load",
              "MetricsAggregator",
              "self.config.get",
              "get",
              "get",
              "self._initialize_high_stakes_components",
              "evaluate.load",
              "get",
              "ConformalPredictor",
              "logger.info",
              "RiskControlledPredictor",
              "logger.info",
              "advanced_config.get",
              "advanced_config.get"
            ],
            "EnhancedLoRASFTTrainer._initialize_high_stakes_components": [
              "self.config.get",
              "get",
              "get",
              "get",
              "BiasAuditor",
              "logger.info",
              "ProceduralAlignment",
              "logger.info",
              "VerifiableTraining",
              "logger.info",
              "high_stakes_config.get",
              "high_stakes_config.get",
              "high_stakes_config.get"
            ],
            "EnhancedLoRASFTTrainer.setup_model_and_tokenizer": [
              "logger.info",
              "AutoTokenizer.from_pretrained",
              "self.get_quantization_config",
              "AutoModelForCausalLM.from_pretrained",
              "self.get_peft_config",
              "get_peft_model",
              "self.model.print_trainable_parameters",
              "get",
              "logger.info",
              "prepare_model_for_kbit_training",
              "get",
              "uncertainty_config.get",
              "self.config.get",
              "uncertainty_config.get",
              "MCDropoutWrapper",
              "logger.info",
              "uncertainty_config.get"
            ],
            "EnhancedLoRASFTTrainer.get_model_specific_prompt": [
              "self.model_config.get",
              "strip"
            ],
            "EnhancedLoRASFTTrainer.prepare_dataset": [
              "dataset.map",
              "get"
            ],
            "EnhancedLoRASFTTrainer.split_dataset": [
              "list",
              "train_test_split",
              "Dataset.from_list",
              "Dataset.from_list",
              "ex.get"
            ],
            "EnhancedLoRASFTTrainer.compute_metrics": [
              "predictions.mean",
              "item",
              "torch.exp",
              "torch.tensor"
            ],
            "EnhancedLoRASFTTrainer.init_wandb": [
              "wandb_config.get",
              "wandb_config.get",
              "wandb.init",
              "logger.info",
              "wandb_config.get",
              "logger.warning",
              "wandb_config.get",
              "wandb_config.get"
            ],
            "EnhancedLoRASFTTrainer.train": [
              "self.init_wandb",
              "self.setup_model_and_tokenizer",
              "logger.info",
              "self.prepare_dataset",
              "TrainingArguments",
              "DataCollatorForLanguageModeling",
              "logger.info",
              "logger.info",
              "logger.info",
              "trainer.train",
              "logger.info",
              "trainer.save_model",
              "self.tokenizer.save_pretrained",
              "logger.info",
              "self.split_dataset",
              "self.prepare_dataset",
              "callbacks.append",
              "callbacks.append",
              "get",
              "CalibratedTrainer",
              "Trainer",
              "trainer.create_optimizer",
              "self.get_scheduler",
              "logger.info",
              "str",
              "str",
              "open",
              "json.dump",
              "len",
              "str",
              "get",
              "get",
              "self.get_report_to",
              "str",
              "EarlyStoppingCallback",
              "CalibrationMonitorCallback",
              "self.config.get",
              "len",
              "len"
            ],
            "EnhancedLoRASFTTrainer.get_quantization_config": [
              "BitsAndBytesConfig",
              "BitsAndBytesConfig",
              "ValueError"
            ],
            "EnhancedLoRASFTTrainer.get_peft_config": [
              "AdaLoraConfig",
              "LoraConfig",
              "adalora_config.get",
              "adalora_config.get",
              "adalora_config.get",
              "adalora_config.get"
            ],
            "EnhancedLoRASFTTrainer.format_example": [
              "example.get",
              "example.get",
              "self.get_model_specific_prompt",
              "example.get",
              "example.get",
              "example.get"
            ],
            "EnhancedLoRASFTTrainer.tokenize_function": [
              "self.tokenizer",
              "copy",
              "format_example"
            ],
            "EnhancedLoRASFTTrainer.get_scheduler": [
              "get_cosine_schedule_with_warmup",
              "get_linear_schedule_with_warmup"
            ],
            "EnhancedLoRASFTTrainer.get_report_to": [
              "wandb_config.get",
              "report_to.append"
            ],
            "CalibratedTrainer.adjust_learning_rate": [
              "logger.info"
            ]
          },
          "external_calls": {},
          "attribute_access": {
            "global": [
              "logging.getLogger"
            ],
            "train_and_eval": [
              "trainer.config"
            ],
            "main": [
              "args.model",
              "args.lora_method",
              "args.eval_data",
              "argparse.ArgumentParser",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.parse_args",
              "args.model",
              "args.quantization",
              "args.train_data.endswith",
              "args.config",
              "trainer.train",
              "args.config",
              "yaml.safe_load",
              "args.config",
              "yaml.dump",
              "args.train_data",
              "Dataset.from_list",
              "args.train_data",
              "args.eval_data.endswith",
              "args.resume",
              "args.quantization",
              "args.train_data",
              "json.load",
              "args.eval_data",
              "Dataset.from_list",
              "args.eval_data",
              "args.eval_data",
              "json.load"
            ],
            "CalibratedTrainer.__init__": [
              "self.metrics_aggregator",
              "self.conformal_predictor",
              "self.calibration_history",
              "self.best_ece",
              "self.abstention_loss_config",
              "self.use_abstention_loss",
              "self.abstention_threshold",
              "self.abstention_penalty",
              "self.uncertainty_weight",
              "__init__",
              "self.abstention_loss_config.get",
              "self.abstention_loss_config.get",
              "self.abstention_loss_config.get",
              "self.abstention_loss_config.get",
              "self.abstention_loss_config",
              "self.abstention_loss_config",
              "self.abstention_loss_config",
              "self.abstention_loss_config"
            ],
            "CalibratedTrainer.compute_abstention_aware_loss": [
              "outputs.logits",
              "self.use_abstention_loss",
              "inputs.get",
              "torch.nn.CrossEntropyLoss",
              "torch.softmax",
              "self.abstention_penalty",
              "self.uncertainty_weight",
              "total_loss.mean",
              "outputs.loss",
              "loss",
              "outputs.loss",
              "torch.nn",
              "logits.dim",
              "contiguous",
              "contiguous",
              "shift_logits.view",
              "shift_labels.view",
              "torch.max",
              "torch.relu",
              "torch.sum",
              "shift_logits.size",
              "torch.tensor",
              "self.abstention_threshold",
              "logits.device",
              "torch.log"
            ],
            "EnhancedLoRASFTTrainer.__init__": [
              "self.model_config",
              "self.output_dir",
              "self.metrics",
              "self.metrics_aggregator",
              "self.conformal_predictor",
              "self.risk_controlled_predictor",
              "self.high_stakes_components",
              "self.config",
              "self.config",
              "self.output_dir.mkdir",
              "self.metrics_aggregator",
              "yaml.safe_load",
              "self.config",
              "self.output_dir",
              "self.config",
              "self.output_dir",
              "self.config.get",
              "get",
              "self.conformal_predictor",
              "get",
              "self.risk_controlled_predictor",
              "self._initialize_high_stakes_components",
              "self.config",
              "self.metrics",
              "evaluate.load",
              "self.config",
              "get",
              "logger.info",
              "logger.info",
              "advanced_config.get",
              "advanced_config.get"
            ],
            "EnhancedLoRASFTTrainer.setup_model_and_tokenizer": [
              "self.tokenizer",
              "self.model",
              "self.model",
              "logger.info",
              "AutoTokenizer.from_pretrained",
              "self.tokenizer.pad_token",
              "self.tokenizer.pad_token",
              "self.tokenizer.eos_token",
              "self.get_quantization_config",
              "AutoModelForCausalLM.from_pretrained",
              "self.model",
              "self.get_peft_config",
              "self.model",
              "self.model.print_trainable_parameters",
              "get",
              "logger.info",
              "self.model_config",
              "self.tokenizer",
              "self.tokenizer",
              "self.tokenizer",
              "self.model_config",
              "self.model",
              "self.model",
              "get",
              "uncertainty_config.get",
              "torch.bfloat16",
              "torch.float16",
              "self.model",
              "self.config",
              "self.model_config",
              "self.config.get",
              "uncertainty_config.get",
              "self.model",
              "logger.info",
              "self.config",
              "self.config",
              "self.config",
              "uncertainty_config.get"
            ],
            "CalibratedTrainer.evaluate": [
              "evaluate",
              "self.get_eval_dataloader",
              "self._get_predictions_and_labels",
              "confidence_metrics.items",
              "self.calibration_history.append",
              "self.best_ece",
              "self.best_ece",
              "self.conformal_predictor",
              "self.metrics_aggregator",
              "logger.warning",
              "probabilities.shape",
              "np.max",
              "np.argmax",
              "astype",
              "abstentions.sum",
              "abstention_metrics.items",
              "self.calibration_history",
              "self.conformal_predictor.calibrate",
              "self.conformal_predictor.evaluate_coverage",
              "coverage_metrics.items",
              "self.metrics_aggregator.add_metrics",
              "astype",
              "self.conformal_predictor",
              "self.conformal_predictor",
              "self.state",
              "self.state.epoch",
              "k.replace",
              "self.metrics_aggregator",
              "probabilities.shape",
              "probabilities.shape",
              "probabilities.shape",
              "self.state",
              "eval_results.items",
              "k.startswith"
            ],
            "CalibratedTrainer._get_predictions_and_labels": [
              "self.model.eval",
              "self.model",
              "torch.no_grad",
              "outputs.logits",
              "np.concatenate",
              "np.concatenate",
              "np.concatenate",
              "self.model",
              "torch.softmax",
              "probabilities.append",
              "torch.argmax",
              "predictions.append",
              "predictions.shape",
              "np.array",
              "np.array",
              "reshape",
              "numpy",
              "numpy",
              "labels.append",
              "torch.Tensor",
              "v.to",
              "self.args.device",
              "batch.items",
              "numpy",
              "np.array",
              "self.args",
              "probs.cpu",
              "preds.cpu",
              "cpu"
            ],
            "CalibratedTrainer.should_adjust_learning_rate": [
              "self.calibration_history",
              "self.calibration_history"
            ],
            "CalibratedTrainer.adjust_learning_rate": [
              "self.optimizer",
              "self.optimizer.param_groups",
              "self.optimizer",
              "logger.info"
            ],
            "CalibratedTrainer.compute_loss": [
              "self.compute_abstention_aware_loss"
            ],
            "EnhancedLoRASFTTrainer._initialize_high_stakes_components": [
              "self.config.get",
              "get",
              "get",
              "get",
              "self.config",
              "self.high_stakes_components",
              "self.config",
              "logger.info",
              "self.high_stakes_components",
              "self.config",
              "logger.info",
              "self.high_stakes_components",
              "self.config",
              "logger.info",
              "high_stakes_config.get",
              "high_stakes_config.get",
              "high_stakes_config.get"
            ],
            "EnhancedLoRASFTTrainer.get_quantization_config": [
              "torch.bfloat16",
              "torch.float16",
              "self.config"
            ],
            "EnhancedLoRASFTTrainer.get_model_specific_prompt": [
              "self.model_config.get",
              "strip",
              "self.model_config",
              "self.config"
            ],
            "EnhancedLoRASFTTrainer.prepare_dataset": [
              "dataset.map",
              "dataset.column_names",
              "get",
              "self.config"
            ],
            "EnhancedLoRASFTTrainer.compute_metrics": [
              "predictions.mean",
              "item",
              "torch.exp",
              "torch.tensor"
            ],
            "EnhancedLoRASFTTrainer.init_wandb": [
              "wandb_config.get",
              "wandb_config.get",
              "wandb.init",
              "logger.info",
              "self.config",
              "wandb_config.get",
              "logger.warning",
              "self.model_config",
              "wandb_config.get",
              "wandb_config.get",
              "self.config",
              "self.config",
              "self.config"
            ],
            "EnhancedLoRASFTTrainer.train": [
              "self.init_wandb",
              "self.setup_model_and_tokenizer",
              "logger.info",
              "self.prepare_dataset",
              "trainer.optimizer",
              "trainer.lr_scheduler",
              "logger.info",
              "logger.info",
              "logger.info",
              "trainer.train",
              "logger.info",
              "trainer.save_model",
              "self.tokenizer.save_pretrained",
              "self.model_config",
              "logger.info",
              "self.split_dataset",
              "self.prepare_dataset",
              "self.tokenizer",
              "callbacks.append",
              "self.metrics_aggregator",
              "callbacks.append",
              "self.metrics_aggregator",
              "get",
              "trainer.create_optimizer",
              "self.get_scheduler",
              "logger.info",
              "self.tokenizer",
              "self.config",
              "self.config",
              "self.config",
              "json.dump",
              "self.config",
              "self.config",
              "self.output_dir",
              "get",
              "get",
              "self.get_report_to",
              "self.config",
              "self.metrics_aggregator",
              "self.conformal_predictor",
              "self.model",
              "self.model",
              "self.config",
              "self.output_dir",
              "self.output_dir",
              "self.output_dir",
              "self.output_dir",
              "self.config",
              "self.config",
              "self.config",
              "self.config",
              "self.config",
              "self.config",
              "self.config",
              "self.config",
              "self.config",
              "self.config",
              "self.config",
              "self.config",
              "self.config",
              "self.config",
              "self.config",
              "self.config",
              "self.output_dir",
              "self.config.get",
              "self.compute_metrics",
              "self.compute_metrics",
              "self.config",
              "self.config",
              "self.model_config",
              "self.config",
              "self.config",
              "self.config",
              "self.config",
              "self.config",
              "self.config",
              "self.config",
              "self.config",
              "self.config"
            ],
            "CalibrationMonitorCallback.on_evaluate": [
              "trainer.should_adjust_learning_rate",
              "trainer.adjust_learning_rate",
              "logger.info"
            ],
            "EnhancedLoRASFTTrainer.get_peft_config": [
              "self.config",
              "self.config",
              "TaskType.CAUSAL_LM",
              "TaskType.CAUSAL_LM",
              "self.model_config",
              "adalora_config.get",
              "adalora_config.get",
              "adalora_config.get",
              "adalora_config.get",
              "self.model_config",
              "self.config",
              "self.config",
              "self.config",
              "self.config",
              "self.config",
              "self.config",
              "self.config"
            ],
            "EnhancedLoRASFTTrainer.format_example": [
              "example.get",
              "example.get",
              "self.get_model_specific_prompt",
              "example.get",
              "example.get",
              "example.get"
            ],
            "EnhancedLoRASFTTrainer.tokenize_function": [
              "self.tokenizer",
              "copy",
              "self.config",
              "self.config",
              "self.config"
            ],
            "EnhancedLoRASFTTrainer.split_dataset": [
              "self.config",
              "Dataset.from_list",
              "Dataset.from_list",
              "self.config",
              "ex.get"
            ],
            "EnhancedLoRASFTTrainer.get_scheduler": [
              "self.config"
            ],
            "EnhancedLoRASFTTrainer.get_report_to": [
              "self.config",
              "wandb_config.get",
              "report_to.append"
            ]
          },
          "inheritance_chain": {
            "CalibratedTrainer": [
              "Trainer"
            ]
          },
          "composition_relationships": {}
        },
        "call_graph": {
          "CalibratedTrainer.__init__": {
            "type": "method",
            "calls": [
              "__init__",
              "float",
              "self.abstention_loss_config.get",
              "self.abstention_loss_config.get",
              "self.abstention_loss_config.get",
              "self.abstention_loss_config.get",
              "super"
            ],
            "called_by": [],
            "complexity": 0,
            "line_count": 14
          },
          "CalibratedTrainer.evaluate": {
            "type": "method",
            "calls": [
              "evaluate",
              "self.get_eval_dataloader",
              "self._get_predictions_and_labels",
              "super",
              "compute_brier_score",
              "compute_confidence_metrics",
              "confidence_metrics.items",
              "self.calibration_history.append",
              "logger.warning",
              "len",
              "len",
              "np.max",
              "np.argmax",
              "astype",
              "compute_ece",
              "compute_mce",
              "compute_ece",
              "compute_mce",
              "abstentions.sum",
              "compute_abstention_metrics",
              "abstention_metrics.items",
              "self.conformal_predictor.calibrate",
              "self.conformal_predictor.evaluate_coverage",
              "coverage_metrics.items",
              "self.metrics_aggregator.add_metrics",
              "astype",
              "hasattr",
              "int",
              "k.replace",
              "eval_results.items",
              "k.startswith"
            ],
            "called_by": [],
            "complexity": 11,
            "line_count": 77
          },
          "CalibratedTrainer._get_predictions_and_labels": {
            "type": "method",
            "calls": [
              "self.model.eval",
              "torch.no_grad",
              "np.concatenate",
              "np.concatenate",
              "np.concatenate",
              "self.model",
              "torch.softmax",
              "probabilities.append",
              "torch.argmax",
              "predictions.append",
              "len",
              "np.array",
              "np.array",
              "reshape",
              "numpy",
              "numpy",
              "labels.append",
              "isinstance",
              "v.to",
              "batch.items",
              "numpy",
              "np.array",
              "probs.cpu",
              "preds.cpu",
              "cpu"
            ],
            "called_by": [],
            "complexity": 4,
            "line_count": 44
          },
          "CalibratedTrainer.should_adjust_learning_rate": {
            "type": "method",
            "calls": [
              "all",
              "len",
              "range",
              "len"
            ],
            "called_by": [],
            "complexity": 1,
            "line_count": 8
          },
          "CalibratedTrainer.adjust_learning_rate": {
            "type": "method",
            "calls": [
              "logger.info"
            ],
            "called_by": [],
            "complexity": 2,
            "line_count": 7
          },
          "CalibratedTrainer.compute_abstention_aware_loss": {
            "type": "method",
            "calls": [
              "model",
              "inputs.get",
              "torch.nn.CrossEntropyLoss",
              "loss_fct",
              "torch.softmax",
              "total_loss.mean",
              "logits.dim",
              "contiguous",
              "contiguous",
              "shift_logits.view",
              "shift_labels.view",
              "len",
              "torch.max",
              "torch.relu",
              "torch.sum",
              "model",
              "shift_logits.size",
              "torch.tensor",
              "model",
              "torch.log"
            ],
            "called_by": [],
            "complexity": 5,
            "line_count": 64
          },
          "CalibratedTrainer.compute_loss": {
            "type": "method",
            "calls": [
              "self.compute_abstention_aware_loss"
            ],
            "called_by": [],
            "complexity": 0,
            "line_count": 3
          },
          "CalibrationMonitorCallback.on_evaluate": {
            "type": "method",
            "calls": [
              "isinstance",
              "trainer.should_adjust_learning_rate",
              "trainer.adjust_learning_rate",
              "logger.info"
            ],
            "called_by": [],
            "complexity": 2,
            "line_count": 7
          },
          "EnhancedLoRASFTTrainer.__init__": {
            "type": "method",
            "calls": [
              "Path",
              "self.output_dir.mkdir",
              "open",
              "yaml.safe_load",
              "MetricsAggregator",
              "self.config.get",
              "get",
              "get",
              "self._initialize_high_stakes_components",
              "evaluate.load",
              "get",
              "ConformalPredictor",
              "logger.info",
              "RiskControlledPredictor",
              "logger.info",
              "advanced_config.get",
              "advanced_config.get"
            ],
            "called_by": [],
            "complexity": 6,
            "line_count": 43
          },
          "EnhancedLoRASFTTrainer._initialize_high_stakes_components": {
            "type": "method",
            "calls": [
              "self.config.get",
              "get",
              "get",
              "get",
              "BiasAuditor",
              "logger.info",
              "ProceduralAlignment",
              "logger.info",
              "VerifiableTraining",
              "logger.info",
              "high_stakes_config.get",
              "high_stakes_config.get",
              "high_stakes_config.get"
            ],
            "called_by": [],
            "complexity": 3,
            "line_count": 18
          },
          "EnhancedLoRASFTTrainer.get_quantization_config": {
            "type": "method",
            "calls": [
              "BitsAndBytesConfig",
              "BitsAndBytesConfig",
              "ValueError"
            ],
            "called_by": [],
            "complexity": 3,
            "line_count": 22
          },
          "EnhancedLoRASFTTrainer.get_peft_config": {
            "type": "method",
            "calls": [
              "AdaLoraConfig",
              "LoraConfig",
              "adalora_config.get",
              "adalora_config.get",
              "adalora_config.get",
              "adalora_config.get"
            ],
            "called_by": [],
            "complexity": 1,
            "line_count": 34
          },
          "EnhancedLoRASFTTrainer.setup_model_and_tokenizer": {
            "type": "method",
            "calls": [
              "logger.info",
              "AutoTokenizer.from_pretrained",
              "self.get_quantization_config",
              "AutoModelForCausalLM.from_pretrained",
              "self.get_peft_config",
              "get_peft_model",
              "self.model.print_trainable_parameters",
              "get",
              "logger.info",
              "prepare_model_for_kbit_training",
              "get",
              "uncertainty_config.get",
              "self.config.get",
              "uncertainty_config.get",
              "MCDropoutWrapper",
              "logger.info",
              "uncertainty_config.get"
            ],
            "called_by": [],
            "complexity": 5,
            "line_count": 57
          },
          "EnhancedLoRASFTTrainer.get_model_specific_prompt": {
            "type": "method",
            "calls": [
              "self.model_config.get",
              "strip"
            ],
            "called_by": [],
            "complexity": 3,
            "line_count": 14
          },
          "EnhancedLoRASFTTrainer.prepare_dataset": {
            "type": "method",
            "calls": [
              "dataset.map",
              "example.get",
              "example.get",
              "self.get_model_specific_prompt",
              "example.get",
              "self.tokenizer",
              "copy",
              "example.get",
              "example.get",
              "format_example",
              "get"
            ],
            "called_by": [],
            "complexity": 0,
            "line_count": 46
          },
          "EnhancedLoRASFTTrainer.split_dataset": {
            "type": "method",
            "calls": [
              "list",
              "train_test_split",
              "Dataset.from_list",
              "Dataset.from_list",
              "ex.get"
            ],
            "called_by": [],
            "complexity": 1,
            "line_count": 19
          },
          "EnhancedLoRASFTTrainer.compute_metrics": {
            "type": "method",
            "calls": [
              "predictions.mean",
              "item",
              "torch.exp",
              "torch.tensor"
            ],
            "called_by": [],
            "complexity": 0,
            "line_count": 11
          },
          "EnhancedLoRASFTTrainer.get_scheduler": {
            "type": "method",
            "calls": [
              "get_cosine_schedule_with_warmup",
              "get_linear_schedule_with_warmup"
            ],
            "called_by": [],
            "complexity": 2,
            "line_count": 18
          },
          "EnhancedLoRASFTTrainer.init_wandb": {
            "type": "method",
            "calls": [
              "wandb_config.get",
              "wandb_config.get",
              "wandb.init",
              "logger.info",
              "wandb_config.get",
              "logger.warning",
              "wandb_config.get",
              "wandb_config.get"
            ],
            "called_by": [],
            "complexity": 4,
            "line_count": 33
          },
          "EnhancedLoRASFTTrainer.get_report_to": {
            "type": "method",
            "calls": [
              "wandb_config.get",
              "report_to.append"
            ],
            "called_by": [],
            "complexity": 1,
            "line_count": 9
          },
          "EnhancedLoRASFTTrainer.train": {
            "type": "method",
            "calls": [
              "self.init_wandb",
              "self.setup_model_and_tokenizer",
              "logger.info",
              "self.prepare_dataset",
              "TrainingArguments",
              "DataCollatorForLanguageModeling",
              "logger.info",
              "logger.info",
              "logger.info",
              "trainer.train",
              "logger.info",
              "trainer.save_model",
              "self.tokenizer.save_pretrained",
              "logger.info",
              "self.split_dataset",
              "self.prepare_dataset",
              "callbacks.append",
              "callbacks.append",
              "get",
              "CalibratedTrainer",
              "Trainer",
              "trainer.create_optimizer",
              "self.get_scheduler",
              "logger.info",
              "str",
              "str",
              "open",
              "json.dump",
              "len",
              "str",
              "get",
              "get",
              "self.get_report_to",
              "str",
              "EarlyStoppingCallback",
              "CalibrationMonitorCallback",
              "self.config.get",
              "len",
              "len"
            ],
            "called_by": [],
            "complexity": 8,
            "line_count": 156
          },
          "train_and_eval": {
            "type": "function",
            "calls": [
              "EnhancedLoRASFTTrainer"
            ],
            "called_by": [],
            "complexity": 0,
            "line_count": 10
          },
          "main": {
            "type": "function",
            "calls": [
              "argparse.ArgumentParser",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.add_argument",
              "parser.parse_args",
              "args.train_data.endswith",
              "EnhancedLoRASFTTrainer",
              "trainer.train",
              "open",
              "yaml.safe_load",
              "int",
              "open",
              "yaml.dump",
              "Dataset.from_list",
              "load_from_disk",
              "args.eval_data.endswith",
              "open",
              "json.load",
              "Dataset.from_list",
              "load_from_disk",
              "open",
              "json.load"
            ],
            "called_by": [],
            "complexity": 5,
            "line_count": 59
          }
        },
        "data_flow": {
          "global_variables": [
            "logger"
          ],
          "shared_state": {},
          "parameter_flow": {
            "CalibratedTrainer.__init__": {
              "parameters": [
                "self",
                "metrics_aggregator",
                "conformal_predictor",
                "abstention_loss_config"
              ],
              "parameter_count": 4,
              "has_self": true,
              "has_kwargs": true,
              "has_args": true
            },
            "CalibratedTrainer.evaluate": {
              "parameters": [
                "self",
                "eval_dataset",
                "ignore_keys",
                "metric_key_prefix"
              ],
              "parameter_count": 4,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "CalibratedTrainer._get_predictions_and_labels": {
              "parameters": [
                "self",
                "dataloader"
              ],
              "parameter_count": 2,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "CalibratedTrainer.should_adjust_learning_rate": {
              "parameters": [
                "self"
              ],
              "parameter_count": 1,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "CalibratedTrainer.adjust_learning_rate": {
              "parameters": [
                "self",
                "factor"
              ],
              "parameter_count": 2,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "CalibratedTrainer.compute_abstention_aware_loss": {
              "parameters": [
                "self",
                "model",
                "inputs",
                "return_outputs"
              ],
              "parameter_count": 4,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "CalibratedTrainer.compute_loss": {
              "parameters": [
                "self",
                "model",
                "inputs",
                "return_outputs"
              ],
              "parameter_count": 4,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "CalibrationMonitorCallback.on_evaluate": {
              "parameters": [
                "self",
                "args",
                "state",
                "control",
                "trainer"
              ],
              "parameter_count": 5,
              "has_self": true,
              "has_kwargs": true,
              "has_args": false
            },
            "EnhancedLoRASFTTrainer.__init__": {
              "parameters": [
                "self",
                "config_path"
              ],
              "parameter_count": 2,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "EnhancedLoRASFTTrainer._initialize_high_stakes_components": {
              "parameters": [
                "self"
              ],
              "parameter_count": 1,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "EnhancedLoRASFTTrainer.get_quantization_config": {
              "parameters": [
                "self"
              ],
              "parameter_count": 1,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "EnhancedLoRASFTTrainer.get_peft_config": {
              "parameters": [
                "self"
              ],
              "parameter_count": 1,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "EnhancedLoRASFTTrainer.setup_model_and_tokenizer": {
              "parameters": [
                "self"
              ],
              "parameter_count": 1,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "EnhancedLoRASFTTrainer.get_model_specific_prompt": {
              "parameters": [
                "self",
                "text",
                "metadata"
              ],
              "parameter_count": 3,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "EnhancedLoRASFTTrainer.prepare_dataset": {
              "parameters": [
                "self",
                "dataset"
              ],
              "parameter_count": 2,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "EnhancedLoRASFTTrainer.split_dataset": {
              "parameters": [
                "self",
                "dataset"
              ],
              "parameter_count": 2,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "EnhancedLoRASFTTrainer.compute_metrics": {
              "parameters": [
                "self",
                "eval_pred"
              ],
              "parameter_count": 2,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "EnhancedLoRASFTTrainer.get_scheduler": {
              "parameters": [
                "self",
                "optimizer",
                "num_training_steps"
              ],
              "parameter_count": 3,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "EnhancedLoRASFTTrainer.init_wandb": {
              "parameters": [
                "self"
              ],
              "parameter_count": 1,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "EnhancedLoRASFTTrainer.get_report_to": {
              "parameters": [
                "self"
              ],
              "parameter_count": 1,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            },
            "EnhancedLoRASFTTrainer.train": {
              "parameters": [
                "self",
                "train_dataset",
                "eval_dataset",
                "resume_from_checkpoint"
              ],
              "parameter_count": 4,
              "has_self": true,
              "has_kwargs": false,
              "has_args": false
            }
          },
          "return_patterns": {
            "CalibratedTrainer.__init__": {
              "return_statements": 0,
              "returns_none": false,
              "return_complexity": "single"
            },
            "CalibratedTrainer.evaluate": {
              "return_statements": 2,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "CalibratedTrainer._get_predictions_and_labels": {
              "return_statements": 2,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "CalibratedTrainer.should_adjust_learning_rate": {
              "return_statements": 2,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "CalibratedTrainer.adjust_learning_rate": {
              "return_statements": 0,
              "returns_none": false,
              "return_complexity": "single"
            },
            "CalibratedTrainer.compute_abstention_aware_loss": {
              "return_statements": 5,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "CalibratedTrainer.compute_loss": {
              "return_statements": 1,
              "returns_none": false,
              "return_complexity": "single"
            },
            "CalibrationMonitorCallback.on_evaluate": {
              "return_statements": 0,
              "returns_none": false,
              "return_complexity": "single"
            },
            "EnhancedLoRASFTTrainer.__init__": {
              "return_statements": 0,
              "returns_none": false,
              "return_complexity": "single"
            },
            "EnhancedLoRASFTTrainer._initialize_high_stakes_components": {
              "return_statements": 0,
              "returns_none": false,
              "return_complexity": "single"
            },
            "EnhancedLoRASFTTrainer.get_quantization_config": {
              "return_statements": 3,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "EnhancedLoRASFTTrainer.get_peft_config": {
              "return_statements": 1,
              "returns_none": false,
              "return_complexity": "single"
            },
            "EnhancedLoRASFTTrainer.setup_model_and_tokenizer": {
              "return_statements": 0,
              "returns_none": false,
              "return_complexity": "single"
            },
            "EnhancedLoRASFTTrainer.get_model_specific_prompt": {
              "return_statements": 4,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "EnhancedLoRASFTTrainer.prepare_dataset": {
              "return_statements": 3,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "EnhancedLoRASFTTrainer.split_dataset": {
              "return_statements": 2,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "EnhancedLoRASFTTrainer.compute_metrics": {
              "return_statements": 1,
              "returns_none": false,
              "return_complexity": "single"
            },
            "EnhancedLoRASFTTrainer.get_scheduler": {
              "return_statements": 3,
              "returns_none": false,
              "return_complexity": "multiple"
            },
            "EnhancedLoRASFTTrainer.init_wandb": {
              "return_statements": 2,
              "returns_none": true,
              "return_complexity": "multiple"
            },
            "EnhancedLoRASFTTrainer.get_report_to": {
              "return_statements": 1,
              "returns_none": false,
              "return_complexity": "single"
            },
            "EnhancedLoRASFTTrainer.train": {
              "return_statements": 1,
              "returns_none": false,
              "return_complexity": "single"
            }
          }
        },
        "analysis_metadata": {
          "timestamp": "2025-08-14T18:24:48.155988Z",
          "analyzer_version": "1.0.0",
          "file_analyzed": "C:\\Users\\Kevin\\fine_tune_llm\\backups\\god_classes\\sft_lora_backup_20250814_123726.py",
          "analysis_complete": true
        }
      },
      "summary_report": {
        "file_summary": {
          "file_path": "C:\\Users\\Kevin\\fine_tune_llm\\backups\\god_classes\\sft_lora_backup_20250814_123726.py",
          "total_classes": 3,
          "total_methods": 21,
          "total_functions": 2,
          "total_imports": 9,
          "lines_of_code": 717,
          "total_complexity": 62
        },
        "complexity_analysis": {
          "average_methods_per_class": 7.0,
          "most_complex_class": {
            "name": "EnhancedLoRASFTTrainer",
            "complexity": 37,
            "method_count": 13,
            "line_count": 495
          },
          "most_connected_method": {
            "name": "EnhancedLoRASFTTrainer.train",
            "total_connections": 39,
            "outgoing_calls": 39,
            "incoming_calls": 0
          },
          "dependency_density": 1.0
        },
        "decomposition_candidates": [
          {
            "class_name": "CalibratedTrainer",
            "reason": "god_class",
            "method_count": 7,
            "complexity": 23,
            "line_count": 226,
            "decomposition_suggestions": []
          },
          {
            "class_name": "EnhancedLoRASFTTrainer",
            "reason": "god_class",
            "method_count": 13,
            "complexity": 37,
            "line_count": 495,
            "decomposition_suggestions": [
              "Extract get-related methods into separate class"
            ]
          }
        ],
        "external_dependencies": {
          "third_party_imports": [
            "torch",
            "numpy"
          ],
          "high_coupling_indicators": [
            "Highly connected methods: 9"
          ]
        }
      }
    }
  ],
  "summary_statistics": {
    "total_classes": 11,
    "total_methods": 83,
    "total_functions": 8,
    "total_complexity": 280,
    "decomposition_candidates": 5
  }
}