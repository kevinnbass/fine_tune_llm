version: '3.8'

services:
  # Main API service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    image: birdflu-ensemble:latest
    container_name: birdflu-api
    ports:
      - "8000:8000"
    environment:
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=birdflu
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
      - POSTGRES_DB=birdflu
      - OTLP_ENDPOINT=http://otel-collector:4317
      - API_TOKENS=${API_TOKENS:-dev-token}
      - LOG_LEVEL=INFO
    volumes:
      - ./artifacts/models:/app/artifacts/models:ro
      - ./configs:/app/configs:ro
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - birdflu-network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: birdflu-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    networks:
      - birdflu-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: birdflu-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=birdflu
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
      - POSTGRES_DB=birdflu
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - birdflu-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: birdflu-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - birdflu-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: birdflu-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - birdflu-network

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: birdflu-otel
    ports:
      - "4317:4317"  # OTLP gRPC
      - "4318:4318"  # OTLP HTTP
      - "8888:8888"  # Prometheus metrics
    volumes:
      - ./monitoring/otel-config.yaml:/etc/otel-collector-config.yaml:ro
    command: ["--config=/etc/otel-collector-config.yaml"]
    restart: unless-stopped
    networks:
      - birdflu-network

  # MLflow for experiment tracking
  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    container_name: birdflu-mlflow
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://birdflu:${POSTGRES_PASSWORD:-changeme}@postgres/mlflow
      - MLFLOW_ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - mlflow-data:/mlflow/artifacts
    command: >
      mlflow server
      --host 0.0.0.0
      --port 5000
      --backend-store-uri postgresql://birdflu:${POSTGRES_PASSWORD:-changeme}@postgres/mlflow
      --default-artifact-root /mlflow/artifacts
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - birdflu-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: birdflu-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - birdflu-network

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:
  mlflow-data:

networks:
  birdflu-network:
    driver: bridge